<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马俊昌的个人博客</title>
  
  <subtitle>念念不忘，必有回想。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://majunchang.github.io/"/>
  <updated>2018-12-22T09:28:48.000Z</updated>
  <id>https://majunchang.github.io/</id>
  
  <author>
    <name>马俊昌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端分离-搭建本地mock服务</title>
    <link href="https://majunchang.github.io/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0mock%E6%9C%8D%E5%8A%A1/"/>
    <id>https://majunchang.github.io/前后端分离-搭建本地mock服务/</id>
    <published>2018-12-22T09:28:30.000Z</published>
    <updated>2018-12-22T09:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建本地-mock-服务器-—为了更好的前端开发"><a href="#搭建本地-mock-服务器-—为了更好的前端开发" class="headerlink" title="搭建本地 mock 服务器 —为了更好的前端开发"></a>搭建本地 mock 服务器 —为了更好的前端开发</h3><blockquote><p>工作中，有时候前端的很多工作需要后端的支持，但是可能后端的接口还没有开发完，或者有些时候在联调阶段，修复某个 bug 的时候，环境挂了。。。 那么这个时候，我们的很多工作无法顺利的进行下去。于是萌生了搭建本地服务器的想法。</p></blockquote><h5 id="首先粗略的说一下它的好处"><a href="#首先粗略的说一下它的好处" class="headerlink" title="首先粗略的说一下它的好处"></a>首先粗略的说一下它的好处</h5><ul><li>前端更加独立，在开发阶段对于后端的依赖性大大降低。</li><li>联调和开发截断，对于新增加的接口，只需要后端提供接口文档就好，不需要等到他们真正的开发完成，前端就可以自己进入联调。</li><li>修复和定位 bug 更加便捷，自测阶段中对于某些极端的边界条件，我们自己就可以实现构造数据，模拟边界条件。</li></ul><h3 id="mock-数据的方式（这里我提供了三种，可自行选择）"><a href="#mock-数据的方式（这里我提供了三种，可自行选择）" class="headerlink" title="mock 数据的方式（这里我提供了三种，可自行选择）"></a>mock 数据的方式（这里我提供了三种，可自行选择）</h3><h6 id="在线-mock-网址：-Easy-mock-（缺点-当需要修改大量数据和新增很多-api-的时候，比较繁琐）"><a href="#在线-mock-网址：-Easy-mock-（缺点-当需要修改大量数据和新增很多-api-的时候，比较繁琐）" class="headerlink" title="在线 mock 网址： Easy mock （缺点: 当需要修改大量数据和新增很多 api 的时候，比较繁琐）"></a>在线 mock 网址： <a href="https://easy-mock.com/login" target="_blank" rel="noopener">Easy mock</a> （缺点: 当需要修改大量数据和新增很多 api 的时候，比较繁琐）</h6><h6 id="jsonserver-gulp-实现（-缺点：大部分需求都能满足，但是对于需要动态解析参数的接口，支持的不够完美-）"><a href="#jsonserver-gulp-实现（-缺点：大部分需求都能满足，但是对于需要动态解析参数的接口，支持的不够完美-）" class="headerlink" title="jsonserver+gulp 实现（ 缺点：大部分需求都能满足，但是对于需要动态解析参数的接口，支持的不够完美 ）"></a>jsonserver+gulp 实现（ 缺点：大部分需求都能满足，但是对于需要动态解析参数的接口，支持的不够完美 ）</h6><h6 id="node-express-实现-（-可实现几乎所有接口的情况，但是配置起来比第二种麻烦-）"><a href="#node-express-实现-（-可实现几乎所有接口的情况，但是配置起来比第二种麻烦-）" class="headerlink" title="node+express 实现 （ 可实现几乎所有接口的情况，但是配置起来比第二种麻烦 ）"></a>node+express 实现 （ 可实现几乎所有接口的情况，但是配置起来比第二种麻烦 ）</h6><h3 id="EasyMock"><a href="#EasyMock" class="headerlink" title="EasyMock"></a>EasyMock</h3><blockquote><p>官网提供详细的文档和说明，上手比较快，但是对于保密性比较强的公司，建议舍弃这种方式。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5703029-4b33f2628ba4710c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="JsonServer-Gulp-MockJs"><a href="#JsonServer-Gulp-MockJs" class="headerlink" title="JsonServer+Gulp+MockJs"></a>JsonServer+Gulp+MockJs</h3><blockquote><p>技术选型</p><ul><li>JsonSever 开启端口，提供服务。</li><li>Gulp 实现监听文件和热更新的功能。</li><li>MockJs 一个成熟的 mock 数据平台，通过其提供的 api，可以快速的生成大量测试数据。</li><li>babel 配置 es6语法。</li></ul></blockquote><h4 id="项目目录预览"><a href="#项目目录预览" class="headerlink" title="项目目录预览"></a>项目目录预览</h4><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><ol><li>api 为数据文件夹，配置不同的项目所需要的不同接口以及其返回值，在 index中进行继承 然后暴露给 mock/db 下 最后暴露给 server。（这个可以自行更改，只要最后暴露出去就可以<br>api/project.projectOne</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> projectOne = &#123;</span><br><span class="line">  <span class="string">'getList'</span>: &#123;</span><br><span class="line">    code: <span class="string">'0'</span>,</span><br><span class="line">    data: [&#123;</span><br><span class="line">      key: <span class="string">'1'</span>,</span><br><span class="line">      name: <span class="string">'John Brown'</span>,</span><br><span class="line">      age: <span class="number">32</span>,</span><br><span class="line">      address: <span class="string">'New York No. 1 Lake Park'</span>,</span><br><span class="line">      tags: [<span class="string">'nice'</span>, <span class="string">'developer'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      key: <span class="string">'2'</span>,</span><br><span class="line">      name: <span class="string">'Jim Green'</span>,</span><br><span class="line">      age: <span class="number">42</span>,</span><br><span class="line">      address: <span class="string">'London No. 1 Lake Park'</span>,</span><br><span class="line">      tags: [<span class="string">'loser'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      key: <span class="string">'3'</span>,</span><br><span class="line">      name: <span class="string">'Joe Black'</span>,</span><br><span class="line">      age: <span class="number">32</span>,</span><br><span class="line">      address: <span class="string">'Sidney No. 1 Lake Park'</span>,</span><br><span class="line">      tags: [<span class="string">'cool'</span>, <span class="string">'teacher'</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  getInfo: &#123;</span><br><span class="line">    error_no: <span class="number">0</span>,</span><br><span class="line">    errMessage: <span class="string">''</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      info: &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'BeJson'</span>,</span><br><span class="line">        <span class="string">'url'</span>: <span class="string">'http://www.bejson.com'</span>,</span><br><span class="line">        <span class="string">'page'</span>: <span class="number">88</span>,</span><br><span class="line">        <span class="string">'isNonProfit'</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">'address'</span>: &#123;</span><br><span class="line">          <span class="string">'street'</span>: <span class="string">'科技园路.'</span>,</span><br><span class="line">          <span class="string">'city'</span>: <span class="string">'江苏苏州'</span>,</span><br><span class="line">          <span class="string">'country'</span>: <span class="string">'中国'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'links'</span>: [&#123;</span><br><span class="line">          <span class="string">'name'</span>: <span class="string">'Google'</span>,</span><br><span class="line">          <span class="string">'url'</span>: <span class="string">'http://www.google.com'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">'name'</span>: <span class="string">'Baidu'</span>,</span><br><span class="line">          <span class="string">'url'</span>: <span class="string">'http://www.baidu.com'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">'name'</span>: <span class="string">'SoSo'</span>,</span><br><span class="line">          <span class="string">'url'</span>: <span class="string">'http://www.SoSo.com'</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...projectOne</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api/index (支持 es5 和 es6共存写法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">'./test/test.js'</span>)</span><br><span class="line"><span class="keyword">import</span> projectOne <span class="keyword">from</span> <span class="string">'./project/projectOne'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...test,</span><br><span class="line">  ...projectOne</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>mock 文件夹 集中 mock 平台，我们想要通过 mock<br>平台生成的接口放在这个文件夹。<br>mock/db.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var Mock = require('mockjs')</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'../api'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...api,</span><br><span class="line">  getComment: Mock.mock(&#123;</span><br><span class="line">    <span class="string">'error'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'success'</span>,</span><br><span class="line">    <span class="string">'result|40'</span>: [&#123;</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'@name'</span>,</span><br><span class="line">      <span class="string">'comment'</span>: <span class="string">'@cparagraph'</span>,</span><br><span class="line">      <span class="string">'date'</span>: <span class="string">'@datetime'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;),</span><br><span class="line">  addComment: Mock.mock(&#123;</span><br><span class="line">    <span class="string">'error'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'success'</span>,</span><br><span class="line">    <span class="string">'result|5'</span>: [&#123;</span><br><span class="line">      <span class="string">'comment'</span>: <span class="string">'@cparagraph'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// post/1 和post/2 返回不同的内容</span></span><br><span class="line">  <span class="string">'posts'</span>: [&#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'title'</span>: <span class="string">'json-server'</span>,</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'typicode'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">'title'</span>: <span class="string">'json-server'</span>,</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'typicode'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'comments'</span>: [&#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'body'</span>: <span class="string">'some comment'</span>,</span><br><span class="line">    <span class="string">'postId'</span>: <span class="number">1</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">'profile'</span>: &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'typicode'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>router文件夹 大致结构和 api 文件夹相似，暴露路由（支持 es6 和 es5 的写法共存）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import test from &apos;./test/test&apos;</span><br><span class="line">const projectOne = require(&apos;./project/projectOne&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  ...test,</span><br><span class="line">  ...projectOne</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router/project/projectOne</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'/localMock/*'</span>: <span class="string">'/$1'</span>,</span><br><span class="line">  <span class="string">'/localMock/getList'</span>: <span class="string">'/getList'</span>,</span><br><span class="line">  <span class="string">'/localMock/getInfo'</span>: <span class="string">'/getInfo'</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果没有'/localMock/*': '/$1',</span></span><br><span class="line"><span class="comment">    下面接口连接无法访问到</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="string">'/localMock/getInfo?123456+.2345.3434'</span>: <span class="string">'/getInfo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>gulpfile 提供监听文件和接口热更新的功能</li><li>main.js 中 提供babel 配置 es6 的写法</li><li>server.js 中 启动端口，配置路由和接口返回值。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/5703029-b68bcfad0562f0c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="运行预览"><a href="#运行预览" class="headerlink" title="运行预览"></a>运行预览</h4><p><img src="https://upload-images.jianshu.io/upload_images/5703029-e07b1ea1024d1fec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5703029-45a518dd077215c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5703029-e0e10667086a9b8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="如何运行？"><a href="#如何运行？" class="headerlink" title="如何运行？"></a>如何运行？</h4><p><a href="https://github.com/majunchang/localMock.git" target="_blank" rel="noopener">localMock项目地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/majunchang/localMock.git</span><br><span class="line">cd localMock</span><br><span class="line">npm i </span><br><span class="line">npm dev | npm run start | npm run mock (都可以启动)</span><br><span class="line">npm run gulp ( 启动并且可以热更新 )</span><br></pre></td></tr></table></figure><blockquote><p>在查询了关于jsonserver 的 router 配置方式以后，总感觉对于动态执行参数的接口支持的不太好，于是就有了 nodemock（什么分页，什么查询等，处理起来就是一把梭！ 复制粘贴 就是刚！）</p></blockquote><h3 id="NodeMock-node-express-嗯？…"><a href="#NodeMock-node-express-嗯？…" class="headerlink" title="NodeMock(node+express+嗯？…)"></a>NodeMock(node+express+嗯？…)</h3><h6 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h6><ul><li>api 配置接口以及接口返回值（类似与上面的 localmock 的配置）</li></ul><p>api/projectOne<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> projectOne = &#123;</span><br><span class="line">  getme: &#123;</span><br><span class="line">    name: <span class="string">'xiaohong'</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    gender: <span class="string">'男'</span>,</span><br><span class="line">    xuexi: <span class="string">'cha11'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getshe: Mock.mock(&#123;</span><br><span class="line">    <span class="string">'error'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'success'</span>,</span><br><span class="line">    <span class="string">'result|1'</span>: [&#123;</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'@name'</span>,</span><br><span class="line">      <span class="string">'comment'</span>: <span class="string">'@cparagraph'</span>,</span><br><span class="line">      <span class="string">'date'</span>: <span class="string">'@datetime'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;),</span><br><span class="line">  liyitong: Mock.mock(&#123;</span><br><span class="line">    <span class="string">'error'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'success'</span>,</span><br><span class="line">    <span class="string">'result|3'</span>: [&#123;</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'@name'</span>,</span><br><span class="line">      <span class="string">'comment'</span>: <span class="string">'@cparagraph'</span>,</span><br><span class="line">      <span class="string">'date'</span>: <span class="string">'@datetime'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> projectOne</span><br></pre></td></tr></table></figure><p></p><ul><li>controller 配置动态查询参数的请求 示例中给出了 get 和 post 的两种情况</li></ul><p>controller/project.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = Mock.mock(&#123;</span><br><span class="line">    <span class="string">'error'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'success'</span>,</span><br><span class="line">    <span class="string">'result|10'</span>: [&#123;</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'@name'</span>,</span><br><span class="line">      <span class="string">'comment'</span>: <span class="string">'@cparagraph'</span>,</span><br><span class="line">      <span class="string">'date'</span>: <span class="string">'@datetime'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    arr</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">geturl</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  对于接口中的 get 参数  我们使用 query 获取即可</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    num</span><br><span class="line">  &#125; = req.query</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    name: <span class="number">111</span>,</span><br><span class="line">    age: <span class="number">11</span>,</span><br><span class="line">    message: req.originalUrl,</span><br><span class="line">    num: <span class="string">`get 请求中的接口 num 为<span class="subst">$&#123;num&#125;</span>`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">postUrl</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//   针对普通的 post 请求 如果是表单格式的需要单独配置一下</span></span><br><span class="line">  res.json(&#123;</span><br><span class="line">    name: <span class="string">`post 请求的接口中，post参数为<span class="subst">$&#123;req.body&#125;</span>`</span>,</span><br><span class="line">    age: <span class="number">11</span>,</span><br><span class="line">    message: req.originalUrl,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>router 中为路由配置</li><li>app.js 启动端口服务，接受路由和接口配置</li><li>main.js babel 配置es6 语法</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5703029-e77b7e7486bb8400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h6 id="运行预览-1"><a href="#运行预览-1" class="headerlink" title="运行预览"></a>运行预览</h6><blockquote><p>这个项目，没有预览所有接口的功能。感兴趣的读者可以自己添加(当访问指定链接时，获取router 中的信息 进行展示出来，解决方法不唯一，可以查文档 自己添加)。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5703029-22badb80e74ecb9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5703029-bf8dd09a0322ac0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h6 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h6><p><a href="https://github.com/majunchang/node-mock" target="_blank" rel="noopener">项目地址</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git clone https://github.com/majunchang/node-mock</span><br><span class="line"></span><br><span class="line">cd node-mock</span><br><span class="line">npm i </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>文章如有错误和不正之处，欢迎指正和批评，同时也希望大家多多支持,非常感谢。</p><p><img src="https://upload-images.jianshu.io/upload_images/5703029-9f9f1f8cf4eed957.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;搭建本地-mock-服务器-—为了更好的前端开发&quot;&gt;&lt;a href=&quot;#搭建本地-mock-服务器-—为了更好的前端开发&quot; class=&quot;headerlink&quot; title=&quot;搭建本地 mock 服务器 —为了更好的前端开发&quot;&gt;&lt;/a&gt;搭建本地 mock 服务器 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>详解js原型，构造函数以及class之间的原型关系</title>
    <link href="https://majunchang.github.io/%E8%AF%A6%E8%A7%A3js%E5%8E%9F%E5%9E%8B%EF%BC%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Aclass%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%85%B3%E7%B3%BB/"/>
    <id>https://majunchang.github.io/详解js原型，构造函数以及class之间的原型关系/</id>
    <published>2018-10-11T14:47:27.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><blockquote><p>在构造函数创建的时候，系统默认的帮构造函数创建并关联一个对象 这个对象就是原型</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>在原型中的所有属性和方法，都可以被和其关联的构造函数创建出来的所有的对象共享</p><h5 id="访问原型"><a href="#访问原型" class="headerlink" title="访问原型"></a>访问原型</h5><p>构造函数名.prototype 实例化的对象.<strong>proto</strong></p><h5 id="原型的简单使用"><a href="#原型的简单使用" class="headerlink" title="原型的简单使用"></a>原型的简单使用</h5><ol><li>利用对象的动态特性为原型对象增加成员</li><li>直接替换原型对象（jq核心方法的实现 就是使用原型替换的思想）</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Person.prototype.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line">   p.fn()</span><br><span class="line">   p.name = <span class="string">'晓丽'</span></span><br><span class="line">   p.fn()</span><br><span class="line">   <span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line">   <span class="built_in">console</span>.log(p)</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5703029-f6f93658cfcdabc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/5703029-4b7c22281abecf3e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="1-prototype"><a href="#1-prototype" class="headerlink" title="1. prototype"></a>1. prototype</h3><p>含义： 是一个函数的属性，这个属性是一个指针，指向一个对象<br>作用： 构造函数调用 访问该构造函数所关联的原型对象</p><h3 id="2-proto"><a href="#2-proto" class="headerlink" title="2. proto"></a>2. <strong>proto</strong></h3><p>含义： 是一个对象拥有的内置属性，是js内部使用寻找原型链的属性，通过该属性可以允许实例对象直接访问到原型</p><h3 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h3><p>含义：原型对象的constructor 指向其构造函数,如果替换了原型对象之后，这个constructor属性就不准确，需要手动补充一下<br><img src="http://upload-images.jianshu.io/upload_images/5703029-f0cdca6c86b70cd0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><img src="http://upload-images.jianshu.io/upload_images/5703029-f94e98852e196457.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="构造函数以及js原生Object对象之间的原型关系"><a href="#构造函数以及js原生Object对象之间的原型关系" class="headerlink" title="构造函数以及js原生Object对象之间的原型关系"></a>构造函数以及js原生Object对象之间的原型关系</h3><p><img src="http://upload-images.jianshu.io/upload_images/5703029-8548b5bdb83b82fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="原型的注意事项"><a href="#原型的注意事项" class="headerlink" title="原型的注意事项"></a>原型的注意事项</h2><ul><li>当对象在访问属性和方法的时候，会现在自身查找，如果没有才回去原型中找。（一级一级传递 形成了原型链）</li><li>替换原型对象的时候，替换之前构造函数创建的对象A和替换之后创建的对象B，A和B的原型是不一致的。</li><li>对象能够访问的原型，就是在对象创建的那一刻，和构造函数关联的那个原型</li></ul><blockquote><h2 id="扩展以及延伸"><a href="#扩展以及延伸" class="headerlink" title="扩展以及延伸"></a>扩展以及延伸</h2></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5703029-badb132db05176ea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><blockquote><p>在很多编程语言中，如java，objectC,c++等，都存在类的概念，类中有私有属性，私有方法等，通过类来实现面对对象的继承，但是，在ES5以及以前中不像上面这几种语言一样，有严格的类的概念。js通过构造函数以及原型链来实现继承。</p></blockquote><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>首字母必须为大写，用来区分普通函数</li><li>内部使用的this对象，来指向即将要生成的实例对象</li><li>使用new 关键字来生成实例对象（下面为new关键字的具体实现）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="comment">// 可以分解为</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.__proto__ = <span class="built_in">Date</span>.prototype;</span><br><span class="line">Base.call(obj)</span><br></pre></td></tr></table></figure><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>所有的实例对象都可以继承构造器函数中的属性和方法，但是同一个对象实例之间，无法共享属性。</li><li>如果方法在构造函数内部，每次new一个实例对象的时候，都会创建内部的这些方法，并且不同的实例对象之间，不能共享这些方法，造成了资源的浪费（于是有了原型这个概念）</li></ul><h3 id="实现方式-（简单列举几种）"><a href="#实现方式-（简单列举几种）" class="headerlink" title="实现方式 （简单列举几种）"></a>实现方式 （简单列举几种）</h3><h4 id="构造函数模式（自定义构造函数）"><a href="#构造函数模式（自定义构造函数）" class="headerlink" title="构造函数模式（自定义构造函数）"></a>构造函数模式（自定义构造函数）</h4><blockquote><p>构造函数与普通函数的区别<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Egperson</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Egperson(<span class="string">'mike'</span>,<span class="string">'18'</span>); <span class="comment">//this--&gt;person</span></span><br><span class="line">person.sayName();  <span class="comment">//'mike'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">egPerson</span> (<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">egPerson(<span class="string">'alice'</span>,<span class="string">'23'</span>); <span class="comment">//this--&gt;window</span></span><br><span class="line"><span class="built_in">window</span>.sayName();  <span class="comment">//'alice'</span></span><br></pre></td></tr></table></figure><p></p></blockquote><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    <span class="comment">//由于是函数调用模式，所以this打印出来是window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = CreatePerson(<span class="string">"小明"</span>, <span class="number">18</span>, <span class="string">"male"</span>);  <span class="comment">// 调用方式是函数的调用方式</span></span><br></pre></td></tr></table></figure><h4 id="寄生模式"><a href="#寄生模式" class="headerlink" title="寄生模式"></a>寄生模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function CreatePerson(name, age, gender)&#123;</span><br><span class="line">    var obj = new Object();</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    //这里的this指向new 创建出来的对象</span><br><span class="line">    console.log(this);</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line">var p = new CreatePerson(&quot;小明&quot;, 18, &quot;male&quot;);  // 调用方式是函数的调用方式</span><br></pre></td></tr></table></figure><h4 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="comment">//所有的公有方法都在这里定义</span></span><br><span class="line">        Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;；</span><br><span class="line"></span><br><span class="line">        Person.prototype.sayJob = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.job);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.age);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br><span class="line"></span><br><span class="line">person1.sayName();        <span class="comment">//Nicholas</span></span><br><span class="line">person2.sayName();        <span class="comment">//Greg</span></span><br></pre></td></tr></table></figure><blockquote><p>js实现继承的方式: 混入式继承，原型继承以及经典继承，ES6的Class也可以实现继承</p></blockquote><h2 id="Class-详解"><a href="#Class-详解" class="headerlink" title="Class 详解"></a>Class 详解</h2><blockquote><p>基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>class中的constructor函数相当于ES5中的构造函数（声明属性以及静态方法，这种类创建属性和创建方法参照上面动态原型模式的构造函数。个人感觉有很多相似之处</li><li>类中定义方法的时候，前面不加function，后面不加，可被实例对象也就是子类继承的方法 定义在类的prototype属性中。</li><li>类的内部定义的所有方法都是不可枚举的</li><li>类和模块内部默认采用严格模式</li><li>子类继承父类以后，必须在constructor中调用时super方法，否则不能新建实例，因为子类没有属于自己的this对象，而是继承了父类的this对象对其进行加工</li></ul><h4 id="类中的原型链关系"><a href="#类中的原型链关系" class="headerlink" title="类中的原型链关系"></a>类中的原型链关系</h4><blockquote><p>每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性。Class 作为构造函数的语法糖，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链。</p></blockquote><ol><li>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</li><li>子类prototype属性的<strong>proto</strong>属性，表示实例方法的继承，总是指向父类的prototype属性。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.__proto__ === A <span class="comment">// true</span></span><br><span class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类的继承内部实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 的实例继承 A 的实例</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 继承 A 的静态属性</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf = <span class="function"><span class="keyword">function</span> (<span class="params">obj, proto</span>) </span>&#123;</span><br><span class="line">  obj.__proto__ = proto;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作为一个对象，子类（B）的原型（<strong>proto</strong>属性）是父类（A）；</strong></p><p><strong>作为一个构造函数，子类（B）的原型对象（prototype属性）是父类的原型对象（prototype属性）的实例。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object.create(A.prototype);</span><br><span class="line">// 等同于</span><br><span class="line">B.prototype.__proto__ = A.prototype;</span><br></pre></td></tr></table></figure><h4 id="实例的-proto-属性"><a href="#实例的-proto-属性" class="headerlink" title="实例的 proto 属性"></a>实例的 <strong>proto</strong> 属性</h4><blockquote><p>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var p1 = new Point(2, 3);</span><br><span class="line">var p2 = new ColorPoint(2, 3, &apos;red&apos;);</span><br><span class="line"></span><br><span class="line">p2.__proto__ === p1.__proto__ // false</span><br><span class="line">p2.__proto__.__proto__ === p1.__proto__ // true</span><br></pre></td></tr></table></figure><h4 id="类中this指向问题"><a href="#类中this指向问题" class="headerlink" title="类中this指向问题"></a>类中this指向问题</h4><blockquote><p>类的方法内部含有this，默认指向类的实例。但是当类中的实例方法提取出来使用的时候，this指向运行时所在环境。</p></blockquote><p>解决方法（新版react中，在声明绑定方法的时候 三种方式与此相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.printName = <span class="keyword">this</span>.printName.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.printName = <span class="function">(<span class="params">name = <span class="string">'there'</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES5与ES6-实现继承的区别"><a href="#ES5与ES6-实现继承的区别" class="headerlink" title="ES5与ES6 实现继承的区别"></a>ES5与ES6 实现继承的区别</h4><ol><li><p>在ES5中，继承实质上是子类先创建属于自己的this，然后再将父类的方法添加到this（也就是使用Parent.apply(this)的方式</p></li><li><p>而在ES6中，则是先创建父类的实例对象this，然后再用子类的构造函数修改this。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;block
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React创建组件以及组件通信方式</title>
    <link href="https://majunchang.github.io/React%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <id>https://majunchang.github.io/React创建组件以及组件通信方式/</id>
    <published>2018-10-11T14:42:44.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="无状态函数式组件"><a href="#无状态函数式组件" class="headerlink" title="无状态函数式组件"></a>无状态函数式组件</h3><blockquote><p>创建纯展示组件，无法使用State，也无法使用组件的生命周期方法，只负责根据传入的props来展示，不涉及到要state状态的操作，是一个只带有一个render方法的组件类</p></blockquote><p>创建形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NoStatusComp</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(props)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;我是无状态组件&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> NoStatusComp</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>不需要声明类，组件不会被实例化，整体渲染性能得到提升</li><li>不需要显示声明this关键字，也就是说组件不能访问this对象</li><li>不支持’ref’，同时也无法访问生命周期的方法</li></ol><h5 id="无状态组件也是官方比较推荐的一种方式-使得代码结构更加清晰，减少代码冗余，在开发过程中，尽量使用无状态组件。"><a href="#无状态组件也是官方比较推荐的一种方式-使得代码结构更加清晰，减少代码冗余，在开发过程中，尽量使用无状态组件。" class="headerlink" title="无状态组件也是官方比较推荐的一种方式, 使得代码结构更加清晰，减少代码冗余，在开发过程中，尽量使用无状态组件。"></a>无状态组件也是官方比较推荐的一种方式, 使得代码结构更加清晰，减少代码冗余，在开发过程中，尽量使用无状态组件。</h5><h3 id="React-createClass方式创建组件"><a href="#React-createClass方式创建组件" class="headerlink" title="React.createClass方式创建组件"></a>React.createClass方式创建组件</h3><blockquote><p>createClass本质上是一个工厂函数,是ES5的原生的JavaScript来实现的React组件,是是react最初推荐的创建组件的方式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createClassComp = React.createClass(&#123;</span><br><span class="line">  getInitialState () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="string">'React早期创建组件的方式'</span>,</span><br><span class="line">      title: <span class="string">'教师节快乐，感谢生命中出现过的老师，让似水年华没有苍白，教会我们听说读写思'</span>,</span><br><span class="line">      num: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cmd'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)</span><br><span class="line">  &#125;,</span><br><span class="line">  componentWillReceiveProps (nextProps) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'下一次'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(nextProps)</span><br><span class="line">  &#125;,</span><br><span class="line">  add () &#123;</span><br><span class="line">    <span class="keyword">this</span>.num++</span><br><span class="line">  &#125;,</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;title, text&#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;&#123;text&#125;&lt;/</span>span&gt;</span><br><span class="line">        &lt;Button onClick=&#123;<span class="keyword">this</span>.add&#125;&gt; 触发方法 &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createClassComp</span><br></pre></td></tr></table></figure><h6 id="新版的react-是16-4-1的-已经不再支持这种写法了"><a href="#新版的react-是16-4-1的-已经不再支持这种写法了" class="headerlink" title="新版的react  是16.4.1的  已经不再支持这种写法了"></a>新版的react 是16.4.1的 已经不再支持这种写法了</h6><p>特点：</p><ol><li>React.createClass会自绑定函数方法导致不必要的性能开销</li><li>React.createClass的mixins不够自然、直观</li></ol><p>附一篇文章 介绍的比较详细 在此不做赘述了</p><p><a href="https://blog.csdn.net/wbiokr/article/details/73027398?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">关于React.createClass方法与class App extends Component方法的区别</a></p><h3 id="React-Component创建组件"><a href="#React-Component创建组件" class="headerlink" title="React.Component创建组件"></a>React.Component创建组件</h3><blockquote><p>React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，其成员函数不会自动绑定this，需要手动绑定，否则this不能获取当前组件实例对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      data: props.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;我是新版创建组件的方法&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button&gt; 点我回去&lt;/</span>Button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>特点:</p><ol><li>其成员函数不会自动绑定this，需要手动绑定，否则this不能获取当前组件实例对象, 绑定this 有三种方法 比较推荐在构造函数中绑定</li><li>类的constructor需要接收props并且调用super(props)。这是createClass所没有的一点。</li><li>在调用super之后，可以直接设置state。</li></ol><h4 id="react的组件更新"><a href="#react的组件更新" class="headerlink" title="react的组件更新"></a>react的组件更新</h4><ol><li>react的父组件 更新的时候 触发了render方法</li><li>父组件下面的所有子组件都被重新渲染</li><li>可以通过使用immutatble的这种数据结构 去节省这种渲染（只渲染数据改动的子组件 数据没有改动的 维持原状）</li></ol><p><a href="https://segmentfault.com/a/1190000010676878" target="_blank" rel="noopener">Immutable 常用API简介</a></p><p><a href="https://github.com/camsong/blog/issues/3" target="_blank" rel="noopener">Immutable 详解及 React 中实践</a></p><h2 id="react组件的通信方式"><a href="#react组件的通信方式" class="headerlink" title="react组件的通信方式"></a>react组件的通信方式</h2><h4 id="父组件传递给子组件"><a href="#父组件传递给子组件" class="headerlink" title="父组件传递给子组件"></a>父组件传递给子组件</h4><blockquote><p>React数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过props向子组件传递需要的信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import Child from &apos;./Child&apos;;</span><br><span class="line"></span><br><span class="line">class Parent extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child name=&quot;apple&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent;</span><br></pre></td></tr></table></figure><h4 id="子组件传递给父组件"><a href="#子组件传递给父组件" class="headerlink" title="子组件传递给父组件"></a>子组件传递给父组件</h4><blockquote><p>将父组件的方法 通过props传递给子组件 然后子组件调用方法 （也就是调用了父组件的方法 进而发生改变）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line"></span><br><span class="line">class List3 extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        hideConponent: PropTypes.func.isRequired,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                我是字组件</span><br><span class="line">                &lt;button onClick=&#123;this.props.show&#125;&gt;点我 展示&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default List3;</span><br></pre></td></tr></table></figure><h4 id="较深层级的父子组件通信"><a href="#较深层级的父子组件通信" class="headerlink" title="较深层级的父子组件通信"></a>较深层级的父子组件通信</h4><ul><li><p>层层组件传递props （不推荐）</p></li><li><p>使用context</p><blockquote><p>context是一个全局变量,像是一个大容器,在任何地方都可以访问到,我们可以把要通信的信息放在context上,然后在其他组件中可以随意取到;</p></blockquote></li></ul><p>官方说明：</p><p>Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。</p><p>在一个典型的 React 应用中，数据是通过 props 属性由上向下（由父及子）的进行传递的，但这对于某些类型的属性而言是极其繁琐的（例如：地区偏好，UI主题），这是应用程序中许多组件都所需要的。 Context 提供了一种在组件之间共享此类值的方式，而不必通过组件树的每个层级显式地传递 props</p><ul><li>parent.jsx</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./childOneComp'</span></span><br><span class="line"><span class="keyword">import</span> ChildTwoComp <span class="keyword">from</span> <span class="string">'./childTwoComp'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      listArr: [ &#123;</span><br><span class="line">        text: <span class="string">'题目一'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'题目二'</span></span><br><span class="line">      &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 提供一个函数,用来返回相应的context对象</span></span><br><span class="line">  getChildContext () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      color: <span class="string">'red'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 父组件声明自己支持context</span></span><br><span class="line">  <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;listArr&#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Child name=<span class="string">'Sara'</span> /&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          listArr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;ChildTwoComp value=&#123;item.text&#125; key=&#123;index&#125; /&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure><ul><li>child.jsx</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../../utils/event'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildTwoComp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子组件声明自己要使用context</span></span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        value: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">super</span>()</span><br><span class="line">      <span class="keyword">this</span>.state =&#123;</span><br><span class="line">        color:<span class="string">'pink'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'colorChange'</span>, (color) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'接受了方法'</span>);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          color,</span><br><span class="line">        &#125;,()=&gt;&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(color);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.eventEmitter === <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventEmitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;h1 style=&#123;&#123; <span class="attr">background</span>: <span class="keyword">this</span>.state.color &#125;&#125;&gt;<span class="number">1234567</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">               &lt;li style=&#123;&#123; background: this.context.color &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;span&gt;&#123;value&#125;&lt;/</span>span&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">           </span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ChildTwoComp;</span><br></pre></td></tr></table></figure><h4 id="兄弟组件之间通信"><a href="#兄弟组件之间通信" class="headerlink" title="兄弟组件之间通信"></a>兄弟组件之间通信</h4><p>以常用的发布/订阅模式举例,借用Node.js Events模块的浏览器版实现<br>要求组件A的数据 传递给组件B 但是 组件A和组件B 必须要同时渲染的时候 才能使用这种方法（有些类似vue的eventBus的功能，但是没有vue的强大）</p><ul><li>child.js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import emitter from &apos;../../utils/event&apos;</span><br><span class="line">import &#123; Button &#125; from &apos;antd&apos;</span><br><span class="line"></span><br><span class="line">export default class Child extends React.Component &#123;</span><br><span class="line">  constructor (props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.changeColor = this.changeColor.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line">  changeColor () &#123;</span><br><span class="line">    emitter.emit(&apos;colorChange&apos;, &apos;deepskyblue&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    let &#123;name&#125; = this.props</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, &#123;name&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;Button onClick=&#123;this.changeColor&#125;&gt; 11111点我回去&lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.propTypes = &#123;</span><br><span class="line">  name: PropTypes.string.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>event.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter()</span><br></pre></td></tr></table></figure><h3 id="react组件通信的第三方库"><a href="#react组件通信的第三方库" class="headerlink" title="react组件通信的第三方库"></a>react组件通信的第三方库</h3><ol><li><a href="https://www.npmjs.com/package/pubsub-js" target="_blank" rel="noopener">pubsub</a> 类似于发布订阅模式这样</li><li><a href="http://www.redux.org.cn/" target="_blank" rel="noopener">redux</a> （比较推荐）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;无状态函数式组件&quot;&gt;&lt;a href=&quot;#无状态函数式组件&quot; class=&quot;headerlink&quot; title=&quot;无状态函数式组件&quot;&gt;&lt;/a&gt;无状态函数式组件&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;创建纯展示组件，无法使用State，也无法使用组件的生命周期方法，只
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>picker-extend移动端级联选择插件</title>
    <link href="https://majunchang.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E6%8F%92%E4%BB%B6/"/>
    <id>https://majunchang.github.io/移动端级联选择插件/</id>
    <published>2018-09-04T13:23:05.000Z</published>
    <updated>2018-10-24T13:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center">picker-extend.js</h1><p>一款多功能的移动端滚动选择器，支持单选到多选、支持多级级联、提供自定义回调函数、提供update函数二次渲染、重定位函数、兼容pc端拖拽等等..</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>原生js移动端选择控件，不依赖任何库</li><li>可传入普通数组或者json数组</li><li>可根据传入的参数长度，自动渲染出对应的列数，支持单项到多项选择</li><li>自动识别是否级联</li><li>选择成功后，提供自定义回调函数callback() 返回当前选择索引位置、以及选择的数据（数组/json）</li><li>每次手势滑动结束后，也提供一个回调函数transitionEnd() 返回当前选择索引位置、以及选择的数据（数组/json）</li><li>能够在已经实例化控件后，提供update函数再次渲染，可用于异步获取数据或点击交互后需要改变所选数据的场景</li><li>提供重定位函数</li><li>可以回显（第二次进入页面时，可以显示历史选择的位置）</li><li>支持级联内容的扩展 比如 对于三级联动类目增加推荐字段 对三级联动地区 -</li><li>增加推荐字样（特殊化展示）</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><h4 id="方式一-标签引入："><a href="#方式一-标签引入：" class="headerlink" title="方式一 标签引入："></a>方式一 标签引入：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/picker-extend.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/picker-extend.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方式二-npm："><a href="#方式二-npm：" class="headerlink" title="方式二 npm："></a>方式二 npm：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install picker-extend -D</span><br></pre></td></tr></table></figure><p>在你的js文件中import：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PickerExtend <span class="keyword">from</span> <span class="string">'picker-extend'</span></span><br></pre></td></tr></table></figure><p></p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><h4 id="①普通数组格式-非联动"><a href="#①普通数组格式-非联动" class="headerlink" title="①普通数组格式-非联动"></a>①普通数组格式-非联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--页面中别漏了这个trigger--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pickerExtend1 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">    trigger: <span class="string">'#trigger1'</span>,</span></span><br><span class="line"><span class="javascript">    title: <span class="string">'单项选择'</span>,</span></span><br><span class="line"><span class="undefined">    wheels: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">data</span>:[<span class="string">'周日'</span>,<span class="string">'周一'</span>,<span class="string">'周二'</span>,<span class="string">'周三'</span>,<span class="string">'周四'</span>,<span class="string">'周五'</span>,<span class="string">'周六'</span>]&#125;</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="javascript">    position:[<span class="number">2</span>] <span class="comment">//初始化定位</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②json格式-非联动"><a href="#②json格式-非联动" class="headerlink" title="②json格式-非联动"></a>②json格式-非联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pickerExtend2 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">    trigger: <span class="string">'#trigger2'</span>,</span></span><br><span class="line"><span class="javascript">    title: <span class="string">'地区选择'</span>,</span></span><br><span class="line"><span class="undefined">    wheels: [</span></span><br><span class="line"><span class="undefined">                &#123;data:[</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'1'</span>,<span class="attr">value</span>:<span class="string">'附近'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'2'</span>,<span class="attr">value</span>:<span class="string">'上城区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'3'</span>,<span class="attr">value</span>:<span class="string">'下城区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'4'</span>,<span class="attr">value</span>:<span class="string">'江干区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'5'</span>,<span class="attr">value</span>:<span class="string">'拱墅区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'6'</span>,<span class="attr">value</span>:<span class="string">'西湖区'</span>&#125;</span></span><br><span class="line"><span class="undefined">                ]&#125;,</span></span><br><span class="line"><span class="undefined">                &#123;data:[</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'1'</span>,<span class="attr">value</span>:<span class="string">'1000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'2'</span>,<span class="attr">value</span>:<span class="string">'2000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'3'</span>,<span class="attr">value</span>:<span class="string">'3000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'4'</span>,<span class="attr">value</span>:<span class="string">'5000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="string">'5'</span>,<span class="attr">value</span>:<span class="string">'10000米'</span>&#125;</span></span><br><span class="line"><span class="undefined">                ]&#125;</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="javascript">    callback:<span class="function"><span class="keyword">function</span>(<span class="params">indexArr, data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data); <span class="comment">//返回选中的json数据</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h5><p>[图片上传失败…(image-6fbf94-1536046640642)]</p><h4 id="③json格式-联动"><a href="#③json格式-联动" class="headerlink" title="③json格式-联动"></a>③json格式-联动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> pickerExtend3 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">      trigger: <span class="string">'#trigger3'</span>,</span></span><br><span class="line"><span class="javascript">      title: <span class="string">'地区选择-联动'</span>,</span></span><br><span class="line"><span class="undefined">      wheels: [</span></span><br><span class="line"><span class="undefined">                  &#123;data:[</span></span><br><span class="line"><span class="undefined">                      &#123;</span></span><br><span class="line"><span class="javascript">                          id:<span class="string">'1'</span>,</span></span><br><span class="line"><span class="javascript">                          value:<span class="string">'附近'</span>,</span></span><br><span class="line"><span class="undefined">                          childs:[</span></span><br><span class="line"><span class="javascript">                              &#123;<span class="attr">id</span>:<span class="string">'1'</span>,<span class="attr">value</span>:<span class="string">'1000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                              &#123;<span class="attr">id</span>:<span class="string">'2'</span>,<span class="attr">value</span>:<span class="string">'2000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                              &#123;<span class="attr">id</span>:<span class="string">'3'</span>,<span class="attr">value</span>:<span class="string">'3000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                              &#123;<span class="attr">id</span>:<span class="string">'4'</span>,<span class="attr">value</span>:<span class="string">'5000米'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                              &#123;<span class="attr">id</span>:<span class="string">'5'</span>,<span class="attr">value</span>:<span class="string">'10000米'</span>&#125;</span></span><br><span class="line"><span class="undefined">                          ]</span></span><br><span class="line"><span class="undefined">                      &#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">id</span>:<span class="string">'2'</span>,<span class="attr">value</span>:<span class="string">'上城区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">id</span>:<span class="string">'3'</span>,<span class="attr">value</span>:<span class="string">'下城区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">id</span>:<span class="string">'4'</span>,<span class="attr">value</span>:<span class="string">'江干区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">id</span>:<span class="string">'5'</span>,<span class="attr">value</span>:<span class="string">'拱墅区'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">id</span>:<span class="string">'6'</span>,<span class="attr">value</span>:<span class="string">'西湖区'</span>&#125;</span></span><br><span class="line"><span class="undefined">                  ]&#125;</span></span><br><span class="line"><span class="undefined">              ],</span></span><br><span class="line"><span class="undefined">      position:[0,1],</span></span><br><span class="line"><span class="javascript">      callback:<span class="function"><span class="keyword">function</span>(<span class="params">indexArr, data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data); <span class="comment">//返回选中的json数据</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h5><p><img src="http://upload-images.jianshu.io/upload_images/5703029-377d30633bfbc02e.gif?imageMogr2/auto-orient/strip" alt="Image text"></p><h4 id="④在vue-cli中如何使用"><a href="#④在vue-cli中如何使用" class="headerlink" title="④在vue-cli中如何使用"></a>④在vue-cli中如何使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install picker-extend -D</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger4"</span>&gt;</span>单项选择<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PickerExtend <span class="keyword">from</span> <span class="string">'picker-extend'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mobileSelect4 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">                trigger: <span class="string">"#trigger4"</span>,</span></span><br><span class="line"><span class="javascript">                title: <span class="string">"单项选择"</span>,</span></span><br><span class="line"><span class="undefined">                wheels: [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">data</span>: [<span class="string">"周日"</span>,<span class="string">"周一"</span>,<span class="string">"周二"</span>,<span class="string">"周三"</span>,<span class="string">"周四"</span>,<span class="string">"周五"</span>,<span class="string">"周六"</span>]&#125;</span></span><br><span class="line"><span class="undefined">                ],</span></span><br><span class="line"><span class="javascript">                callback:<span class="function"><span class="keyword">function</span>(<span class="params">indexArr, data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤数据字段名映射"><a href="#⑤数据字段名映射" class="headerlink" title="⑤数据字段名映射"></a>⑤数据字段名映射</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//假如你的数据的字段名为id,title,children</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//与mobileSelect的id,value,childs字段名不匹配</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//可以用keyMap属性进行字段名映射</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mobileSelect5 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">        trigger: <span class="string">'#trigger5'</span>,</span></span><br><span class="line"><span class="javascript">        title: <span class="string">'数据字段名映射'</span>,</span></span><br><span class="line"><span class="undefined">        wheels: [</span></span><br><span class="line"><span class="undefined">                    &#123;data:[</span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="javascript">                            id:<span class="string">'1'</span>,</span></span><br><span class="line"><span class="javascript">                            title:<span class="string">'A'</span>,</span></span><br><span class="line"><span class="undefined">                            children:[</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'A1'</span>,<span class="attr">title</span>:<span class="string">'A-a'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'A2'</span>,<span class="attr">title</span>:<span class="string">'A-b'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'A3'</span>,<span class="attr">title</span>:<span class="string">'A-c'</span>&#125;</span></span><br><span class="line"><span class="undefined">                            ]</span></span><br><span class="line"><span class="undefined">                        &#125;,</span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="javascript">                            id:<span class="string">'1'</span>,</span></span><br><span class="line"><span class="javascript">                            title:<span class="string">'B'</span>,</span></span><br><span class="line"><span class="undefined">                            children:[</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'B1'</span>,<span class="attr">title</span>:<span class="string">'B-a'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'B2'</span>,<span class="attr">title</span>:<span class="string">'B-b'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'B3'</span>,<span class="attr">title</span>:<span class="string">'B-c'</span>&#125;</span></span><br><span class="line"><span class="undefined">                            ]</span></span><br><span class="line"><span class="undefined">                        &#125;,</span></span><br><span class="line"><span class="undefined">                    ]&#125;</span></span><br><span class="line"><span class="undefined">                ],</span></span><br><span class="line"><span class="undefined">        keyMap: &#123;</span></span><br><span class="line"><span class="javascript">            id:<span class="string">'id'</span>,</span></span><br><span class="line"><span class="javascript">            value: <span class="string">'title'</span>,</span></span><br><span class="line"><span class="javascript">            childs :<span class="string">'children'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        callback:<span class="function"><span class="keyword">function</span>(<span class="params">indexArr, data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>选项</th><th>默认值</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>trigger</td><td>必填参数 无默认值</td><td>String</td><td>触发对象的id/class/tag</td></tr><tr><td>wheels</td><td>必填参数 无默认值</td><td>Array</td><td>数据源,需要显示的数据</td></tr><tr><td>flexibleHeight</td><td>选填参数</td><td>String</td><td>渲染完之后每个数据的所在li标签的高度 默认值为40 用户可自定义传入数字 改变高度</td></tr><tr><td>callback</td><td>function(indexArr, data){}</td><td>function</td><td>选择成功后触发的回调函数，返回indexArr、data</td></tr><tr><td>transitionEnd</td><td>function(indexArr, data){}</td><td>function</td><td>每一次手势滑动结束后触发的回调函数,返回indexArr、data</td></tr><tr><td>cancel</td><td>function(indexArr, data){}</td><td>function</td><td>返回的是indexArr和data是上一次点击确认按钮时的值</td></tr><tr><td>onShow</td><td>function(e){}</td><td>function</td><td>显示控件后触发的回调函数, 返回参数为对象本身</td></tr><tr><td>onHide</td><td>function(e){}</td><td>function</td><td>隐藏控件后触发的回调函数, 返回参数为对象本身</td></tr><tr><td>title</td><td><code>&#39;&#39;</code></td><td>String</td><td>控件标题</td></tr><tr><td>position</td><td>[0,0,0,…]</td><td>Array</td><td>初始化定位</td></tr><tr><td>connector</td><td><code>&#39; &#39;</code></td><td>String</td><td>多个轮子时，多个值中间的连接符，默认是空格</td></tr><tr><td>ensureBtnText</td><td><code>&#39;确认&#39;</code></td><td>String</td><td>确认按钮的文本内容</td></tr><tr><td>cancelBtnText</td><td><code>&#39;取消&#39;</code></td><td>String</td><td>取消按钮的文本内容</td></tr><tr><td>ensureBtnColor</td><td><code>&#39;#1e83d3&#39;</code></td><td>String</td><td>确认按钮的文本颜色</td></tr><tr><td>cancelBtnColor</td><td><code>&#39;#666666&#39;</code></td><td>String</td><td>取消按钮的文本颜色</td></tr><tr><td>titleColor</td><td><code>&#39;#000000&#39;</code></td><td>String</td><td>控件标题的文本颜色</td></tr><tr><td>titleBgColor</td><td><code>&#39;#ffffff&#39;</code></td><td>String</td><td>控件标题的背景颜色</td></tr><tr><td>textColor</td><td><code>&#39;#000000&#39;</code></td><td>String</td><td>轮子内文本的颜色</td></tr><tr><td>bgColor</td><td><code>&#39;#ffffff&#39;</code></td><td>String</td><td>轮子背景颜色</td></tr><tr><td>maskOpacity</td><td><code>0.7</code></td><td>Number</td><td>遮罩透明度</td></tr><tr><td>keyMap</td><td><code>{id:&#39;id&#39;, value:&#39;value&#39;, childs:&#39;childs&#39;,&#39;recommend&#39;:&#39;recommend&#39;</code>}</td><td>Object</td><td>字段名映射，适用于字段名不匹配id,value,childs的数据格式,recommend字段为true时 代表当前item 为推荐内容 展示推荐字段</td></tr><tr><td>triggerDisplayData</td><td><code>true</code></td><td>Boolean</td><td>在点击确认时，trigger的innerHtml是否变为选择的数据。<br>（如果trigger里面还有其他元素，则可以设置为false；如果需要在别的地方显示数据，则可用callback返回的数据自行拼接）</td></tr></tbody></table><h4 id="注：回调函数中返回的参数含义如下"><a href="#注：回调函数中返回的参数含义如下" class="headerlink" title="注：回调函数中返回的参数含义如下"></a>注：回调函数中返回的参数含义如下</h4><ul><li>indexArr是当前选中的索引数组 如[0,0,1] 代表有三个轮子 选中的数据是第一个轮子的第0个数据、第二个轮子的第0个数据、第三个轮子的第1个数据</li><li>data是当前选中的json数据 如[{id:’1’,value:’hello’},{id:’2’,value:’world’}]</li></ul><h2 id="功能函数："><a href="#功能函数：" class="headerlink" title="功能函数："></a>功能函数：</h2><table><thead><tr><th>函数名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>show()</td><td>无参</td><td>手动显示弹窗组件</td></tr><tr><td>hide()</td><td>无参</td><td>手动隐藏弹窗组件</td></tr><tr><td>setTitle()</td><td>string</td><td>设置控件的标题</td></tr><tr><td>locatePosition()</td><td>sliderIndex, posIndex</td><td>传入位置数组，重新定位轮子选中的位置</td></tr><tr><td>updateWheel()</td><td>sliderIndex, data</td><td>重新渲染指定的轮子</td></tr><tr><td>updateWheels()</td><td>data</td><td>重新渲染所有轮子(仅限级联数据格式使用)</td></tr><tr><td>getValue()</td><td>无参</td><td>获取组件选择的值</td></tr></tbody></table><h4 id="注：功能函数中需要传递的参数含义如下"><a href="#注：功能函数中需要传递的参数含义如下" class="headerlink" title="注：功能函数中需要传递的参数含义如下"></a>注：功能函数中需要传递的参数含义如下</h4><ul><li>sliderIndex 代表的是要修改的轮子的索引</li><li>posIndex 代表位置索引</li></ul><h4 id="①功能函数demo："><a href="#①功能函数demo：" class="headerlink" title="①功能函数demo："></a>①功能函数demo：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"day"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var mySelect = new PickerExtend(&#123;</span><br><span class="line">    trigger: '#day',</span><br><span class="line">    wheels: [</span><br><span class="line">                &#123;data:['周日','周一','周二','周三','周四','周五','周六']&#125;,</span><br><span class="line">                &#123;data:['08:00','09:00','10:00','11:00','12:00','13:00','14:00']&#125;</span><br><span class="line">            ],</span><br><span class="line">    position:[1,1] //初始化定位 两个轮子都选中在索引1的选项</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//----------------------------------------------</span><br><span class="line">//进行基础的实例化之后，对实例用功能函数操作</span><br><span class="line"></span><br><span class="line">// mySelect.setTitle('啦啦啦(๑•̀ㅁ•́ฅ)');</span><br><span class="line">// 设置控件的标题</span><br><span class="line"></span><br><span class="line">// mySelect.updateWheel(0,['sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']);</span><br><span class="line">// 更新第0个轮子的数据，数据变为英文的星期几</span><br><span class="line"></span><br><span class="line">// mySelect.locatePosition(1,0);</span><br><span class="line">// 重新定位第1个轮子的位置，将第1个轮子的第0个数据改为当前选中。</span><br><span class="line">// (第1个轮子是指右边的轮子，左边的轮子是第0个)</span><br></pre></td></tr></table></figure><p>基础实例 → 功能函数操作后</p><p>[图片上传失败…(image-95d5aa-1536046640642)]<br>[图片上传失败…(image-7379f1-1536046640642)]</p><h4 id="②ajax异步填充数据demo"><a href="#②ajax异步填充数据demo" class="headerlink" title="②ajax异步填充数据demo"></a>②ajax异步填充数据demo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ************ 非级联格式 ************ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mobileSelect6 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">        trigger: <span class="string">'#trigger6'</span>,</span></span><br><span class="line"><span class="javascript">        title: <span class="string">'ajax填充数据-非级联'</span>,</span></span><br><span class="line"><span class="undefined">        wheels: [</span></span><br><span class="line"><span class="undefined">                    &#123;data:[</span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">id</span>:<span class="string">'1'</span>,<span class="attr">value</span>:<span class="string">'请选择地区'</span>&#125;,</span></span><br><span class="line"><span class="undefined">                    ]&#125;,</span></span><br><span class="line"><span class="undefined">                    &#123;data:[</span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">id</span>:<span class="string">'1'</span>,<span class="attr">value</span>:<span class="string">'请选择距离'</span>&#125;,</span></span><br><span class="line"><span class="undefined">                    ]&#125;</span></span><br><span class="line"><span class="undefined">                ],</span></span><br><span class="line"><span class="javascript">        callback:<span class="function"><span class="keyword">function</span>(<span class="params">indexArr, data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="javascript">        url: <span class="string">"xxxx"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//这里假设获取到的res.data.area为：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// [</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'1',value:'附近'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'2',value:'福田区'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'3',value:'罗湖区'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'4',value:'南山区'&#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// ]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//这里假设获取到的res.data.distance为：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// [</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'1',value:'200米'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'2',value:'300米'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#123;id:'3',value:'400米'&#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// ]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            mobileSelect6.updateWheel(<span class="number">0</span>, res.data.area); <span class="comment">//更改第0个轮子</span></span></span><br><span class="line"><span class="javascript">            mobileSelect6.updateWheel(<span class="number">1</span>, res.data.distance); <span class="comment">//更改第1个轮子</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ************ 级联格式 ************ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"trigger7"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mobileSelect7 = <span class="keyword">new</span> PickerExtend(&#123;</span></span><br><span class="line"><span class="javascript">        trigger: <span class="string">'#trigger7'</span>,</span></span><br><span class="line"><span class="javascript">        title: <span class="string">'ajax填充数据-级联'</span>,</span></span><br><span class="line"><span class="undefined">        wheels: [</span></span><br><span class="line"><span class="undefined">                    &#123;data:[</span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="javascript">                            id:<span class="string">'1'</span>,</span></span><br><span class="line"><span class="javascript">                            value:<span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">                            childs:[</span></span><br><span class="line"><span class="javascript">                                &#123;<span class="attr">id</span>:<span class="string">'A1'</span>,<span class="attr">value</span>:<span class="string">''</span>&#125;,</span></span><br><span class="line"><span class="undefined">                            ]</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    ]&#125;</span></span><br><span class="line"><span class="undefined">                ],</span></span><br><span class="line"><span class="javascript">        callback:<span class="function"><span class="keyword">function</span>(<span class="params">indexArr, data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="javascript">        url: <span class="string">"xxxx"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//这里假设获取到的res.data为：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// [&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     id:'1',</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     value:'更新后数据',</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     childs:[</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         &#123;id:'A1',value:'apple'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         &#123;id:'A2',value:'banana'&#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         &#123;id:'A3',value:'orange'&#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     ]</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;]</span></span></span><br><span class="line"><span class="undefined">            mobileSelect7.updateWheels(res.data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何回显选择的位置"><a href="#如何回显选择的位置" class="headerlink" title="如何回显选择的位置"></a>如何回显选择的位置</h3><p>callback回调函数里有一个indexArr参数，它是一个数组，记录着当前选中的位置：<br>把这个数组转化为字符串之后，可以用<input type="hidden">隐藏域或者别的其他方式保存下来，传给后台。<br>下次打开页面时，<br>MobileSelect实例化的时候，读取这个字符串，再转成数组，传给position，完成初始化定位即可。</p><h2 id="增加推荐字段的demo："><a href="#增加推荐字段的demo：" class="headerlink" title="增加推荐字段的demo："></a>增加推荐字段的demo：</h2><blockquote><p>传入的keymap中 有一个recommend字样 通过设置为true或者false 来显示这个推荐字段 （用户可自定义修改源码 进行扩展）</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5703029-d181d04e3a64ee66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="适应平板的样式"><a href="#适应平板的样式" class="headerlink" title="适应平板的样式"></a>适应平板的样式</h2><blockquote><p>通过改变配置项中flexibleHeight（用户自定义传入),字体大小可由用户根据css进行设置 以达到通用性和个性化的配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var mobileSelect = this.mobileSelect = new PickerExtend(&#123;</span><br><span class="line">      trigger: &apos;#trigger&apos;,</span><br><span class="line">      title: &apos;类目选择&apos;,</span><br><span class="line">      wheels: [</span><br><span class="line">        &#123;data: CITY_DATA&#125;</span><br><span class="line">      ],</span><br><span class="line">      keyMap: &#123;</span><br><span class="line">        id: &apos;cat_id&apos;,</span><br><span class="line">        value: &apos;cat_name&apos;,</span><br><span class="line">        childs: &apos;detail&apos;,</span><br><span class="line">        recommend: &apos;recommend&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      //  初始化为000   如果是编辑商品的情况 我们可以通过api去设置</span><br><span class="line">      // position: [0, 0, 0],</span><br><span class="line">      flexibleHeight: &apos;80&apos;,</span><br><span class="line">      callback: function (indexArr, data) &#123;</span><br><span class="line">        console.log(&apos;选择成功之后的回调函数&apos;)</span><br><span class="line">        console.log(indexArr)</span><br><span class="line">        console.log(data) // 返回选中的json数据</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h6 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h6><p><img src="http://upload-images.jianshu.io/upload_images/5703029-32a501b37c58720e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h4 id="2018-08-02【更新】"><a href="#2018-08-02【更新】" class="headerlink" title="2018-08-02【更新】"></a>2018-08-02【更新】</h4><ul><li>修复移动端点击出现蓝色高亮的情况</li><li>修复之前限定类型的自适应 支持用户自定义高度 字体样式通过css设置</li><li>修复对于部分用户来说 滑动速度较慢的问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 align=&quot;center&quot;&gt;picker-extend.js&lt;/h1&gt;&lt;p&gt;一款多功能的移动端滚动选择器，支持单选到多选、支持多级级联、提供自定义回调函数、提供update函数二次渲染、重定位函数、兼容pc端拖拽等等..&lt;/p&gt;&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="js" scheme="https://majunchang.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://majunchang.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端构造桌面级应用（QQ音乐）</title>
    <link href="https://majunchang.github.io/%E5%89%8D%E7%AB%AF%E6%9E%84%E9%80%A0%E6%A1%8C%E9%9D%A2%E7%BA%A7%E5%BA%94%E7%94%A8%EF%BC%88QQ%E9%9F%B3%E4%B9%90%EF%BC%89/"/>
    <id>https://majunchang.github.io/前端构造桌面级应用（QQ音乐）/</id>
    <published>2018-08-21T14:40:46.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端构造桌面级音乐播放器（nw与electron）"><a href="#前端构造桌面级音乐播放器（nw与electron）" class="headerlink" title="前端构造桌面级音乐播放器（nw与electron）"></a>前端构造桌面级音乐播放器（nw与electron）</h2><blockquote><p>最近研究前端如何构造桌面级应用，看了一下nw和ecectron。于是自己使用vue写了一个pc版本的qq音乐播放器。由于时间太紧，做的功能很有限。但是本片文章主要是介绍nw与electron这两个工具。前端的代码已经开源，感兴趣的同学可以自己下载下来，添加一些比较有趣的功能以及进行代码的优化</p></blockquote><h3 id="项目预览图"><a href="#项目预览图" class="headerlink" title="项目预览图"></a>项目预览图</h3><blockquote><p>分为首页、歌手列表页、歌手详情页、排行榜。排行榜详情页以及播放器页面，排行榜与歌手页基本一致 不做赘述</p></blockquote><h5 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h5><p><img src="http://upload-images.jianshu.io/upload_images/5703029-99547b55666dfc7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="歌手列表页"><a href="#歌手列表页" class="headerlink" title="歌手列表页"></a>歌手列表页</h5><p><img src="http://upload-images.jianshu.io/upload_images/5703029-38b2beae4c70e4ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="歌手详情页"><a href="#歌手详情页" class="headerlink" title="歌手详情页"></a>歌手详情页</h5><p><img src="http://upload-images.jianshu.io/upload_images/5703029-a5921eff3ffd1f1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="歌手搜索功能"><a href="#歌手搜索功能" class="headerlink" title="歌手搜索功能"></a>歌手搜索功能</h5><p><img src="http://upload-images.jianshu.io/upload_images/5703029-93b6159b75e5c90c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="播放器页面"><a href="#播放器页面" class="headerlink" title="播放器页面"></a>播放器页面</h5><p><img src="http://upload-images.jianshu.io/upload_images/5703029-d7a7ab979de65394.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li><h4 id="前端-vue、vue-router、webpack"><a href="#前端-vue、vue-router、webpack" class="headerlink" title="前端    vue、vue-router、webpack"></a>前端 vue、vue-router、webpack</h4></li><li><h4 id="后端（代理）-node-express做代理"><a href="#后端（代理）-node-express做代理" class="headerlink" title="后端（代理） node+express做代理"></a>后端（代理） node+express做代理</h4></li><li><h4 id="接口转发-jsonp-axios"><a href="#接口转发-jsonp-axios" class="headerlink" title="接口转发   jsonp axios"></a>接口转发 jsonp axios</h4></li><li><h4 id="打包工具-electron-electron-packager"><a href="#打包工具-electron-electron-packager" class="headerlink" title="打包工具   electron  electron-packager"></a>打包工具 electron electron-packager</h4></li></ul><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><h4 id="1-数据获取部分"><a href="#1-数据获取部分" class="headerlink" title="1. 数据获取部分"></a>1. 数据获取部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据主要是获取QQ音乐的接口，有得接口jsonp的方式 就可以获取到数据 有得接口需要使用Node做一下代理 来解决跨域</span><br></pre></td></tr></table></figure><h4 id="2-代理转发"><a href="#2-代理转发" class="headerlink" title="2.   代理转发"></a>2. 代理转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在开发阶段，我们可以使用vue中的dev模块中的proxyTable进行路径的重写和代理的转发</span><br><span class="line">在build的时候 我们可以手动配置 访问路径  或者使用express做一下配置 类似于我们将代码 放入nginx服务器中那样</span><br></pre></td></tr></table></figure><h4 id="3-项目注意事项"><a href="#3-项目注意事项" class="headerlink" title="3.   项目注意事项"></a>3. 项目注意事项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们需要在node启动的服务器里面（也就是本地服务器中）解决跨域问题</span><br><span class="line">使用nw的时候需要解决不能播放音频的问题</span><br><span class="line">index.html以及静态资源的这些路径问题</span><br></pre></td></tr></table></figure><h4 id="4-项目优化点"><a href="#4-项目优化点" class="headerlink" title="4.   项目优化点"></a>4. 项目优化点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">项目的css部分可以优化 优化为less，sass 或者cssmodule这样</span><br><span class="line">项目的组件可以抽离一下 目前排行榜详情页以及歌手详情页基本上的逻辑是一样的 可以进行抽使用组件化 也可以使用 slot</span><br><span class="line">项目中 还可以新增很多功能 比如说播放mv  下载歌曲 以及添加我喜欢的音乐等</span><br></pre></td></tr></table></figure><h4 id="NodeJs-Express的代理"><a href="#NodeJs-Express的代理" class="headerlink" title="NodeJs+Express的代理"></a>NodeJs+Express的代理</h4><blockquote><p>A 使用express 去访问打包完成之后的dist目录的静态资源</p><p>B 为了解决 当dist文件拖入nw打开 或者 直接打开dist目录的index.html 以及使用electron打包之后 的接口访问跨域问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123;join&#125; <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  挂载静态路径</span></span><br><span class="line"><span class="comment">//  A</span></span><br><span class="line">app.use(express.static(join(__dirname, <span class="string">'../../dist'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  B</span></span><br><span class="line">router.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// res.header('Access-Control-Allow-Origin', '*')</span></span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type,Content-Length, Authorization, Accept,X-Requested-With'</span>)</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT,POST,GET,DELETE,OPTIONS'</span>)</span><br><span class="line">  res.header(<span class="string">'X-Powered-By'</span>, <span class="string">' 3.2.1'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  做代理的分发和请求  分类歌单</span></span><br><span class="line">router.get(<span class="string">'/getDiscList'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: <span class="string">'https://c.y.qq.com/'</span>,</span><br><span class="line">      host: <span class="string">'c.y.qq.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接口响应成功'</span>)</span><br><span class="line">    res.json(response.data)</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/lyric'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/lyric/fcgi-bin/fcg_query_lyric_new.fcg'</span></span><br><span class="line"></span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: <span class="string">'https://c.y.qq.com/'</span>,</span><br><span class="line">      host: <span class="string">'c.y.qq.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  由于response 是一个jsonp格式的 所以我们要对这个 进行json转化</span></span><br><span class="line">    <span class="keyword">var</span> result = response.data</span><br><span class="line">    <span class="keyword">var</span> regExe = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br><span class="line">    <span class="keyword">var</span> matchArr = result.match(regExe)</span><br><span class="line">    <span class="keyword">if</span> (matchArr) &#123;</span><br><span class="line">      res.json(<span class="built_in">JSON</span>.parse(matchArr[<span class="number">1</span>]))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器已经启动,监听的端口号是3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​</p><h3 id="nw（node-weikit的简介与使用）"><a href="#nw（node-weikit的简介与使用）" class="headerlink" title="nw（node-weikit的简介与使用）"></a>nw（node-weikit的简介与使用）</h3><h4 id="node-webkit的简介"><a href="#node-webkit的简介" class="headerlink" title="node-webkit的简介"></a>node-webkit的简介</h4><blockquote><p>官网需要翻墙 下载需要翻墙 （唉…… 在这里贴一下nw的官网首页和下载截图）</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5703029-ddc24cba50ba9fd1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/5703029-c12c8b3762cdd6b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>Github上nw.js有两万多Star和接近3000的Fork，说明它已经相当成熟。 并且在Github项目的最后面，显示Intel有赞助这个项目，看起来很牛的样子</p></blockquote><ul><li>nw.js也是一个使用前端技术（html、css、JavaScript）来构建pc端程序的一个框架。</li><li>可以兼容windows xp系统</li><li>支持用HTML5, CSS3, JS和WebGL来写应用程序，包括桌面端和移动端；</li><li>完全支持Node.js APIs和所有的第三方模块；</li><li>性能也不会很差，对于轻量级的应用足够了；</li><li>对应用进行打包和发布十分简单，也就是说写一份代码很容易移植到不同的平台（包括主流的Linux, Mac OS X 和 Windows）；</li></ul><h5 id="nw能做什么？"><a href="#nw能做什么？" class="headerlink" title="nw能做什么？"></a>nw能做什么？</h5><blockquote><p>nw.js就是使HTML, CSS, JavaScript写的原本在浏览器上运行的程序，也可以在桌面端运行。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5703029-9e05b9acb9f17a3e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="nw的安装与使用"><a href="#nw的安装与使用" class="headerlink" title="nw的安装与使用"></a>nw的安装与使用</h5><ol><li><p>下载安装包安装（建议大家下载带有开发包的 便于调试）</p><p>官网下载nw.app的压缩包 解压以后即可使用</p></li></ol><blockquote><p>附官网地址: <a href="https://github.com/nwjs/nw.js" target="_blank" rel="noopener">https://github.com/nwjs/nw.js</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">效果图：</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5703029-cf77700655466f1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/5703029-b706fa13b3b218b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ol><li>使用命令行安装 （命令行下载比较慢 所以不是特别建议）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g nw</span><br></pre></td></tr></table></figure><h5 id="nw的打包流程"><a href="#nw的打包流程" class="headerlink" title="nw的打包流程"></a>nw的打包流程</h5><blockquote><p>打包工具 （简单介绍几种 ）</p></blockquote><ul><li>nodebob是node-webkit的构建工具，可以在Windows环境中自动发布node-webkit应用程序。目前在v0.1中，用windows批处理脚本编写。</li><li>nw-builder＆grunt-nw-builder允许您使用grunt为mac，win和linux构建node-webkit应用程序。他们将下载特定版本的预构建二进制文件，解压缩它，创建一个版本文件夹，为指定目录创建app.nw文件，并将app.nw文件复制到它所属的位置</li><li>Nuwk！Nuwk！可以轻松地基于node-webkit创建Mac应用程序，从而简化测试和构建过程。它负责创建可执行文件，附加应用程序图标并相应地配置plist文件。（非常alpha阶段）</li><li>generator-node-webkit是一个yeoman生成器，用于开发node-webkit应用程序并为mac，linux和win创建包。<br>松集成到您的构建过程中，它将为Linux，Windows和OSX下载nwjs 32 / 64bit，并从给定的源目录为所有3个平台构建软件包。</li></ul><blockquote><p>windows下的打包流程<br><a href="https://www.cnblogs.com/tinyphp/p/5052327.html" target="_blank" rel="noopener">https://www.cnblogs.com/tinyphp/p/5052327.html</a></p><p>mac/osx下的打包流程</p></blockquote><p><a href="https://blog.csdn.net/weichuang_1/article/details/48849335" target="_blank" rel="noopener">https://blog.csdn.net/weichuang_1/article/details/48849335</a></p><p><a href="https://blog.csdn.net/baidu_30907803/article/details/78795405" target="_blank" rel="noopener">https://blog.csdn.net/baidu_30907803/article/details/78795405</a></p><h5 id="nw解决不能播放音频问题"><a href="#nw解决不能播放音频问题" class="headerlink" title="nw解决不能播放音频问题"></a>nw解决不能播放音频问题</h5><blockquote><p>MP3编码属于专利编码，非开源授权的，所以在nw.js中默认不支持MP3的播放，需要手动启用才行。</p></blockquote><p>需要从社区中下载<strong>对应版本</strong>的libffmpeg.dll文件 然后将原来的替换一下即可解决</p><p>社区地址: <a href="https://github.com/iteufel/nwjs-ffmpeg-prebuilt/releases" target="_blank" rel="noopener">https://github.com/iteufel/nwjs-ffmpeg-prebuilt/releases</a></p><p>目标文件地址： /Users/baidu/Desktop/nwjs-sdk-v0.31.1-osx-x64/nwjs.app/Contents/Versions/67.0.3396.79</p><blockquote><p>我把这个软件安装在了桌面上 这是目标地址 大家只要记住后面的就行,Versions后面的数字 代表的nw内嵌的谷歌版本（不一样也没事）</p></blockquote><h5 id="nw的使用以及如何调试"><a href="#nw的使用以及如何调试" class="headerlink" title="nw的使用以及如何调试"></a>nw的使用以及如何调试</h5><blockquote><p>通过快捷键 option+command+i 打开内置谷歌的控制台。如果不能打开 或没反应 有可能是大家下载的版本 不是带开发工具的</p></blockquote><h5 id="nw的应用"><a href="#nw的应用" class="headerlink" title="nw的应用"></a>nw的应用</h5><p>nwjs——你值得拥有！<br>不得不提nw.js开发出的应用已经涵盖了许多领域：</p><ol><li>WhatsApp 经典的聊天应用，还有Messenger；</li><li>Powder Player 种子下载，以及视频播放器；</li><li>Boson Editor 代码编辑器，甚至还有一款Markdown编辑器叫Story-writer；</li><li>Leanote Desktop App 类似Evernote的笔记类应用程序；</li><li>Mongo Management Studio 数据库管理应用。</li></ol><h3 id="electron（简介与使用）"><a href="#electron（简介与使用）" class="headerlink" title="electron（简介与使用）"></a>electron（简介与使用）</h3><blockquote><p>官网地址 （不用翻墙 这一点很棒）</p></blockquote><p><a href="https://electronjs.org/" target="_blank" rel="noopener">https://electronjs.org/</a></p><p><img src="http://upload-images.jianshu.io/upload_images/5703029-ef1b6223649caf21.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>简介</p></blockquote><ul><li>electron 是一个可以让我们使用js创建桌面应用程序的框架，并且可以很简单的实现跨平台，让我们可以更轻松的书写业务逻辑，而不用担心跨平台的问题。</li><li>与nw相比，electron的使用人数更多，文档更加齐全，使用起来也更加方便。</li><li>社区很强大,基本上你遇到的问题 都可以在社区中解决。</li></ul><blockquote><p>官方示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 克隆示例项目的仓库</span><br><span class="line">$ git clone https:<span class="comment">//github.com/electron/electron-quick-start</span></span><br><span class="line"></span><br><span class="line"># 进入这个仓库</span><br><span class="line">$ cd electron-quick-start</span><br><span class="line"></span><br><span class="line"># 安装依赖并运行</span><br><span class="line">$ npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure><blockquote><p>项目截图</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5703029-6928827085362401.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/5703029-14fee0fd94a48630.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>electron的安装与打包工具的安装</p></blockquote><ul><li><p>全局安装electron</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron -g</span><br></pre></td></tr></table></figure></li><li><p>本地安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure></li><li><p>打包工具</p><blockquote><p>这里的打包工具我选择的是electron-packager</p></blockquote><p>在项目中 安装打包工具 然后配置一下命令行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron-packager</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"qq-music"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"A Vue.js project"</span>,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"junchang.ma.ele_waimai &lt;junchang.ma@ele.me&gt;"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --host 0.0.0.0 --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">    <span class="string">"electron_dev"</span>: <span class="string">"electron build/electron.js"</span>,</span><br><span class="line">    <span class="string">"electron_build"</span>: <span class="string">"electron-packager ./dist/ --platform=darwin --arch=x64 --overwrite"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"engines"</span>: &#123;</span><br><span class="line">    <span class="string">"node"</span>: <span class="string">"&gt;= 6.0.0"</span>,</span><br><span class="line">    <span class="string">"npm"</span>: <span class="string">"&gt;= 3.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"&gt; 1%"</span>,</span><br><span class="line">    <span class="string">"last 2 versions"</span>,</span><br><span class="line">    <span class="string">"not ie &lt;= 8"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说一下命令行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">packager<span class="string">": "</span>electron-packager ./app HelloWorld --all --out ./OutApp --version <span class="number">1.4</span><span class="number">.0</span> --overwrite --icon=./app/img/icon/icon.ico<span class="string">"</span></span><br></pre></td></tr></table></figure><p>​</p><ul><li>location of project：项目所在路径</li><li>name of project：打包的项目名字</li><li>platform：确定了你要构建哪个平台的应用（Windows、Mac 还是 Linux） win32=&gt; windows下 darwin=&gt; mac</li><li>architecture：决定了使用 x86 还是 x64 还是两个架构都用</li><li>electron version：electron 的版本</li><li>optional options：可选选项</li></ul><blockquote><p>字段里的 项目名字，version，icon路径要改成自己的；</p></blockquote></li></ul><h3 id="electron的打包（将electron集成在vue中）"><a href="#electron的打包（将electron集成在vue中）" class="headerlink" title="electron的打包（将electron集成在vue中）"></a>electron的打包（将electron集成在vue中）</h3><blockquote><p>命令行配置 参考上面</p></blockquote><h4 id="本地预览模式"><a href="#本地预览模式" class="headerlink" title="本地预览模式"></a>本地预览模式</h4><ul><li><p>在build文件夹下 生成一个electron.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="comment">// import path from 'path'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don't, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> mainWindow</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.loadFile(path.join(__dirname, <span class="string">'../dist/index.html'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Emitted when the window is closed.</span></span><br><span class="line">  mainWindow.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Dereference the window object, usually you would store windows</span></span><br><span class="line">    <span class="comment">// in an array if your app supports multi windows, this is the time</span></span><br><span class="line">    <span class="comment">// when you should delete the corresponding element.</span></span><br><span class="line">    mainWindow = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// On OS X it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// On OS X it's common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app's specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="打包模式"><a href="#打包模式" class="headerlink" title="打包模式"></a>打包模式</h4><ol><li><p>将build目录的下electron.js 复制到dist文件中一份</p></li><li><p>配置一个package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"nw-qqMusic"</span>,  项目名称</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,     版本号</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"electron.js"</span>   项目入口文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录的命令行中 运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build </span><br><span class="line">npm run electron_build</span><br></pre></td></tr></table></figure></li></ol><h3 id="Nw与Electron的对比"><a href="#Nw与Electron的对比" class="headerlink" title="Nw与Electron的对比"></a>Nw与Electron的对比</h3><ol><li>nw.js无论从表面还是本质都更接近 Node.js，nw.js直接继承和使用了node.js的启动、开发、运行方式，对node.js的修改最小，而 electron的改动很大，增加了很多自己的东西，使用起来感觉与node.js差别明显。nw.js是和node.js一样是单进程的，electron改成了双进程，技术实现改变。</li><li>electron的优点：开源的核心扩展比较容易，界面定制性强，原则上只要是Web能做的他都能做。是目前最廉价的跨平台技术方案，相对其他跨平台方案（如 QT GTK+ 等），更稳定，bug少， 毕竟只要浏览器外壳跑起来了，里面的问题不会太多 。</li><li>electron的缺点：<ul><li>卡，启动慢，这可能是webkit的锅。毕竟一个浏览器要支持的功能确实有点多。</li><li>除了主进程 你可能还需要启动一些辅助进程来完成工作。而每当你新开一个进程，起步价就是一个nodejs的内存开销！</li><li>丢帧，这个最严重，可我已习惯了native 的丝滑. mac下感觉还可以 win下有点够呛。</li><li>打出来的包太大。（很显然，即便是一个空包，也至少包含了一个浏览器的体积</li></ul></li><li>NW.js对库的整合更深，某种意义上说，对chromium和Node有更深入的理解（新功能要用，必须把源码拿来build进去）。</li><li>从license上来看，Electron是Github的，NW.js则是Intel。</li><li>nw 在mac上只能构建mac的应用 ，windows下只能构建windows的。而electron 可以通过命令行构建不同环境下的 linux mac和windows等</li></ol><h3 id="资料文档"><a href="#资料文档" class="headerlink" title="资料文档"></a>资料文档</h3><blockquote><p>qq音乐接口获取方式的相关文档</p></blockquote><p><a href="https://blog.csdn.net/xiayiye5/article/details/79487560" target="_blank" rel="noopener">https://blog.csdn.net/xiayiye5/article/details/79487560</a><br><a href="https://blog.csdn.net/hhzzcc_/article/details/79769386" target="_blank" rel="noopener">https://blog.csdn.net/hhzzcc_/article/details/79769386</a><br><a href="https://segmentfault.com/a/1190000007685830" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007685830</a></p><blockquote><p>nw相关资料</p></blockquote><ul><li><a href="https://github.com/nwjs/nw.js" target="_blank" rel="noopener">https://github.com/nwjs/nw.js</a></li><li><a href="https://blog.csdn.net/tsyccnh/article/details/54782835" target="_blank" rel="noopener">https://blog.csdn.net/tsyccnh/article/details/54782835</a></li></ul><blockquote><p>electron的相关资料</p></blockquote><p><a href="https://electronjs.org/docs/tutorial/first-app" target="_blank" rel="noopener">打造你的第一个electron应用</a></p><p><a href="https://github.com/electron/electron" target="_blank" rel="noopener">github地址</a></p><p><a href="https://www.jianshu.com/p/1c2ad78df208" target="_blank" rel="noopener">常用打包工具</a></p><p><a href="https://www.jianshu.com/p/57d910008612" target="_blank" rel="noopener">Electron: 从零开始写一个记事本app</a></p><p><a href="https://segmentfault.com/a/1190000013924153" target="_blank" rel="noopener">electron打包：electron-packager及electron-builder两种方式实现（for Windows）</a></p><p><a href="https://newsn.net/say/electron-packager-command.html" target="_blank" rel="noopener">electron-packager命令常用参数大全</a></p><h3 id="探索与思考"><a href="#探索与思考" class="headerlink" title="探索与思考"></a>探索与思考</h3><ol><li>​ 实现让div的高度也自适应的方式 和宽度始终成一个比例，能有几种实现方法？</li><li>如果我们买一个自己的服务器 发布一些软件 部署后端代码，这样能赚钱嘛？（比如 我之前说的小型商户管理系统？）</li></ol><h3 id="项目地址与启动方式"><a href="#项目地址与启动方式" class="headerlink" title="项目地址与启动方式"></a>项目地址与启动方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">克隆项目地址  </span><br><span class="line">git clone https:<span class="comment">//github.com/majunchang/QQ-music.git</span></span><br><span class="line">安装依赖 </span><br><span class="line">npm i  </span><br><span class="line">cd  nodeServer</span><br><span class="line">npm i</span><br><span class="line">启动Node代理 在nodeServer文件夹下</span><br><span class="line">npm run dev </span><br><span class="line">本地预览 （项目的根目录下）</span><br><span class="line">npm  run dev  </span><br><span class="line"></span><br><span class="line">本地electron预览</span><br><span class="line">npm  run electron_dev</span><br><span class="line"></span><br><span class="line">打包编译</span><br><span class="line"></span><br><span class="line">npm run build </span><br><span class="line">npm run electron_build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端构造桌面级音乐播放器（nw与electron）&quot;&gt;&lt;a href=&quot;#前端构造桌面级音乐播放器（nw与electron）&quot; class=&quot;headerlink&quot; title=&quot;前端构造桌面级音乐播放器（nw与electron）&quot;&gt;&lt;/a&gt;前端构造桌面级音乐播放
      
    
    </summary>
    
      <category term="vue" scheme="https://majunchang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://majunchang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>miniredux的实现与源码解析</title>
    <link href="https://majunchang.github.io/miniredux%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://majunchang.github.io/miniredux的实现与源码解析/</id>
    <published>2018-07-16T13:07:06.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍redux的react-redux的原理</p></blockquote><h2 id="redux原理"><a href="#redux原理" class="headerlink" title="redux原理"></a>redux原理</h2><h4 id="github地址：https-github-com-majunchang-miniRedux"><a href="#github地址：https-github-com-majunchang-miniRedux" class="headerlink" title="github地址：https://github.com/majunchang/miniRedux"></a>github地址：<a href="https://github.com/majunchang/miniRedux" target="_blank" rel="noopener">https://github.com/majunchang/miniRedux</a></h4><p><a href="http://oneg19f80.bkt.clouddn.com/18-3-13/85170717.jpg" target="_blank" rel="noopener">总体流程图！！！</a></p><h3 id="原生react的调用和常用方法"><a href="#原生react的调用和常用方法" class="headerlink" title="原生react的调用和常用方法"></a>原生react的调用和常用方法</h3><h2 id="react流程图展示"><a href="#react流程图展示" class="headerlink" title="react流程图展示"></a>react流程图展示</h2><p><img src="http://upload-images.jianshu.io/upload_images/5703029-6be4383ffed83c34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>redux中有一个reducer函数和action 通过dispatch(action)来触发reducer的对应的case</li><li>提供一个createStore方法 传入reducer 返回的对象中包含getState和subscribe和dispatch方法</li></ul><h4 id="调用示例："><a href="#调用示例：" class="headerlink" title="调用示例："></a>调用示例：</h4><blockquote><p>redux 原生版的调用 getState()获取状态 subscribe()进行监听 dispatch()触发相应的action 改变state</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'./woniuRedux/woniuRedux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是reducer处理函数，参数是状态和新的action</span></span><br><span class="line"><span class="keyword">export</span>  <span class="function"><span class="keyword">function</span> <span class="title">counter</span> (<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// let state = state||0</span></span><br><span class="line">  <span class="built_in">console</span>.log(action)</span><br><span class="line">  <span class="built_in">console</span>.log(state)</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'加苹果'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'吃苹果'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br><span class="line"><span class="comment">// console.log</span></span><br><span class="line"><span class="keyword">const</span> init = store.getState()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`一开始有<span class="subst">$&#123;init&#125;</span>个苹果`</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> current = store.getState()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`现在有<span class="subst">$&#123;current&#125;</span>个苹果`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅，每次state修改，都会执行listener</span></span><br><span class="line">store.subscribe(listener)</span><br><span class="line"><span class="comment">// 提交状态变更的申请</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'加苹果'</span> &#125;)</span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'加苹果'</span> &#125;)</span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'加苹果'</span> &#125;)</span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'吃苹果'</span> &#125;)</span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'吃苹果'</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="redux实现原理（源码解析）（简易版）"><a href="#redux实现原理（源码解析）（简易版）" class="headerlink" title="redux实现原理（源码解析）（简易版）"></a>redux实现原理（源码解析）（简易版）</h2><blockquote><p>主要介绍createStore applyMiddleware和bindActionCreators</p></blockquote><h4 id="caeateStore-源码解读"><a href="#caeateStore-源码解读" class="headerlink" title="caeateStore 源码解读"></a>caeateStore 源码解读</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params">reducer, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (enhancer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'enhancer'</span>, enhancer)      ①</span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  return applymiddleware(thunk)(createStore)(reducer)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> currentState = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> currentListeners = []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span> (<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    currentListeners.push(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">action</span>) </span>&#123;</span><br><span class="line">    currentState = reducer(currentState, action)</span><br><span class="line">    currentListeners.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      v()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  初次调用的时候 首先执行一次 dispatch</span></span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>: <span class="string">'@@redux/firstTime'</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;getState, subscribe, dispatch&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>createStore 内部是一个观察者模式， subscribe 添加注册函数 dispatch让函数自调用</li><li>首次调用createStore的时候 内部会执行一次dispatch 将reducer绑定进来</li><li>enhancer 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enhancer ƒ (createStore) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _console, _console2;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> _len2 = <span class="built_in">arguments</span>.length, args = <span class="built_in">Array</span>(_len2), _key2 = <span class="number">0</span>; _key2 &lt; _len2; _key2++) &#123;</span><br><span class="line">        args[_key2] = argum…</span><br></pre></td></tr></table></figure><blockquote><p>普及一下高阶函数</p><p><strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶组件 思想</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我喜欢react'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WrapperHello</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'before hello'</span>);</span><br><span class="line">        fn()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'after hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = WrapperHello(hello);</span><br><span class="line">hello()</span><br><span class="line"></span><br><span class="line"> 属性代理</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;h2&gt;高阶组件的参数组件&lt;/h2&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapperHello</span>(<span class="params">Comp</span>) </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WrapComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (&lt;div&gt;</span><br><span class="line">                &lt;p&gt;这是hoc高阶组件特有的元素&lt;/p&gt;</span><br><span class="line">                &lt;Comp  &#123;...this.props&#125;&gt;&lt;/Comp&gt;</span><br><span class="line">            &lt;/div&gt;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WrapComp</span><br><span class="line">&#125;</span><br><span class="line"> 反向继承</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapperHello</span>(<span class="params">Comp</span>) </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WrapComp</span> <span class="keyword">extends</span> <span class="title">Comp</span></span>&#123;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'高阶组件新增的生命周期，加载完成'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;Comp&gt;&lt;/Comp&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WrapComp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello = wrapperHello(Hello);</span><br></pre></td></tr></table></figure><h2 id="applyMiddleware源码解读"><a href="#applyMiddleware源码解读" class="headerlink" title="applyMiddleware源码解读"></a>applyMiddleware源码解读</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  中间件机制</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span> (<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">    <span class="comment">//  这里的...args指的是解耦之后的renducer   在这里 指的就是counter </span></span><br><span class="line">    <span class="built_in">console</span>.log(...args)  </span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line">    <span class="keyword">let</span> midApi = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  单个中间件的情况</span></span><br><span class="line">    <span class="comment">// dispatch = middleware(midApi)(store.dispatch)</span></span><br><span class="line">    <span class="comment">// dispatch = middware(midApi)(stroe.dispatch)(action)</span></span><br><span class="line">    <span class="comment">// 多个中间件的情况</span></span><br><span class="line">    <span class="built_in">console</span>.log(store) <span class="comment">//  =&gt;  store 就是一个对象  里面包含dispatch getState和subscribe等方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middles'</span>, middlewares)</span><br><span class="line">    <span class="keyword">let</span> middlewareChain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(midApi))</span><br><span class="line">       <span class="comment">//  返回的这个dispatch  就执行过了所有的中间件  带有了中间件的功能</span></span><br><span class="line">    dispatch = compose(...middlewareChain)(store.dispatch)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compose函数源码"><a href="#compose函数源码" class="headerlink" title="compose函数源码"></a>compose函数源码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">...fns</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">args</span> =&gt;</span> args</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fns.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fns[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return fns.reduce((ret, item) =&gt; (...args) =&gt; ret(item(...args)))</span></span><br><span class="line">  <span class="keyword">return</span> fns.reduce(<span class="function">(<span class="params">ret, item</span>) =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当有多个参数的时候'</span>)</span><br><span class="line">    <span class="comment">//  ...args ==&gt;&gt; store.dispatch的这个方法  item和ret指代不同的中间件</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //假设 </span></span><br><span class="line"><span class="comment">    middleChain = [a,b,c]</span></span><br><span class="line"><span class="comment">    dispatch = compose(...middlewareChain)(store.dispatch) = compose(a,b,c)(store.dispatch)</span></span><br><span class="line"><span class="comment">    // 那么这个函数在compose中 就被拆解为</span></span><br><span class="line"><span class="comment">    dispatch = compose(a(b(c)))(store.dispatch)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> ret(item(...args))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结合中间件的源码来看 我们这里以thunk举例</p></blockquote><ul><li>thunk中最开始接受的参数 {dispatch getState} 是从midApi中传来的</li></ul><ul><li>next 指代store.dispatch action就是action</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thunk = <span class="function">(<span class="params">&#123;dispatch, getState&#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">//  如上面所示</span></span><br><span class="line">    <span class="keyword">return</span> action(dispatch, getState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  默认情况下</span></span><br><span class="line">  <span class="keyword">return</span> next(action)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk</span><br></pre></td></tr></table></figure><h2 id="bindActionCreators-源码解读"><a href="#bindActionCreators-源码解读" class="headerlink" title="bindActionCreators 源码解读"></a>bindActionCreators 源码解读</h2><blockquote><p>官网用法 ： <a href="http://www.redux.org.cn/docs/api/bindActionCreators.html" target="_blank" rel="noopener">http://www.redux.org.cn/docs/api/bindActionCreators.html</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  工具函数  这个函数的作用是为了让creator函数里面的参数进行透传</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    addGun(参数)</span></span><br><span class="line"><span class="comment">    dispatch(addGun(参数))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span> (<span class="params">creator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(creator(...args))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  bindActionCreators</span></span><br><span class="line"><span class="comment">//   &#123;addGun, removeGun, addGunAsync&#125;  就是形式参数 creators</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span> (<span class="params">creators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bound = &#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(creators).forEach(<span class="function">(<span class="params">fnKey, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> creator = creators[fnKey]</span><br><span class="line">    bound[fnKey] = bindActionCreator(creator, dispatch)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> bound</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    还可以采用另外一种写法</span></span><br><span class="line"><span class="comment">     return Object.keys(creators).reduce((ret,item)=&gt;&#123;</span></span><br><span class="line"><span class="comment">       ret[item] = bindActionCreator(creators[item],dispatch)</span></span><br><span class="line"><span class="comment">        return ret</span></span><br><span class="line"><span class="comment">    &#125;,&#123;&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mini-react-redux的实现原理和源码解读"><a href="#mini-react-redux的实现原理和源码解读" class="headerlink" title=" mini-react-redux的实现原理和源码解读"></a><a href="https://www.jianshu.com/p/40c55d666daf" target="_blank" rel="noopener"> mini-react-redux的实现原理和源码解读</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本文主要介绍redux的react-redux的原理&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;redux原理&quot;&gt;&lt;a href=&quot;#redux原理&quot; class=&quot;headerlink&quot; title=&quot;redux原理&quot;&gt;&lt;/a&gt;redux原理
      
    
    </summary>
    
      <category term="React" scheme="https://majunchang.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://majunchang.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react-redux常用api详解</title>
    <link href="https://majunchang.github.io/redux%E5%B8%B8%E7%94%A8api%E8%AF%A6%E8%A7%A3/"/>
    <id>https://majunchang.github.io/redux常用api详解/</id>
    <published>2018-07-09T15:10:55.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="createStore-reducer-preloadedState-enhancer"><a href="#createStore-reducer-preloadedState-enhancer" class="headerlink" title="createStore(reducer, [preloadedState], enhancer)"></a>createStore(reducer, [preloadedState], enhancer)</h3><blockquote><p>创建一个 Redux store 来以存放应用中所有的 state。<br>应用中应有且仅有一个 store。</p></blockquote><p><strong>参数：</strong></p><ol><li><p>reducer (Function): 接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树。</p></li><li><p>[preloadedState] (any): 初始时的 state。 在同构应用中，你可以决定是否把服务端传来的 state 水合（hydrate）后传给它，或者从之前保存的用户会话中恢复一个传给它。如果你使用 combineReducers 创建 reducer，它必须是一个普通对象，与传入的 keys 保持同样的结构。否则，你可以自由传入任何 reducer 可理解的内容。</p></li><li><p>enhancer (Function): Store enhancer 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。</p></li></ol><p><strong>返回值</strong><br>保存了应用中所有state的对象，改变state的唯一方法是dispatch action。 你也可以subscribe监听state的变化 然后更新ui</p><h3 id="createStore的简易版源码"><a href="#createStore的简易版源码" class="headerlink" title="createStore的简易版源码"></a>createStore的简易版源码</h3><blockquote><p>enhancer是一个高阶函数 运行结果表明 enhancer之后代码 直接进入applymiddleware</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(counter, applyMiddleware(thunk, arrThunk))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params">reducer, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (enhancer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'enhancer'</span>, enhancer)</span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  return applymiddleware(thunk)(createStore)(reducer)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> currentState = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> currentListeners = []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span> (<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    currentListeners.push(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">action</span>) </span>&#123;</span><br><span class="line">    currentState = reducer(currentState, action)</span><br><span class="line">    currentListeners.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      v()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  初次调用的时候 首先执行一次 dispatch</span></span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>: <span class="string">'@@redux/firstTime'</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;getState, subscribe, dispatch&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><blockquote><p>Store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action。</p><p>Store 不是类。它只是有几个方法的对象。 要创建它，只需要把根部的 reducing 函数 传递给 createStore。</p><p>注意</p></blockquote><p><strong>Store的方法</strong></p><ul><li><strong>getState()</strong> 返回应用当前的state树</li><li><strong>dispatch(action)</strong> 分发action 这是触发state变化的唯一途径</li><li><strong>subscribe(listener)</strong> 添加一个变化监听器 每当dispatch(action)的时候 就会执行 state 树中的一部分可能已经变化。你可以在回调函数里调用 getState() 来拿到当前 state。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)</span><br><span class="line"><span class="keyword">const</span> store = createStoreWithMiddleware(rootReducer)</span><br><span class="line"></span><br><span class="line">sagaMiddleware.run(rootSaga)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = <span class="function"><span class="params">type</span> =&gt;</span> store.dispatch(&#123; type &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Counter</span><br><span class="line">      value=&#123;store.getState()&#125;</span><br><span class="line">      onIncrement=&#123;() =&gt; action(<span class="string">'INCREMENT'</span>)&#125;</span><br><span class="line">      onDecrement=&#123;() =&gt; action(<span class="string">'DECREMENT'</span>)&#125;</span><br><span class="line">      onIncrementAsync=&#123;() =&gt; action(<span class="string">'INCREMENT_ASYNC'</span>)&#125; /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure><h3 id="applyMiddleware-…middlewares"><a href="#applyMiddleware-…middlewares" class="headerlink" title="applyMiddleware(…middlewares)"></a>applyMiddleware(…middlewares)</h3><blockquote><p>使用包含自定义功能的 middleware 来扩展 Redux 是一种推荐的方式。Middleware 可以让你包装 store 的 dispatch 方法来达到你想要的目的。同时， middleware 还拥有“可组合”这一关键特性。多个 middleware 可以被组合到一起使用，形成 middleware 链。其中，每个 middleware 都不需要关心链中它前后的 middleware 的任何信息。</p></blockquote><h4 id="redux-thunk-举例"><a href="#redux-thunk-举例" class="headerlink" title="redux-thunk 举例"></a>redux-thunk 举例</h4><blockquote><p>例如，redux-thunk 支持 dispatch function，以此让 action creator 控制反转。被 dispatch 的 function 会接收 dispatch 作为参数，并且可以异步调用它。这类的 function 就称为 thunk。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addIfOdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> currentValue = getState();</span><br><span class="line">        <span class="keyword">if</span> (currentValue % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch(add())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAsy</span>(<span class="params">delay = <span class="number">2000</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(add())</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="applymiddleware-源码解析"><a href="#applymiddleware-源码解析" class="headerlink" title="applymiddleware 源码解析"></a>applymiddleware 源码解析</h4><p>官方源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function applyMiddleware() &#123;</span><br><span class="line">    //1</span><br><span class="line">  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key &lt; _len; _key++) &#123;</span><br><span class="line">    middlewares[_key] = arguments[_key];</span><br><span class="line">  &#125;</span><br><span class="line">  //2</span><br><span class="line">  return function (createStore) &#123;</span><br><span class="line">      //3</span><br><span class="line">    return function (reducer, preloadedState, enhancer) &#123;</span><br><span class="line">      //4</span><br><span class="line">      var store = createStore(reducer, preloadedState, enhancer);</span><br><span class="line">      var _dispatch = store.dispatch;</span><br><span class="line">      var chain = [];</span><br><span class="line">      //5</span><br><span class="line">      var middlewareAPI = &#123;</span><br><span class="line">        getState: store.getState,</span><br><span class="line">        dispatch: function dispatch(action) &#123;</span><br><span class="line">          return _dispatch(action);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      chain = middlewares.map(function (middleware) &#123;</span><br><span class="line">        return middleware(middlewareAPI);</span><br><span class="line">      &#125;);</span><br><span class="line">      //6</span><br><span class="line">      _dispatch = _compose2[&apos;default&apos;].apply(undefined, chain)(store.dispatch);</span><br><span class="line"></span><br><span class="line">      return _extends(&#123;&#125;, store, &#123;</span><br><span class="line">        dispatch: _dispatch</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化版源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (reducer, preloadedState, enhancer) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 生成一个store </span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class="line">    <span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line">    <span class="keyword">let</span> chain = []</span><br><span class="line">    <span class="comment">//简陋版的store，里面包含了`getState`和`dispatch`两个方法。</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将middlewareAPI作为参数注入到每个middleware中去，执行middleware, 返回一个新的链。</span></span><br><span class="line">    <span class="comment">//中间件函数(store)=&gt;next=&gt;action.</span></span><br><span class="line">    <span class="comment">// chain  [next=&gt;action,...];</span></span><br><span class="line">    <span class="comment">//这个 next 其实store.dispatch.   而`action`就是`dispatch`的action</span></span><br><span class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们假设有三个中间件,fn1,fn2,fn3,那么下面代码等同于  dispatch=fn1(fn2(fn3(store.dispatch)));</span></span><br><span class="line">    <span class="comment">//可以发现，中间件所组成的dispatch 其实就是一个执行过fn1,fn2,fn3的函数。</span></span><br><span class="line">    <span class="comment">//所以，每个中间件在遇到不是自己处理范围之内的action的时候，会使用next(action)，将其传递给下一个中间件。</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>搭配一个redux-thunk的源码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thunk = <span class="function">(<span class="params">&#123;dispatch, getState&#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">//  如上面所示</span></span><br><span class="line">    <span class="keyword">return</span> action(dispatch, getState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  默认情况下</span></span><br><span class="line">  <span class="keyword">return</span> next(action)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk</span><br></pre></td></tr></table></figure><h3 id="appliymiddleware的总结"><a href="#appliymiddleware的总结" class="headerlink" title="appliymiddleware的总结"></a>appliymiddleware的总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createStore(reducer,initState,applyMiddleware(ThunkMiddleware));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createStore(reducer,applyMiddleware(ThunkMiddleware));</span><br></pre></td></tr></table></figure><p>这两种设置中间件的方式是一致的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const store = applyMiddleware(...middlewares)(createStore)(reducer, initialState)。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(reducer, initialState, applyMiddleware(...middlewares))</span><br></pre></td></tr></table></figure><h3 id="compose的作用"><a href="#compose的作用" class="headerlink" title="compose的作用"></a>compose的作用</h3><blockquote><p>从右到左来组合多个函数。<br>这是函数式编程中的方法，为了方便，被放到了 Redux 里。<br>当需要把多个 store 增强器 依次执行的时候，需要用到它。</p></blockquote><p>附示例代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(reducers, compose(</span><br><span class="line">  applyMiddleware(thunk),</span><br><span class="line">  <span class="built_in">window</span>.devToolsExtension ? <span class="built_in">window</span>.devToolsExtension() : <span class="function"><span class="params">f</span> =&gt;</span> f</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><h3 id="compose的源码解析"><a href="#compose的源码解析" class="headerlink" title="compose的源码解析"></a>compose的源码解析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">...fns</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">args</span> =&gt;</span> args</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fns.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fns[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fns.reduce(<span class="function">(<span class="params">ret, item</span>) =&gt;</span> (...args) =&gt; ret(item(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="附-reduce方法"><a href="#附-reduce方法" class="headerlink" title="附 reduce方法"></a>附 reduce方法</h4><blockquote><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><p>reduce() 可以作为一个高阶函数，用于函数的 compose。</p><p>reduce() 对于空数组是不会执行回调函数的</p></blockquote><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span><br><span class="line">   total 必需。初始值, 或者计算结束后的返回值。</span><br><span class="line">   currentValue  必需。当前元素</span><br><span class="line">   currentIndex  可选。当前元素的索引</span><br><span class="line">   arr 可选。当前元素所属的数组对象。</span><br><span class="line">   initialValue  可选   代表total的初始类型和初始值</span><br></pre></td></tr></table></figure><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"> <span class="keyword">var</span> result = arr.reduce(<span class="function">(<span class="params">sum,val</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> sum+val</span><br><span class="line"> &#125;,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h6 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h6><p>如何知道一串字符串中每个字母出现的次数？<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrString = <span class="string">'abcdaabc'</span>;</span><br><span class="line"></span><br><span class="line">arrString.split(<span class="string">''</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, cur</span>) </span>&#123;</span><br><span class="line">    res[cur] ? res[cur] ++ : res[cur] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;createStore-reducer-preloadedState-enhancer&quot;&gt;&lt;a href=&quot;#createStore-reducer-preloadedState-enhancer&quot; class=&quot;headerlink&quot; title=&quot;create
      
    
    </summary>
    
      <category term="React" scheme="https://majunchang.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://majunchang.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react全家桶 NodeJS MongoDB搭建实时聊天的app</title>
    <link href="https://majunchang.github.io/react%E5%85%A8%E5%AE%B6%E6%A1%B6-NodeJS-MongoDB%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9%E7%9A%84app/"/>
    <id>https://majunchang.github.io/react全家桶-NodeJS-MongoDB搭建实时聊天的app/</id>
    <published>2018-07-09T14:23:40.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>👉 GitHub: <a href="https://github.com/majunchang/reachChatApp" target="_blank" rel="noopener">https://github.com/majunchang/reachChatApp</a></p><h5 id="基于-React-16-x-全家桶制作的一款实时聊天app，采用组件化，模块化的开发方式，用到了-react-redux-等插件，使用-antd-mobile-的ui框架。"><a href="#基于-React-16-x-全家桶制作的一款实时聊天app，采用组件化，模块化的开发方式，用到了-react-redux-等插件，使用-antd-mobile-的ui框架。" class="headerlink" title="基于==React(16.x)== 全家桶制作的一款实时聊天app，采用组件化，模块化的开发方式，用到了==react-redux==等插件，使用==antd-mobile==的ui框架。"></a>基于==React(16.x)== 全家桶制作的一款实时聊天app，采用组件化，模块化的开发方式，用到了==react-redux==等插件，使用==antd-mobile==的ui框架。</h5><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><h5 id="【前端】"><a href="#【前端】" class="headerlink" title="【前端】"></a>【前端】</h5><ul><li>React: 用于搭建用户界面的javascript库，特点是声明式渲染和组件化开发</li><li>Redux: Redux 是 JavaScript 状态容器，提供可预测化的状态管理。让你构建一致化的应用，运行与不同的环境，并且易于测试。</li><li>React-redux: 核心在于provieder，connect和中间件机制。</li><li>React-router:是一个基于 React 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。<h5 id="【后端】"><a href="#【后端】" class="headerlink" title="【后端】"></a>【后端】</h5></li><li>NodeJs:使用 express 构建一个本地 HTTP server 来调试 React 项目</li><li>MongoDB: 存储用户数据和聊天数据的非关系型数据库</li><li>Express: Node的基于 Node.js 平台，快速、开放、极简的 web 开发框架。</li></ul><h5 id="【自动化构建】"><a href="#【自动化构建】" class="headerlink" title="【自动化构建】"></a>【自动化构建】</h5><ul><li>create-react-app: 官网提供的react脚手架工具，快速初始化项目代码</li><li>eslint： 代码风格检查工具，规范代码书写</li></ul><h2 id="技术详解"><a href="#技术详解" class="headerlink" title="技术详解"></a>技术详解</h2><blockquote><p>react中注意的地点</p><h5 id="绑定事件，state和actions的映射，路由包含的switch等"><a href="#绑定事件，state和actions的映射，路由包含的switch等" class="headerlink" title="绑定事件，state和actions的映射，路由包含的switch等"></a>绑定事件，state和actions的映射，路由包含的switch等</h5><h4 id="登录和注册部分（以登录举例）"><a href="#登录和注册部分（以登录举例）" class="headerlink" title="登录和注册部分（以登录举例）"></a>登录和注册部分（以登录举例）</h4><ol><li>首先发送一个接口请求后端，检测是否有用户信息。没有的话 直接跳转到登录页</li><li>登录这里 对输入的用户名和密码做一下校验 然后存储到本地一个用户id</li><li>登录返回成功之后dispatch返回数据 触发reducer 将数据存储到state中<h4 id="主页以及切换部分"><a href="#主页以及切换部分" class="headerlink" title="主页以及切换部分"></a>主页以及切换部分</h4></li><li>头部和底部使用共有部分，中间的内容使用数组中循环渲染不同的Route</li><li>登录成功之后，有了redirect选项，并且我们在Login中，设置了路由的跳转</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">this</span>.props.redirectTo &amp;&amp; <span class="keyword">this</span>.props.redirectTo !== <span class="string">'/login'</span> ?</span><br><span class="line">                    &lt;Redirect to=&#123;<span class="keyword">this</span>.props.redirectTo&#125;&gt;&lt;/Redirect&gt; : <span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>我们在这些子组件中 使用@connect方法, 将redux中的state和action传递进来<h4 id="聊天数据的展示"><a href="#聊天数据的展示" class="headerlink" title="聊天数据的展示"></a>聊天数据的展示</h4></li><li>主要是使用socket.io 实现数据通信原理</li><li>后端使用express+socketio的结合，前端监听端口号9000以后，进行了数据的交互和接收</li><li>我们在每条数据上 加上了其他的一些值 形成一个对象。根据发收方的用户id 进行辨别和数组的循环渲染<h4 id="未读消息的更新"><a href="#未读消息的更新" class="headerlink" title="未读消息的更新"></a>未读消息的更新</h4></li><li>默认每条数据的read字段 都是false，筛选聊天数据的发送对象是正在使用这个软件的用的时候，筛选出来的结果就是未读消息的数量</li><li>socket 使用emit触发 on来接受 当接受到一个消息的时候 未读消息加1</li><li>当我们从聊天页面退出的时候 把这个聊天界面的对方的id发送给后端进行处理 将总体未读消息数量 减去这个id的维度消息数量</li></ol><h4 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-3cedeb9c04dc141d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><p><img src="http://upload-images.jianshu.io/upload_images/5703029-f560598c5e9a441d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><p><img src="http://upload-images.jianshu.io/upload_images/5703029-41ac2d31b767d086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br><img src="http://upload-images.jianshu.io/upload_images/5703029-09e152869d73b18d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br><img src="http://upload-images.jianshu.io/upload_images/5703029-cf00a857ab4ff7b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h5 id="开发版"><a href="#开发版" class="headerlink" title="开发版"></a>开发版</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//  开启mongodb数据库服务</span><br><span class="line">//  将项目地址完整的clone下来 </span><br><span class="line">    git clone https://github.com/majunchang/reachChatApp</span><br><span class="line">//  进入到项目文件夹  安装相关依赖</span><br><span class="line">    cd reatChatApp </span><br><span class="line">    npm install</span><br><span class="line">//  进行本地编译</span><br><span class="line">    npm start</span><br><span class="line">//  进入到server文件夹里面 启动nodejs服务  建议使用nodemon启动</span><br><span class="line">    node（ndoemon） server</span><br></pre></td></tr></table></figure><h5 id="生产版"><a href="#生产版" class="headerlink" title="生产版"></a>生产版</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//  开启mongodb数据库服务</span><br><span class="line">//  将项目地址完整的clone下来 </span><br><span class="line">    git clone https://github.com/majunchang/reachChatApp</span><br><span class="line">//  进入到项目文件夹  安装相关依赖</span><br><span class="line">    cd reatChatApp </span><br><span class="line">    npm install</span><br><span class="line">//  首先将项目进行打包 然后启动打包的端口（server.js)中已经配置</span><br><span class="line">    npm run build</span><br><span class="line">//  完成之后</span><br><span class="line">    npm run server</span><br></pre></td></tr></table></figure><div align="center"><br><img width="300" height="300" src="http://oneg19f80.bkt.clouddn.com/18-3-16/36877665.jpg"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;👉 GitHub: &lt;a href=&quot;https://github.com/majunchang/reachChatApp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/majunchang/reachChatApp
      
    
    </summary>
    
      <category term="React" scheme="https://majunchang.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://majunchang.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>回流和重绘</title>
    <link href="https://majunchang.github.io/%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <id>https://majunchang.github.io/回流和重绘/</id>
    <published>2018-03-05T14:02:51.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="我们要明确页面在文档加载完成之后到完全显示中间的过程是"><a href="#我们要明确页面在文档加载完成之后到完全显示中间的过程是" class="headerlink" title="我们要明确页面在文档加载完成之后到完全显示中间的过程是"></a>我们要明确页面在文档加载完成之后到完全显示中间的过程是</h4><ol><li>根据文档生成DOM树（包括display:none的节点）</li><li>在DOM树基础上根据节点的几何属性（margin/padding/width/height等)生成render树（不包括display:none、head节点但会包含visibility:hidden节点）</li><li>在render树基础上进行进一步渲染包括color,outline等样式</li></ol><h3 id="reflow"><a href="#reflow" class="headerlink" title="reflow:"></a>reflow:</h3><blockquote><p>当render树中的一部分或者全部因为大小边距等问题发生改变而需要重建的过程叫做回流</p><h3 id="repaint"><a href="#repaint" class="headerlink" title="repaint:"></a>repaint:</h3><p>当元素的一部分属性发生变化，如外观背景色不会引起布局变化而需要重新渲染的过程叫做重绘</p></blockquote><h4 id="回流一定会引发重绘-但是-重绘不一定引发回流"><a href="#回流一定会引发重绘-但是-重绘不一定引发回流" class="headerlink" title="回流一定会引发重绘  但是 重绘不一定引发回流"></a>回流一定会引发重绘 但是 重绘不一定引发回流</h4><h3 id="引发回流的情况-："><a href="#引发回流的情况-：" class="headerlink" title="引发回流的情况  ："></a>引发回流的情况 ：</h3><ol><li>首当其冲自然是dom树结构变化，比如你删除或者添加某个node.</li><li>元素几何属性变化，包括margin,padding,height,width,border等</li><li>页面渲染初始化</li><li>获取某些属性。虽然浏览器引擎可能会针对重排做了优化，比如Opera，它会等到有足够 数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了render树的直接变化，当获取一些属性时，浏览器为取得 正确的值也会触发回流。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、 clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。（这段我是直接引用的。。。）</li><li>浏览器窗口发生变化-resize事件发生时</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var s = document.body.style;</span><br><span class="line">s.padding = &quot;2px&quot;; // 回流+重绘</span><br><span class="line">s.border = &quot;1px solid red&quot;; // 再一次 回流+重绘</span><br><span class="line">s.color = &quot;blue&quot;; // 再一次重绘</span><br><span class="line">s.backgroundColor = &quot;#ccc&quot;; // 再一次 重绘</span><br><span class="line">s.fontSize = &quot;14px&quot;; // 再一次 回流+重绘</span><br><span class="line">// 添加node，再一次 回流+重绘</span><br><span class="line">document.body.appendChild(document.createTextNode(&apos;abc!&apos;));</span><br></pre></td></tr></table></figure><blockquote><p>说到这里大家都知道回流比重绘的代价要更高，回流的花销跟render tree有多少节点需要重新构建有关系，假设你直接操作body，比如在body最前面插入1个元素，会导致整个render tree回流，这样代价当然会比较高，但如果是指body后面插入1个元素，则不会影响前面元素的回流。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;我们要明确页面在文档加载完成之后到完全显示中间的过程是&quot;&gt;&lt;a href=&quot;#我们要明确页面在文档加载完成之后到完全显示中间的过程是&quot; class=&quot;headerlink&quot; title=&quot;我们要明确页面在文档加载完成之后到完全显示中间的过程是&quot;&gt;&lt;/a&gt;我们要明确
      
    
    </summary>
    
      <category term="javascript" scheme="https://majunchang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://majunchang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue双向绑定原理</title>
    <link href="https://majunchang.github.io/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <id>https://majunchang.github.io/vue双向绑定原理/</id>
    <published>2018-03-05T13:51:42.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文采用了比较特殊的input和v-model指令 实际上vue的指令解析模板很复杂，本文重点是理解数据更新的思想</p></blockquote><h3 id="几种实现双向绑定的做法"><a href="#几种实现双向绑定的做法" class="headerlink" title="几种实现双向绑定的做法"></a>几种实现双向绑定的做法</h3><p>目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。<br>实现数据绑定的做法有大致如下几种：</p><blockquote><p>发布者-订阅者模式（backbone.js）</p><p>脏值检查（angular.js）</p><p>数据劫持（vue.js）</p></blockquote><h4 id="发布者-订阅者模式"><a href="#发布者-订阅者模式" class="headerlink" title="发布者-订阅者模式:"></a>发布者-订阅者模式:</h4><p>一般通过sub, pub的方式实现数据和视图的绑定监听，更新数据方式通常做法是 vm.set(‘property’, value)，这里有篇文章讲的比较详细，有兴趣可点这里</p><p>这种方式现在毕竟太low了，我们更希望通过 vm.property = value 这种方式更新数据，同时自动更新视图，于是有了下面两种方式</p><h4 id="脏值检查"><a href="#脏值检查" class="headerlink" title="脏值检查:"></a>脏值检查:</h4><p>angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><p>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</p><p>XHR响应事件 ( $http )</p><p>浏览器Location变更事件 ( $location )</p><p>Timer事件( $timeout , $interval )</p><p>执行 $digest() 或 $apply()</p><h4 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持:"></a>数据劫持:</h4><p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><ol><li>实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li>入口函数，整合以上三者</li></ol><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20171222/164830111.png" alt="mark"></p><h4 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj, vm</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//  对传入的对象 遍历 并分别添加 object.defineProperty</span></span><br><span class="line">       <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">           defineReactive(vm, key, obj[key])</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">vm, key, val</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">       <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">           get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="comment">// 通过这一步 添加订阅者</span></span><br><span class="line">               <span class="keyword">if</span> (Dep.target) dep.addSub(Dep.target)</span><br><span class="line">               <span class="keyword">return</span> val;</span><br><span class="line">           &#125;,</span><br><span class="line">           set: <span class="function"><span class="keyword">function</span> (<span class="params">newval</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (newval === val) <span class="keyword">return</span></span><br><span class="line">               val = newval;</span><br><span class="line">               <span class="comment">// 通知订阅者</span></span><br><span class="line">               dep.notify()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 需要实现一个消息订阅器</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">// 消息订阅的让容器是一个数组 数组的每一项 都是指代一个view和mode的中间者</span></span><br><span class="line">       <span class="keyword">this</span>.subs = []</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Dep.prototype = &#123;</span><br><span class="line">       addSub: <span class="function"><span class="keyword">function</span> (<span class="params">sub</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">       &#125;,</span><br><span class="line">       notify: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.subs.forEach(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="comment">// 在这里 需要配合watcher进行更新</span></span><br><span class="line">               sub.update()</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="实现Compile"><a href="#实现Compile" class="headerlink" title="实现Compile"></a>实现Compile</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  在这里增加dom编译模板</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">nodeToFragment</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> flag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">       <span class="keyword">var</span> child;</span><br><span class="line">       <span class="keyword">while</span> (child = node.firstChild) &#123;</span><br><span class="line">           compile(child, vm);</span><br><span class="line">           <span class="comment">// 将子节点劫持到文本节点中</span></span><br><span class="line">           flag.appendChild(child)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> flag</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">       <span class="comment">// 跟据节点类型去判断</span></span><br><span class="line">       <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> attr = node.attributes;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (attr[i].nodeName === <span class="string">'v-model'</span>) &#123;</span><br><span class="line">                   <span class="comment">// 此时 name为text</span></span><br><span class="line">                   <span class="keyword">var</span> name = attr[i].nodeValue;</span><br><span class="line">                   <span class="comment">// 增加数据的变化监听</span></span><br><span class="line">                   node.addEventListener(<span class="string">'input'</span>, (e) =&gt; &#123;</span><br><span class="line">                       vm[name] = e.target.value;</span><br><span class="line">               &#125;)</span><br><span class="line">                   ;</span><br><span class="line">                   <span class="comment">// 在这里 因为 我们的数据监听器 已经封装了vm[name]  触发了 getter方法 完成了数据的初始化</span></span><br><span class="line">                   node.value = vm[name];</span><br><span class="line">                   node.removeAttribute(<span class="string">'v-model'</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">'input'</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (reg.test(node.nodeValue)) &#123;</span><br><span class="line">               <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">               name = name.trim();</span><br><span class="line">               <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">'text'</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="增加watcher-观察函数"><a href="#增加watcher-观察函数" class="headerlink" title="增加watcher 观察函数"></a>增加watcher 观察函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订阅者 搭建数据监听变化和变异模板的桥梁</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, node, name, nodeType</span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.vm = vm;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nodeType = nodeType</span><br><span class="line">        <span class="keyword">this</span>.update()</span><br><span class="line">        Dep.target = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Watcher.prototype = &#123;</span><br><span class="line">        update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.get()</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType === <span class="string">'text'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.node.nodeValue = <span class="keyword">this</span>.value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType === <span class="string">'input'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.node.value = <span class="keyword">this</span>.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="keyword">this</span>.vm[<span class="keyword">this</span>.name];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// 将options里面的data属性 放入数据监听器</span></span><br><span class="line">       <span class="keyword">this</span>.data = options.data;</span><br><span class="line">       <span class="keyword">var</span> data = <span class="keyword">this</span>.data;</span><br><span class="line">       observe(data, <span class="keyword">this</span>); <span class="comment">// this指代vm</span></span><br><span class="line">       <span class="comment">// 对指定id的dom 进行页面的渲染</span></span><br><span class="line">       <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">       <span class="keyword">var</span> id = <span class="keyword">this</span>.$el;</span><br><span class="line">       <span class="keyword">var</span> Dom = nodeToFragment(<span class="built_in">document</span>.getElementById(id), <span class="keyword">this</span>);</span><br><span class="line">       <span class="comment">// 编译完成之后 将dom 添加到节点中</span></span><br><span class="line">       <span class="built_in">document</span>.getElementById(id).appendChild(Dom)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'app'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">           text: <span class="string">'hello world'</span>,</span><br><span class="line">           name: <span class="string">'你好，全世界'</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   vm.data.text = <span class="string">'majunchang'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in">document</span>.getElementsByClassName(<span class="string">'btn'</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       vm.text = <span class="string">'majunchang'</span></span><br><span class="line">       vm.name = <span class="string">'又疑瑶台镜，飞在青云端'</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本文采用了比较特殊的input和v-model指令 实际上vue的指令解析模板很复杂，本文重点是理解数据更新的思想&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;几种实现双向绑定的做法&quot;&gt;&lt;a href=&quot;#几种实现双向绑定的做法&quot; class=&quot;
      
    
    </summary>
    
      <category term="vue" scheme="https://majunchang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://majunchang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="https://majunchang.github.io/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://majunchang.github.io/hexo搭建个人博客/</id>
    <published>2018-03-04T13:33:40.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人总结hexo博客搭建流程以及常用命令"><a href="#个人总结hexo博客搭建流程以及常用命令" class="headerlink" title="个人总结hexo博客搭建流程以及常用命令"></a>个人总结hexo博客搭建流程以及常用命令</h2><a id="more"></a><h3 id="大概流程："><a href="#大概流程：" class="headerlink" title="大概流程："></a>大概流程：</h3><ul><li>搭建 Node.js 环境</li><li>搭建 Git 环境</li><li>GitHub 注册和配置</li><li>安装配置 Hexo</li><li>关联 Hexo 与 GitHub Pages</li><li>GitHub Pages 地址解析到个人域名</li><li>Hexo 的常用操作</li></ul><h3 id="搭建-Node-js-环境"><a href="#搭建-Node-js-环境" class="headerlink" title="搭建 Node.js 环境"></a>搭建 Node.js 环境</h3><blockquote><p>为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的</p></blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p><p>在 Node.js 官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> 下载安装包 v6.10.3 LTS</p><p>保持默认设置即可，一路Next，安装很快就结束了。</p><p>然后打开命令提示符，输入 node -v、npm -v，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！<br><img src="http://upload-images.jianshu.io/upload_images/5703029-f130f03d84a4a404..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h3 id="搭建-Git-环境"><a href="#搭建-Git-环境" class="headerlink" title="搭建 Git 环境"></a>搭建 Git 环境</h3><blockquote><p>为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。</p></blockquote><p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>在 Git 官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> 下载安装包 Git-2.13.0-64-bit.exe</p><p>桌面右键，打开 Git Bush Here，输入 git –version，出现版本号则说明 Git 环境配置成功，第二步完成！！！</p><p><img src="http://upload-images.jianshu.io/upload_images/5703029-ef4a28df576283e4..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br>GitHub 注册和配置<br>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p><h3 id="Github注册：https-github-com"><a href="#Github注册：https-github-com" class="headerlink" title="Github注册：https://github.com/"></a>Github注册：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></h3><p>创建仓库：Repository name 使用自己的用户名，仓库名规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yourname/yourname.github.io</span><br></pre></td></tr></table></figure><p>到此搭建 Hexo博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作</p><h3 id="安装配置-Hexo"><a href="#安装配置-Hexo" class="headerlink" title="安装配置 Hexo"></a>安装配置 Hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a><br><img src="http://upload-images.jianshu.io/upload_images/5703029-9985bc5f5b697711..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="使用-npm-安装-Hexo：在命令行中输入"><a href="#使用-npm-安装-Hexo：在命令行中输入" class="headerlink" title="使用 npm 安装 Hexo：在命令行中输入"></a>使用 npm 安装 Hexo：在命令行中输入</h4><p>1<br>npm install hexo-cli -g<br>然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。<br><img src="http://upload-images.jianshu.io/upload_images/5703029-b9039915983f4996..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><p>查看Hexo的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo init majunchang.github.io</span><br><span class="line">cd majunchang.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy         #需要部署的文件</span><br><span class="line">├── node_modules    #Hexo插件</span><br><span class="line">├── public          #生成的静态网页文件</span><br><span class="line">├── scaffolds       #模板</span><br><span class="line">├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">| ├── _drafts       #草稿</span><br><span class="line">| └── _posts        #文章</span><br><span class="line">├── themes          #主题</span><br><span class="line">├── _config.yml     #全局配置文件</span><br><span class="line">└── package.json    #npm 依赖等</span><br></pre></td></tr></table></figure><h4 id="运行本地-Hexo-服务"><a href="#运行本地-Hexo-服务" class="headerlink" title="运行本地 Hexo 服务"></a>运行本地 Hexo 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或者</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>您的网站会在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 下启动。如果 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。<br><img src="http://upload-images.jianshu.io/upload_images/5703029-60d264211b26e4fb..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h5 id="注意1：执行hexo-server提示找不到该指令"><a href="#注意1：执行hexo-server提示找不到该指令" class="headerlink" title="注意1：执行hexo server提示找不到该指令"></a>注意1：执行hexo server提示找不到该指令</h5><p>解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line">或者</span><br><span class="line">npm install hexo -server --save</span><br></pre></td></tr></table></figure><h4 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h4><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;majunchang&quot;</span><br><span class="line">git config --global user.email &quot;2471978285@qq.com&quot;</span><br></pre></td></tr></table></figure><h4 id="配置-Deployment"><a href="#配置-Deployment" class="headerlink" title="配置 Deployment"></a>配置 Deployment</h4><p>在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：</p><p>需要注意的是：冒号后面记得空一格！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//  https 后面跟的是 git的用户名的密码 截止到@符号之前 所以密码中 不要包含@符号 否则会报错</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://majunchang:*****@github.com/majunchang/majunchang.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>本地文件提交到 GitHub Pages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 删除旧的 public 文件</span><br><span class="line">hexo clean</span><br><span class="line">// 生成新的 public 文件</span><br><span class="line">hexo generate</span><br><span class="line">或者</span><br><span class="line">hexo g</span><br><span class="line">// 开始部署</span><br><span class="line">hexo deploye</span><br><span class="line">或者</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="Hexo-的常用操作"><a href="#Hexo-的常用操作" class="headerlink" title="Hexo 的常用操作"></a>Hexo 的常用操作</h3><h4 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br><span class="line">D:\GitHub\Hexo\test&gt;hexo new &quot;文章标题&quot;</span><br><span class="line">INFO  Created: D:\GitHub\Hexo\test\source\_posts\文章标题.md</span><br></pre></td></tr></table></figure><p>在本地博客文件夹 source_posts 文件夹下看到我们新建的 markdown 文件。</p><p>当然，我们也可以手动添加Markdown文件在source-&gt;_deploy文件夹下，其效果同样可以媲美hexo new</p><p>文章编辑好之后，运行生成、部署命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>当然你也可以执行下面的命令，相当于上面两条命令的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h4 id="文章如何添加多个标签"><a href="#文章如何添加多个标签" class="headerlink" title="文章如何添加多个标签"></a>文章如何添加多个标签</h4><p>有两种多标签格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tags: [a, b, c]</span><br><span class="line">或</span><br><span class="line">tags:</span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">  - c</span><br></pre></td></tr></table></figure><!--more--><h4 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h4><p>官方主题库：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>Hexo主题非常，推荐使用 Next 为主题，请阅读 Next 的官方文档（ <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a> ），5 分钟快速安装。</p><p>再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。</p><h4 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h4><p>添加 sitemap 和 feed 插件</p><p>切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install hexo-generator-feed -save</span><br><span class="line">npm install hexo-generator-sitemap -save</span><br></pre></td></tr></table></figure><p>修改 _config.yml，增加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">Plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">#sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure><p>再执行以下命令，部署服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>配完之后，就可以访问 <a href="https://majunchang.github.io/">https://majunchang.github.io/</a> ，发现这两个文件已经成功生成了。</p><p>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人总结hexo博客搭建流程以及常用命令&quot;&gt;&lt;a href=&quot;#个人总结hexo博客搭建流程以及常用命令&quot; class=&quot;headerlink&quot; title=&quot;个人总结hexo博客搭建流程以及常用命令&quot;&gt;&lt;/a&gt;个人总结hexo博客搭建流程以及常用命令&lt;/h2&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://majunchang.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://majunchang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue总结</title>
    <link href="https://majunchang.github.io/vue%E6%80%BB%E7%BB%93/"/>
    <id>https://majunchang.github.io/vue总结/</id>
    <published>2018-03-04T13:31:58.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue使用总结心得"><a href="#vue使用总结心得" class="headerlink" title="vue使用总结心得"></a>vue使用总结心得</h2><h3 id="vue的安装"><a href="#vue的安装" class="headerlink" title="vue的安装"></a>vue的安装</h3><h6 id="在这里我们主要针对的是vue的单页面项目-如果仅仅是为了单个案例可以直接下载-然后script安装"><a href="#在这里我们主要针对的是vue的单页面项目-如果仅仅是为了单个案例可以直接下载-然后script安装" class="headerlink" title="在这里我们主要针对的是vue的单页面项目 如果仅仅是为了单个案例可以直接下载 然后script安装"></a>在这里我们主要针对的是vue的单页面项目 如果仅仅是为了单个案例可以直接下载 然后script安装</h6><blockquote><p>Vue 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 安装依赖，走你</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h3 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h3><h4 id="vue的生命周期图示"><a href="#vue的生命周期图示" class="headerlink" title="vue的生命周期图示"></a>vue的生命周期图示</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-2053cda58f31f3e9..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>beforeCreate</td><td>实例刚刚被创建 el和data并未初始化</td></tr><tr><td>created</td><td>实例创建完成 data被初始化 但是el没有被初始化 dom不存在</td></tr><tr><td>beforeMount</td><td>完成了el的初始化 模板编译之前</td></tr><tr><td>mounted</td><td>模板编译之后 完成挂载</td></tr><tr><td>beforeUpdate</td><td>组件更新之前</td></tr><tr><td>uodated</td><td>组件更新之后</td></tr><tr><td>beforeDestory</td><td>组件销毁前调用</td></tr><tr><td>destoryed</td><td>组件销毁后调用</td></tr></tbody></table><h3 id="vue的核心思想（数据绑定和组件化）"><a href="#vue的核心思想（数据绑定和组件化）" class="headerlink" title="vue的核心思想（数据绑定和组件化）"></a>vue的核心思想（数据绑定和组件化）</h3><ul><li>==vue的双向数据绑定==</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"text"</span>&gt;</span><br><span class="line">    &#123;&#123; text &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span>*</span><br><span class="line">      <span class="number">1</span> 数据监听器 首先有一个数据监听的函数 目的是 监听数据的变化 拿到最新值 并通知订阅者</span><br><span class="line">      <span class="number">2</span> 指令解析器 有一个编译的函数 对元素的节点进行扫描和解析 并绑定相关的更新函数</span><br><span class="line">      <span class="number">3</span> watcher 作为连接observe和compile的敲了</span><br><span class="line">      <span class="number">3</span> 订阅者 这个订阅者 负责与watcher 配合收到属性变动的通知，执行相应的回调函数 完成视图的更新     *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    function observe(obj, vm) &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/  对传入的对象 遍历 并分别添加 object.defineProperty</span></span><br><span class="line"><span class="regexp">        Object.keys(obj).forEach((key) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            defineReactive(vm, key, obj[key])</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function defineReactive(vm, key, val) &#123;</span></span><br><span class="line"><span class="regexp">        var dep = new Dep();</span></span><br><span class="line"><span class="regexp">        Object.defineProperty(vm, key, &#123;</span></span><br><span class="line"><span class="regexp">            get: function () &#123;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 通过这一步 添加订阅者</span></span><br><span class="line"><span class="regexp">                if (Dep.target) dep.addSub(Dep.target)</span></span><br><span class="line"><span class="regexp">                return val;</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            set: function (newval) &#123;</span></span><br><span class="line"><span class="regexp">                if (newval === val) return</span></span><br><span class="line"><span class="regexp">                val = newval;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 通知订阅者</span></span><br><span class="line"><span class="regexp">                dep.notify()</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 需要实现一个消息订阅器</span></span><br><span class="line"><span class="regexp">    function Dep() &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 消息订阅的让容器是一个数组 数组的每一项 都是指代一个view和mode的中间者</span></span><br><span class="line"><span class="regexp">        this.subs = []</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    Dep.prototype = &#123;</span></span><br><span class="line"><span class="regexp">        addSub: function (sub) &#123;</span></span><br><span class="line"><span class="regexp">            this.subs.push(sub)</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        notify: function () &#123;</span></span><br><span class="line"><span class="regexp">            this.subs.forEach((sub) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 在这里 需要配合watcher进行更新</span></span><br><span class="line"><span class="regexp">                sub.update()</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/  在这里增加dom编译模板</span></span><br><span class="line"><span class="regexp">    function nodeToFragment(node, vm) &#123;</span></span><br><span class="line"><span class="regexp">        var flag = document.createDocumentFragment();</span></span><br><span class="line"><span class="regexp">        var child;</span></span><br><span class="line"><span class="regexp">        while (child = node.firstChild) &#123;</span></span><br><span class="line"><span class="regexp">            compile(child, vm);</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 将子节点劫持到文本节点中</span></span><br><span class="line"><span class="regexp">            flag.appendChild(child)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return flag</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function compile(node, vm) &#123;</span></span><br><span class="line"><span class="regexp">        var reg = /</span>\&#123;\&#123;(.*)\&#125;\&#125;/;</span><br><span class="line">        <span class="comment">// 跟据节点类型去判断</span></span><br><span class="line">        <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> attr = node.attributes;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (attr[i].nodeName === <span class="string">'v-model'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 此时 name为text</span></span><br><span class="line">                    <span class="keyword">var</span> name = attr[i].nodeValue;</span><br><span class="line">                    <span class="comment">// 增加数据的变化监听</span></span><br><span class="line">                    node.addEventListener(<span class="string">'input'</span>, (e) =&gt; &#123;</span><br><span class="line">                        vm[name] = e.target.value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 在这里 因为 我们的数据监听器 已经封装了vm[name]  触发了 getter方法 完成了数据的初始化</span></span><br><span class="line">                    node.value = vm[name];</span><br><span class="line">                    node.removeAttribute(<span class="string">'v-model'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">'input'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (reg.test(node.nodeValue)) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">                name = name.trim();</span><br><span class="line">                <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">'text'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅者 搭建数据监听变化和变异模板的桥梁</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, node, name, nodeType</span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.vm = vm;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nodeType = nodeType</span><br><span class="line">        <span class="keyword">this</span>.update()</span><br><span class="line">        Dep.target = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Watcher.prototype = &#123;</span><br><span class="line">        update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.get()</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType === <span class="string">'text'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.node.nodeValue = <span class="keyword">this</span>.value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType === <span class="string">'input'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.node.value = <span class="keyword">this</span>.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="keyword">this</span>.vm[<span class="keyword">this</span>.name];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将options里面的data属性 放入数据监听器</span></span><br><span class="line">        <span class="keyword">this</span>.data = options.data;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">this</span>.data;</span><br><span class="line">        observe(data, <span class="keyword">this</span>); <span class="comment">// this指代vm</span></span><br><span class="line">        <span class="comment">// 对指定id的dom 进行页面的渲染</span></span><br><span class="line">        <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">        <span class="keyword">var</span> id = <span class="keyword">this</span>.$el;</span><br><span class="line">        <span class="keyword">var</span> Dom = nodeToFragment(<span class="built_in">document</span>.getElementById(id), <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 编译完成之后 将dom 添加到节点中</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).appendChild(Dom)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            text: <span class="string">'hello,world'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    vm.text = <span class="string">'ma'</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/5703029-69cf49b5bc385b2d..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><ul><li>组件化思想</li></ul><ol><li><p>将实现页面的某一部分功能的结构，样式和逻辑封装为一个整体，使其高内聚，低耦合，达到分治和复用的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了提高代码复用性，减少重复性的开发，我们就把相关的代码按照 template、style、script 拆分，封装成一个个的组件。组件可以扩展</span><br></pre></td></tr></table></figure><p>HTML 元素，封装可重用的 HTML 代码，我们可以将组件看作自定义的 HTML 元素。在 Vue 里面，每个封装好的组件可以看成一个个的 ViewModel。</p></li><li><p>组件的执行顺序</p></li></ol><ul><li>子组件先在父组件中的 components 中进行注册。</li><li>父组件利用 Vue.component 注册到全局。</li><li>当渲染父组件的时候，渲染到<child-component>，会把子组件也渲染出来。</child-component></li></ul><h3 id="vue的路由分发（vue-router）"><a href="#vue的路由分发（vue-router）" class="headerlink" title="vue的路由分发（vue-router）"></a>vue的路由分发（vue-router）</h3><blockquote><h4 id="vue的路由分发主要是使用vue-router-本质来说-使用了哈希路径和浏览器的history（html5新增api）"><a href="#vue的路由分发主要是使用vue-router-本质来说-使用了哈希路径和浏览器的history（html5新增api）" class="headerlink" title="vue的路由分发主要是使用vue-router 本质来说 使用了哈希路径和浏览器的history（html5新增api）"></a>vue的路由分发主要是使用vue-router 本质来说 使用了哈希路径和浏览器的history（html5新增api）</h4></blockquote><h4 id="vue-router的安装和项目中的配置"><a href="#vue-router的安装和项目中的配置" class="headerlink" title="vue-router的安装和项目中的配置"></a>vue-router的安装和项目中的配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh-cn/installation.html" target="_blank" rel="noopener">vue-router的官网</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  在main.js中这样配置  </span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123;App&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  在router文件夹下的index.js中 这样配置  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> dashboard <span class="keyword">from</span> <span class="string">'../pages/dashboard/dashboard.vue'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'../pages/index.vue'</span>;</span><br><span class="line"><span class="comment">//系统设置页面</span></span><br><span class="line"><span class="keyword">import</span> systemSetting <span class="keyword">from</span> <span class="string">'../components/systemSetting/systemSetting.vue'</span></span><br><span class="line"><span class="comment">// 引入登录页</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'../pages/auth/login/login.vue'</span></span><br><span class="line"><span class="comment">//引入注册页</span></span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">'../pages/auth/register/register.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      component: superTubeLogin,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/register'</span>,</span><br><span class="line">      name: <span class="string">'register'</span>,</span><br><span class="line">      component: register</span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      component: index,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/dashboard'</span>,</span><br><span class="line">          name: <span class="string">'dashboard'</span>,</span><br><span class="line">          component: dashboard,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//系统设置的页面</span></span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/systemSetting'</span>,</span><br><span class="line">          name: <span class="string">'systemSetting'</span>,</span><br><span class="line">          component: systemSetting,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//工作组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权用户管理</span></span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/boxUserManageAllow'</span>,</span><br><span class="line">          name: <span class="string">'boxUserManageAllow'</span>,</span><br><span class="line">          component: boxUserManageAllow</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      component: notFoundComponent</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里写的逻辑 任何路由跳转之前都会执行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="我们可以使用vue-router做那些事"><a href="#我们可以使用vue-router做那些事" class="headerlink" title="我们可以使用vue-router做那些事"></a>我们可以使用vue-router做那些事</h4><ol><li><p>配置路由分发</p></li><li><p>设置路由重定向</p><ul><li>典型的应用场景有 做登录前的禁止跳转</li><li>在用户访问不存在的页面的时候 跳转到自定义的404页面</li></ul></li><li><p>在组件中进行路由的跳转</p></li><li><p>进行组件之间的传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      path: <span class="string">'/user/:userId'</span>,</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中 应该这样写 router-link 在渲染时 会被转化为a标签</span></span><br><span class="line">&lt;router-link :to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 在vue的生命周期 或者 methods中 应该这样写  </span></span><br><span class="line"><span class="regexp">router.push(&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 关于如何使用query进行传递参数  这里给出了一个示例</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ http:/</span><span class="regexp">/blog.csdn.net/</span>k491022087/article/details/<span class="number">70214664</span></span><br></pre></td></tr></table></figure><blockquote><p>向路由组件传递props</p><p><a href="https://router.vuejs.org/zh-cn/essentials/passing-props.html" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/essentials/passing-props.html</a></p></blockquote></li><li><p>根据路由元信息 设置组件的初始化或者区别组件</p></li><li><p>设置过渡的动态效果</p></li><li><p>路由信息对象</p><p><a href="https://router.vuejs.org/zh-cn/api/route-object.html" target="_blank" rel="noopener">https://router.vuejs.org/zh-cn/api/route-object.html</a></p></li></ol><h4 id="vue-router的使用注意事项"><a href="#vue-router的使用注意事项" class="headerlink" title="vue-router的使用注意事项"></a>vue-router的使用注意事项</h4><ul><li><p>在组件中跳转的时候 和 获取路由元信息的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  组件中跳转</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">          name: page,</span><br><span class="line">          params: &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">type</span>: page, <span class="attr">content</span>: item.content, <span class="attr">template</span>: item.template&#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//  获取路由元信息 </span></span><br><span class="line"><span class="keyword">this</span>.$route.params.apiId</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>监听路由变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wacth:&#123;</span><br><span class="line">  <span class="string">'$route'</span>(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">       .....</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="vue的复杂存储（vuex）"><a href="#vue的复杂存储（vuex）" class="headerlink" title="vue的复杂存储（vuex）"></a>vue的复杂存储（vuex）</h3><h3 id="vue通信"><a href="#vue通信" class="headerlink" title="vue通信"></a>vue通信</h3><h3 id="项目中遇到的比较通用的问题（易错点）"><a href="#项目中遇到的比较通用的问题（易错点）" class="headerlink" title="项目中遇到的比较通用的问题（易错点）"></a>项目中遇到的比较通用的问题（易错点）</h3><h4 id="1-如何阻止冒泡和事件的默认行为"><a href="#1-如何阻止冒泡和事件的默认行为" class="headerlink" title="1  如何阻止冒泡和事件的默认行为"></a>1 如何阻止冒泡和事件的默认行为</h4><h4 id="2-多层数据的嵌套以及更改vue遍历好的数组之后-如何进行实时显示"><a href="#2-多层数据的嵌套以及更改vue遍历好的数组之后-如何进行实时显示" class="headerlink" title="2  多层数据的嵌套以及更改vue遍历好的数组之后 如何进行实时显示"></a>2 多层数据的嵌套以及更改vue遍历好的数组之后 如何进行实时显示</h4><h4 id="3-如果遇到跨域问题-如何解决"><a href="#3-如果遇到跨域问题-如何解决" class="headerlink" title="3  如果遇到跨域问题 如何解决"></a>3 如果遇到跨域问题 如何解决</h4><h4 id="4-如何减少文件压缩体积"><a href="#4-如何减少文件压缩体积" class="headerlink" title="4 如何减少文件压缩体积"></a>4 如何减少文件压缩体积</h4><h4 id="5-如何进行文件的打包"><a href="#5-如何进行文件的打包" class="headerlink" title="5 如何进行文件的打包"></a>5 如何进行文件的打包</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue使用总结心得&quot;&gt;&lt;a href=&quot;#vue使用总结心得&quot; class=&quot;headerlink&quot; title=&quot;vue使用总结心得&quot;&gt;&lt;/a&gt;vue使用总结心得&lt;/h2&gt;&lt;h3 id=&quot;vue的安装&quot;&gt;&lt;a href=&quot;#vue的安装&quot; class=&quot;head
      
    
    </summary>
    
      <category term="vue" scheme="https://majunchang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://majunchang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>基于数据分析的图书管理系统</title>
    <link href="https://majunchang.github.io/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://majunchang.github.io/基于数据分析的图书管理系统/</id>
    <published>2018-01-13T11:54:21.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于数据分析的图书管理系统-原创-全栈项目"><a href="#基于数据分析的图书管理系统-原创-全栈项目" class="headerlink" title="基于数据分析的图书管理系统(原创-全栈项目)"></a>基于数据分析的图书管理系统(原创-全栈项目)</h1><p>基于<strong>Vue全家桶(2.x)+NodeJs+Express+MongoDB+ES6+iview</strong>制作的图书管理系统，通过该系统来学习当下最流行的大框架和技术，采用前后端分类的开发方式，Vue全家桶（2.x）全部涉及。</p><h2 id="图书馆项目地址-https-github-com-majunchang-node-library"><a href="#图书馆项目地址-https-github-com-majunchang-node-library" class="headerlink" title="图书馆项目地址-https://github.com/majunchang/node-library"></a><a href="https://github.com/majunchang/node-library" target="_blank" rel="noopener">图书馆项目地址-https://github.com/majunchang/node-library</a></h2><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>Vue: 用于构建用户界面的MVVM框架，它的核心是<strong>实时响应的双向数据绑定和组件系统</strong></li><li>vue-router: 为vue提供的路由系统，主要体现在路由的跳转，动效的过渡以及对于路由的限制等</li><li>vuex: Vue的集中状态管理，在多个组件共享某些状态时非常便捷，降低了组件开发传递数据的复杂度</li><li>axios： <strong>基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</strong>，该项目中前端所有请求都是通过axios来实现数据接收和页面渲染。</li><li>ES6：ECMAScript的新一代语法，模块化，解构赋值，Promise，class等方法，使得开发变得更加简单。</li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul><li>Node.js: 整个系统后端通过 Node.js 进行实现，通过 Express 框架实现后端的 REST 接口，并以 json 的形式进行输出，对于普通的post请求和文件上传类的post请求 使用body-parser中间件和formidable插件进行处理。</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>mongoDB: NoSQL数据库，使用mongoose进行数据库的连接和对于数据库的快速建模操作</li></ul><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><li>掌握了在项目中运用Vue全家桶解决各类问题。</li><li>熟悉了vue父子组件之间数据的传递和交互，熟悉了不相关的组件之间如何进行行为的触发和传值</li><li>掌握了如何在vue中 使用相关的ui框架和第三方插件</li><li>熟悉了组件化、模块化的开发思维，体会到了前后端分类开发的好处</li><li>加深了对nodejs和相关模块(path,nodemailer等)的理解和掌握</li><li>掌握了nodejs+mongoose操作数据库的一套完整的增删改查方法，体会到了图形统计的作用。</li></ol><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-c2313aaabe07a1f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="注册页"><a href="#注册页" class="headerlink" title="注册页"></a>注册页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-e63712d3143900c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="忘记密码页"><a href="#忘记密码页" class="headerlink" title="忘记密码页"></a>忘记密码页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-b1e928eec2dac035.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="首页-1"><a href="#首页-1" class="headerlink" title="首页"></a>首页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-96c30091acd84714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="图书总览页"><a href="#图书总览页" class="headerlink" title="图书总览页"></a>图书总览页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-42b383bc477fa00b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="分类总览页"><a href="#分类总览页" class="headerlink" title="分类总览页"></a>分类总览页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-55ac86220e31077a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="添加书籍页"><a href="#添加书籍页" class="headerlink" title="添加书籍页"></a>添加书籍页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-f80c2a427b18a43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="借书列表页"><a href="#借书列表页" class="headerlink" title="借书列表页"></a>借书列表页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-dbaf941d90a8f2f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="数据分析页"><a href="#数据分析页" class="headerlink" title="数据分析页"></a>数据分析页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-e0587f64bd83ff97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br><img src="http://upload-images.jianshu.io/upload_images/5703029-a1609c810cd1757b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p><h4 id="个人信息页"><a href="#个人信息页" class="headerlink" title="个人信息页"></a>个人信息页</h4><p><img src="http://upload-images.jianshu.io/upload_images/5703029-271ab218f761a24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于数据分析的图书管理系统-原创-全栈项目&quot;&gt;&lt;a href=&quot;#基于数据分析的图书管理系统-原创-全栈项目&quot; class=&quot;headerlink&quot; title=&quot;基于数据分析的图书管理系统(原创-全栈项目)&quot;&gt;&lt;/a&gt;基于数据分析的图书管理系统(原创-全栈项目)
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://majunchang.github.io/tags/nodejs/"/>
    
      <category term="mongodb" scheme="https://majunchang.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>cookie和web存储的比较</title>
    <link href="https://majunchang.github.io/cookie%E5%92%8Cweb%E5%AD%98%E5%82%A8%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>https://majunchang.github.io/cookie和web存储的比较/</id>
    <published>2017-12-19T12:11:37.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>cookie非常小，限制在4kb左右，很多浏览器都限制一个站点最多保存20个cookie。</li><li>如果没有设置时间，则表示cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就会消失，这种被称为会话cookie，它会被保存在内存中。</li><li>当设置了过期时间，浏览器会把cookie保存在硬盘中，关闭浏览器之后任然有效，直到超过设定的过期时间。<h3 id="设置和获取cookie的方法"><a href="#设置和获取cookie的方法" class="headerlink" title="设置和获取cookie的方法"></a>设置和获取cookie的方法</h3></li></ol><blockquote><p>原生<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 使用js创建cookie</span><br><span class="line">document.cookie=&quot;username=John Doe&quot;;</span><br><span class="line">// 添加一个过期时间</span><br><span class="line">document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT&quot;;</span><br><span class="line">// 使用path 告诉浏览器cookie的路径</span><br><span class="line">document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//读取</span><br><span class="line">var x = document.cookie;</span><br><span class="line">// 修改  旧的值将会被覆盖</span><br><span class="line">document.cookie=&quot;username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/&quot;;</span><br><span class="line"></span><br><span class="line">// 删除 删除 cookie 非常简单。您只需要设置 expires 参数为以前的时间即可</span><br><span class="line">document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;</span><br></pre></td></tr></table></figure><p></p><p>封装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function setCookie(cname,cvalue,exdays)</span><br><span class="line">&#123;</span><br><span class="line">  var d = new Date();</span><br><span class="line">  d.setTime(d.getTime()+(exdays*24*60*60*1000));</span><br><span class="line">  var expires = &quot;expires=&quot;+d.toGMTString();</span><br><span class="line">  document.cookie = cname + &quot;=&quot; + cvalue + &quot;; &quot; + expires;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCookie(cname)</span><br><span class="line">&#123;</span><br><span class="line">  var name = cname + &quot;=&quot;;</span><br><span class="line">  var ca = document.cookie.split(&apos;;&apos;);</span><br><span class="line">  for(var i=0; i&lt;ca.length; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    var c = ca[i].trim();</span><br><span class="line">    if (c.indexOf(name)==0) return c.substring(name.length,c.length);</span><br><span class="line">  &#125;</span><br><span class="line">  return &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="localStorage和sessionStorage"><a href="#localStorage和sessionStorage" class="headerlink" title="localStorage和sessionStorage"></a>localStorage和sessionStorage</h2><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>扩展了cookie的4k限制，为了更大的容量存储而设计的，是在浏览器端存储的数据</li><li>减少网络流量，快速的读取数据，性能较好，可以作为临时存储</li><li>localStorage是永久性存储，而sessionStorage属于当会话结束的时候，就会被清空</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>本质上是对字符串的读取，内容较多的时候 会消耗内存，导致页面变卡，</li><li>不能被爬虫抓取到</li></ul><h2 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h2><table><thead><tr><th>特性名称</th><th>cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>数据的声明周期</td><td>可设置失效时间，默认是关闭浏览器后失效</td><td>除非被清除，否则永久保存</td><td>仅仅在当前会话下有效，关闭页面或者浏览器后会被清除</td><td></td></tr><tr><td>存放的数据大小</td><td>4k左右</td><td>一般为5M</td><td>一般为5M</td><td></td></tr><tr><td>与服务端通信</td><td>会在http头中携带，如果使用cookie保存过多数据会带来性能问题</td><td>仅在浏览器端保存不参与服务器的通信</td><td>仅在浏览器端保存不参与服务器的通信</td><td></td></tr><tr><td>易用性</td><td>需要自己封装</td><td>有现成的api接口可以使用</td><td>有现成的api接口可以使用</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>windows下配置mongodb</title>
    <link href="https://majunchang.github.io/%E5%A6%82%E4%BD%95%E5%9C%A8windows%E4%B8%8B%E9%85%8D%E7%BD%AEmongodb%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://majunchang.github.io/如何在windows下配置mongodb数据库/</id>
    <published>2017-10-10T15:32:47.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何在windows下配置mongodb数据库"><a href="#如何在windows下配置mongodb数据库" class="headerlink" title="如何在windows下配置mongodb数据库"></a>如何在windows下配置mongodb数据库</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>官网下载链接 <a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=nav#community</a></p><p>下载以后进行解压 安装 （建议安装到c盘）</p><h4 id="如何启动和使用服务"><a href="#如何启动和使用服务" class="headerlink" title="如何启动和使用服务"></a>如何启动和使用服务</h4><p>在mongodb的安装目录bin下 打开命令行 输入 ./mongod 将数据库服务启动起来 默认在27017端口</p><p>然后 在该目录下 重新打开一个命令行 输出mongo 将数据库连接起来 就可以使用nodejs操作数据库了</p><h4 id="如何配置环境变量-使其可以在全局范围呢-打开"><a href="#如何配置环境变量-使其可以在全局范围呢-打开" class="headerlink" title="如何配置环境变量 使其可以在全局范围呢 打开"></a>如何配置环境变量 使其可以在全局范围呢 打开</h4><p>1.<img src="http://oneg19f80.bkt.clouddn.com/blog/20171205/143701900.png" alt="mark">2.<img src="http://oneg19f80.bkt.clouddn.com/blog/20171205/143925480.png" alt="mark">3. <img src="http://oneg19f80.bkt.clouddn.com/blog/20171205/143941245.png" alt="mark"></p><p>4.<img src="http://oneg19f80.bkt.clouddn.com/blog/20171205/143956889.png" alt="mark"></p><ol><li>经过以上步骤配置环境变量 我们可以在任意文件夹（包括桌面）中 以mongod 和mongo 来启动和连接数据库服务了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何在windows下配置mongodb数据库&quot;&gt;&lt;a href=&quot;#如何在windows下配置mongodb数据库&quot; class=&quot;headerlink&quot; title=&quot;如何在windows下配置mongodb数据库&quot;&gt;&lt;/a&gt;如何在windows下配置mong
      
    
    </summary>
    
      <category term="javascript" scheme="https://majunchang.github.io/categories/javascript/"/>
    
    
      <category term="mongodb" scheme="https://majunchang.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目音乐app</title>
    <link href="https://majunchang.github.io/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>https://majunchang.github.io/网易云音乐/</id>
    <published>2017-09-10T15:16:02.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h1><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/142620768.png" alt="mark"> <img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/142712573.png" alt="mark"></p><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/142654033.png" alt="mark"> <img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/142855284.png" alt="mark"></p><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/142929183.png" alt="mark"> <img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/142948018.png" alt="mark"></p><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/143034498.png" alt="mark"> <img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/143128496.png" alt="mark"></p><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/143200457.png" alt="mark"> <img src="http://oneg19f80.bkt.clouddn.com/blog/20170907/143303362.png" alt="mark"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><p>我们使用 jsonp配合node代理 借用了qq音乐接口实现的 音乐播放器</p><p>这是jsonp代码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by majunchang on 2017/7/23.</span><br><span class="line"> */</span><br><span class="line">import originJsonp from &apos;jsonp&apos;</span><br><span class="line"></span><br><span class="line">// 三个参数粉笔为 目标url 需要拼接在url上的参数 以及jsonp插件 需要的option</span><br><span class="line">export default function jsonp(url,paramdata,options) &#123;</span><br><span class="line">  // 在这里引入一个  拼接字符串的方法</span><br><span class="line">  url += (url.indexOf(&apos;?&apos;)&lt; 0 ? &apos;?&apos;:&apos;&amp;&apos;)+param(paramdata);</span><br><span class="line"></span><br><span class="line">  // 在这里返回一个Promise对象</span><br><span class="line">  return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    // 在这里的data 跟上面的paramdata是不一样的  一个是 json的返回对象  一个是你传入的参数</span><br><span class="line">    originJsonp(url,options,(err,data)=&gt;&#123;</span><br><span class="line">      if(!err)&#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function param(paramdata) &#123;</span><br><span class="line">  let url=&apos;&apos;;</span><br><span class="line">  for(var k in paramdata)&#123;</span><br><span class="line">    //  对参数对象里的每一项进行判断</span><br><span class="line">    let value = paramdata[k] ==  undefined ? &apos;&apos;: paramdata[k];</span><br><span class="line">    url+= `&amp;$&#123;k&#125;=$&#123;encodeURIComponent(value)&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  // 循环结束  url 拼接完毕 将其返回</span><br><span class="line">  return url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这是配置接口的js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by majunchang on 2017/7/23.</span><br><span class="line"> */</span><br><span class="line">import jsonp from &apos;common/js/jsonp&apos;</span><br><span class="line">import &#123;commonParams,options&#125; from &apos;./config&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">export function getRecommend() &#123;</span><br><span class="line">  const url = &apos;https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg&apos;</span><br><span class="line"></span><br><span class="line">  const paramData = Object.assign(&#123;&#125;,commonParams,&#123;</span><br><span class="line">    platform: &apos;h5&apos;,</span><br><span class="line">    uin: 0,</span><br><span class="line">    needNewCode: 1</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return jsonp(url,paramData,options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 歌单列表</span><br><span class="line">export function getDiscList() &#123;</span><br><span class="line">  const url=&apos;/api/getDiscList&apos;;</span><br><span class="line"></span><br><span class="line">  // 需要拼接的数据</span><br><span class="line">  const data = Object.assign(&#123;&#125;,commonParams,&#123;</span><br><span class="line">    platform: &apos;yqq&apos;,</span><br><span class="line">    hostUin: 0,</span><br><span class="line">    sin: 0,</span><br><span class="line">    ein: 29,</span><br><span class="line">    sortId: 5,</span><br><span class="line">    needNewCode: 0,</span><br><span class="line">    categoryId: 10000000,</span><br><span class="line">    rnd: Math.random(),</span><br><span class="line">    format: &apos;json&apos;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return axios.get(url,&#123;</span><br><span class="line">      params:data</span><br><span class="line">  &#125;).then((res)=&gt;&#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">    return Promise.resolve(res.data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是nodejs 代码 仅仅推荐页面 用到了这个axios 其余的都是使用接口配置jsonp实现的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var app = express()</span><br><span class="line">var apiRoutes = express.Router()</span><br><span class="line"></span><br><span class="line">apiRoutes.get(&apos;/getDiscList&apos;,function (req,res) &#123;</span><br><span class="line">  var url = &apos;https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg&apos;;</span><br><span class="line">  axios.get(url,&#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: &apos;https://c.y.qq.com/&apos;,</span><br><span class="line">      host: &apos;c.y.qq.com&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    params:req.query</span><br><span class="line">  &#125;).then((response)=&gt;&#123;</span><br><span class="line">    res.json(response.data)</span><br><span class="line">  &#125;).catch((e)=&gt;&#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.use(&apos;/api&apos;,apiRoutes);</span><br></pre></td></tr></table></figure><h2 id="推荐页面"><a href="#推荐页面" class="headerlink" title="推荐页面"></a>推荐页面</h2><blockquote><p>使用jsonp的方式 获取到数据</p></blockquote><h4 id="轮播图部分"><a href="#轮播图部分" class="headerlink" title="轮播图部分"></a>轮播图部分</h4><blockquote><p><a href="">https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg</a></p><p>部分代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;slider&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in recommends&quot;&gt;</span><br><span class="line">      &lt;a :href=&quot;item.linkUrl&quot;&gt;</span><br><span class="line">        &lt;img class=&quot;needsclick&quot; @load=&apos;loadImg&apos; :src=&quot;item.picUrl&quot;&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/slider&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     _initScroll()&#123;</span><br><span class="line">         console.log(this.listenScroll);</span><br><span class="line">       if (!this.$refs.wrapper) &#123;</span><br><span class="line">         return</span><br><span class="line">       &#125;</span><br><span class="line">       this.scroll = new BScroll(this.$refs.wrapper, &#123;</span><br><span class="line">         probeType: this.probeType,</span><br><span class="line">         click: this.click</span><br><span class="line">       &#125;)</span><br><span class="line">       if(this.listenScroll)&#123;</span><br><span class="line">           let _this = this;</span><br><span class="line">           this.scroll.on(&apos;scroll&apos;,(pos)=&gt;&#123;</span><br><span class="line">               _this.$emit(&apos;scroll&apos;,pos);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ol><li>使用 better-scroll插件 将轮播图部分抽象成为一个组件 使用solt插槽 往里面填充内容</li><li>使用插件的内容的相关api 和轮播组件里面的 props的 控制图片的轮播速度 间隔时间 和是否轮播 在此基础上 增加dots 也就是图片底部的圆点</li><li>监听window的resize事件 当用户改变屏幕的时候 轮播效果不会发生改变</li><li>访问连接 以及返回格式 数据</li></ol><h4 id="歌单列表部分"><a href="#歌单列表部分" class="headerlink" title="歌单列表部分"></a>歌单列表部分</h4><blockquote><p><a href="http://note.youdao.com/" target="_blank" rel="noopener">https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg</a></p><ol><li>由于qq音乐 对访问对象 做了限制 所以我们通过配置代理的方式 进行访问 npm run dev的时候 会在dev-server中运行 我们结合axios和express框架 配置使用代理</li><li>加入loading组件和懒加载组件 在网速较低的情况下 提高了用户的体验</li><li>后台代理代码</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var app = express()</span><br><span class="line">var apiRoutes = express.Router()</span><br><span class="line"></span><br><span class="line">apiRoutes.get(&apos;/getDiscList&apos;,function (req,res) &#123;</span><br><span class="line">  var url = &apos;https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg&apos;;</span><br><span class="line">  axios.get(url,&#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: &apos;https://c.y.qq.com/&apos;,</span><br><span class="line">      host: &apos;c.y.qq.com&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    params:req.query</span><br><span class="line">  &#125;).then((response)=&gt;&#123;</span><br><span class="line">    res.json(response.data)</span><br><span class="line">  &#125;).catch((e)=&gt;&#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.use(&apos;/api&apos;,apiRoutes);</span><br></pre></td></tr></table></figure><h2 id="歌手页面"><a href="#歌手页面" class="headerlink" title="歌手页面"></a>歌手页面</h2><blockquote><p>分为歌手列表页和歌手详情页 歌手列表页需要做出左右联动 类似于 手机通讯录那样的 歌手详情页要要出模拟原生app的 滑动感觉</p></blockquote><h3 id="歌手列表页"><a href="#歌手列表页" class="headerlink" title="歌手列表页"></a>歌手列表页</h3><blockquote><p>将他封装成了 一个 基本组件 我们需要实现以下功能</p></blockquote><ul><li>滑动左边 右边的不同字母 要显示当相应的颜色</li><li>点击右边的首字母 左右要滚动到响应的位置</li></ul><p><strong>实现详解：</strong></p><ol><li>子组件使用事件监听 scroll事件 然后触发父组件的方法 根据滑动距离（也就是y值）来跟高度数组作比较</li><li>点击右边的首字母之后 触发父组件的点击事件 将高度数组的相应索引的值 赋给scrolly 然后使用watch 去监听这个值 最后调用better-scroll的方法 使页面滑动到相应的位置</li><li>要配合移动端的touch事件 start move end 以及使用e.touches[0]</li></ol><h4 id="相关的代码"><a href="#相关的代码" class="headerlink" title="相关的代码"></a>相关的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">onShortcutTouchStart(e)&#123;</span><br><span class="line">        // 我们的目的是获取到  你触摸的这个的index索引值</span><br><span class="line">        let anchorIndex = getData(e.target, &apos;index&apos;);</span><br><span class="line">        // js触摸事件 http://www.jianshu.com/p/832f36531df9</span><br><span class="line">        let firstTouch = e.touches[0];</span><br><span class="line">        this.touch.y1 = firstTouch.pageY;</span><br><span class="line">        this.touch.anchorIndex1 = anchorIndex;</span><br><span class="line">        this._scroll(anchorIndex)</span><br><span class="line">        this.$refs.listView.scrollToElement(this.$refs.listGroup[anchorIndex], 0)</span><br><span class="line">      &#125;,</span><br><span class="line">      onShortcutTouchMove(e)&#123;</span><br><span class="line">        let touchmove = e.touches[0];</span><br><span class="line">        this.touch.y2 = touchmove.pageY;</span><br><span class="line">        let chazhi = (this.touch.y2 - this.touch.y1) / keyWordHeight | 0;</span><br><span class="line"></span><br><span class="line">        this.touch.anchorIndex2 = parseInt(this.touch.anchorIndex1) + chazhi;</span><br><span class="line">        // 使用滚动具体距离事件</span><br><span class="line">        this._scroll(this.touch.anchorIndex2)</span><br><span class="line">        this.$refs.listView.scrollToElement(this.$refs.listGroup[this.touch.anchorIndex2], 0)</span><br><span class="line">      &#125;,</span><br><span class="line">      scroll(pos)&#123;</span><br><span class="line">        this.scrollY = pos.y</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h3 id="歌手详情页"><a href="#歌手详情页" class="headerlink" title="歌手详情页"></a>歌手详情页</h3><blockquote><p>技术实现难点：模拟原生移动应用实现 上滑和下滑的时候的效果</p><p>更多的是在于如何使用css+scroll组件 实现这些效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">scrollY(newVal)&#123;</span><br><span class="line">        // 在这里监听 scroll的变化 并改变头部图片的值</span><br><span class="line">        /*</span><br><span class="line">         我们要达到两个效果 第一个效果：歌单列表向上滑动的时候 遮罩层随着向上（有一个向上的最大距离） 往下滑的时候（图片要随着你下滑的距离 有一个放大的效果）</span><br><span class="line">         */</span><br><span class="line">        let translateY = Math.max(this.minTransalteY, newVal);</span><br><span class="line">        let scale = 1;</span><br><span class="line">        let zIndex = 0;</span><br><span class="line">        let blur = 0;</span><br><span class="line">        const percent = Math.abs(newVal / this.imageHeight);</span><br><span class="line">        if (newVal &gt; 0) &#123;</span><br><span class="line">          scale = 1 + percent;</span><br><span class="line">          zIndex = 10;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          blur = Math.min(20, percent * 20)</span><br><span class="line">        &#125;</span><br><span class="line">        // 当列表向上滑动的时候 有一个高斯模糊的效果</span><br><span class="line">        this.$refs.layer.style[transform] = `translate3d(0,$&#123;translateY&#125;px,0)`;</span><br><span class="line">        this.$refs.filter.style[backdrop] = `blur($&#123;blur&#125;px)`</span><br><span class="line">        if (newVal &lt; this.minTransalteY) &#123;</span><br><span class="line">          zIndex = 10;</span><br><span class="line">          this.$refs.bgImage.style.height = `$&#123;leftHeigth&#125;px`;</span><br><span class="line">          this.$refs.bgImage.style.paddingTop = 0;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$refs.bgImage.style.paddingTop = &apos;70%&apos;</span><br><span class="line">          this.$refs.bgImage.style.height = 0</span><br><span class="line">        &#125;</span><br><span class="line">        this.$refs.bgImage.style[transform] = `scale($&#123;scale&#125;)`</span><br><span class="line">        this.$refs.bgImage.style.zIndex = zIndex</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="播放详解"><a href="#播放详解" class="headerlink" title="播放详解"></a>播放详解</h2><h4 id="music的获取，播放以及和vuex的联动原理详解"><a href="#music的获取，播放以及和vuex的联动原理详解" class="headerlink" title="music的获取，播放以及和vuex的联动原理详解"></a>music的获取，播放以及和vuex的联动原理详解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[api/singer/getSingerDetail方法获取到数据]--&gt;B(components/singer-detail使用构造函数,初始化songs数组)</span><br><span class="line">B--&gt;C(singer-datail-&gt;music-list-&gt;song-list 当我们点击歌曲之后 触发了actions 将歌曲列表和歌曲索引传递)</span><br><span class="line">C--&gt;D&#123;  state中存储了歌手 播放 状态是否全屏等信息&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们在 vuex中存储的信息 是为了我们在多个组件之中可以 获取到歌曲的状态 从而操作audio标签 来实现我们想要的功能</p><h4 id="歌曲播放界面—》-player-vue文件"><a href="#歌曲播放界面—》-player-vue文件" class="headerlink" title="歌曲播放界面—》 player.vue文件"></a>歌曲播放界面—》 player.vue文件</h4><p>切换动效部分使用了贝塞尔曲线 唱片的旋转部分使用了 css的旋转特效</p><p>对于歌词的解析部分使用了 插件lyric-parser <a href="https://github.com/ustbhuangyi/lyric-parser" target="_blank" rel="noopener">https://github.com/ustbhuangyi/lyric-parser</a></p><p>底部的圆圈 使用了svg 以及相关一些属性模拟进度</p></blockquote><h2 id="排行页面"><a href="#排行页面" class="headerlink" title="排行页面"></a>排行页面</h2><blockquote><p>排行页面与歌手页面非常相似 对于这样的基础组件 我们进行了复用 代码如下 文件是song—list 区别就是</p><p>在排行页面中 我们点击的歌单 使用奖杯图片以及排名的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"song-list"</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">'item'</span> @click=<span class="string">'selectItem(song,index)'</span> v-<span class="keyword">for</span>=<span class="string">"(song,index) in songs"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"rank"</span> v-show=<span class="string">'rank'</span>&gt;</span><br><span class="line">          &lt;span :<span class="class"><span class="keyword">class</span></span>=<span class="string">'getRankClass(index)'</span> v-text=<span class="string">'getRankText(index)'</span>&gt;&lt;/span&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="content"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h2 class="name"&gt;&#123;&#123;song.name&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">          &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"desc"</span>&gt;&#123;&#123;getDesc(song)&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">          </span><br><span class="line">     getRankClass(index)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`icon icon<span class="subst">$&#123;index&#125;</span>`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'text'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      getRankText(index)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h2><blockquote><p>有一个searchBox组件 充当搜索框 下面是一些热门搜索的标签 当我们进行搜索的时候 搜索结果 会复用scroll组件</p></blockquote><h4 id="对于搜索框-也就是search-box的input进行截流处理"><a href="#对于搜索框-也就是search-box的input进行截流处理" class="headerlink" title="对于搜索框 也就是search-box的input进行截流处理"></a>对于搜索框 也就是search-box的input进行截流处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span>  <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,delay</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//  这是es6的rest参数</span></span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(args);</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>,args)</span><br><span class="line">    &#125;,delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中的create钩子函数中 这样使用 </span></span><br><span class="line"> created()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$watch(<span class="string">'inputMsg'</span>,debounce(<span class="function">(<span class="params">newVal</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// console.log(newVal);</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'inputMsg'</span>,newVal)</span><br><span class="line">        &#125;,<span class="number">200</span>));</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="在搜索之后的建议中-点击-会对你点击的对象-也就是包括了歌手和歌曲的对象进行区别"><a href="#在搜索之后的建议中-点击-会对你点击的对象-也就是包括了歌手和歌曲的对象进行区别" class="headerlink" title="在搜索之后的建议中  点击 会对你点击的对象 也就是包括了歌手和歌曲的对象进行区别"></a>在搜索之后的建议中 点击 会对你点击的对象 也就是包括了歌手和歌曲的对象进行区别</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">selectItem(item) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断为歌手的 选项 跳转路由 设置mumation 触发事件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (item.type === TYPE_SINGER) &#123;</span><br><span class="line">          <span class="comment">// 构造一个singer实例</span></span><br><span class="line">          <span class="keyword">const</span> singer = <span class="keyword">new</span> Singer(&#123;</span><br><span class="line">            id: item.singermid,</span><br><span class="line">            name: item.singername</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">            path: <span class="string">`/search/<span class="subst">$&#123;singer.id&#125;</span>`</span></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">this</span>.setSinger(singer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.insertSong(item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'selected'</span>,item)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h2 id="比较经典的方法"><a href="#比较经典的方法" class="headerlink" title="比较经典的方法"></a>比较经典的方法</h2><h4 id="封装jsonp方法"><a href="#封装jsonp方法" class="headerlink" title="封装jsonp方法"></a>封装jsonp方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by majunchang on 2017/7/23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> originJsonp <span class="keyword">from</span> <span class="string">'jsonp'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数粉笔为 目标url 需要拼接在url上的参数 以及jsonp插件 需要的option</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url,paramdata,options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在这里引入一个  拼接字符串的方法</span></span><br><span class="line">  url += (url.indexOf(<span class="string">'?'</span>)&lt; <span class="number">0</span> ? <span class="string">'?'</span>:<span class="string">'&amp;'</span>)+param(paramdata);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里返回一个Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在这里的data 跟上面的paramdata是不一样的  一个是 json的返回对象  一个是你传入的参数</span></span><br><span class="line">    originJsonp(url,options,(err,data)=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params">paramdata</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url=<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> paramdata)&#123;</span><br><span class="line">    <span class="comment">//  对参数对象里的每一项进行判断</span></span><br><span class="line">    <span class="keyword">let</span> value = paramdata[k] ==  <span class="literal">undefined</span> ? <span class="string">''</span>: paramdata[k];</span><br><span class="line">    url+= <span class="string">`&amp;<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(value)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环结束  url 拼接完毕 将其返回</span></span><br><span class="line">  <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混乱数组方法"><a href="#混乱数组方法" class="headerlink" title="混乱数组方法"></a>混乱数组方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  此处 添加一个 混乱数组的方法  将一个数组内部的元素 全部打乱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr1 = arr.slice();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> j = getRandomInt(<span class="number">0</span>,i);</span><br><span class="line">    <span class="keyword">var</span> t = arr1[i];</span><br><span class="line">    arr1[i] = arr1[j];</span><br><span class="line">    arr1[j] = t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用localstorage存储最近喜欢的"><a href="#使用localstorage存储最近喜欢的" class="headerlink" title="使用localstorage存储最近喜欢的"></a>使用localstorage存储最近喜欢的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertArr</span>(<span class="params">arr, val, compare, maxLen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = arr.findIndex(compare);</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  arr.unshift(val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (maxLen &amp;&amp; arr.length &gt; maxLen) &#123;</span><br><span class="line">    arr.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteFromArray</span>(<span class="params">arr, compare</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare);</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveFavorite</span>(<span class="params">songTarget</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> songs = storage.get(favorite_key, []);</span><br><span class="line">  insertArr(songs, songTarget, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id === songTarget.id;</span><br><span class="line">  &#125;, favoriteMaxLen);</span><br><span class="line">  storage.set(favorite_key, songs);</span><br><span class="line">  <span class="keyword">return</span> songs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFavorite</span>(<span class="params">song</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> songs = storage.get(favorite_key, [])</span><br><span class="line">  deleteFromArray(songs, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id === song.id</span><br><span class="line">  &#125;)</span><br><span class="line">  storage.set(favorite_key, songs)</span><br><span class="line">  <span class="keyword">return</span> songs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadFavorite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> storage.get(favorite_key, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="actions中在原先的歌曲列表中插入一首歌曲的方法"><a href="#actions中在原先的歌曲列表中插入一首歌曲的方法" class="headerlink" title="actions中在原先的歌曲列表中插入一首歌曲的方法"></a>actions中在原先的歌曲列表中插入一首歌曲的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 声明一个actions  是我们在 suggest的时候  但歌曲列表被检索出来的时候  我们点击歌曲列表 进行播放的事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 为什么要这样做 因为用户在使用检索的时候 并不希望改变原先的歌曲列表</span></span><br><span class="line"><span class="comment"> 我们在播放完  检索的这首歌之后  循环的时候 依然是循环我们原先的播放数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> insertSong = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit, state&#125;, song</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> playlist = state.playlist.slice()</span><br><span class="line">  <span class="keyword">let</span> sequencelist = state.sequenceList.slice();</span><br><span class="line">  <span class="keyword">let</span> currentIndex = state.currentIndex</span><br><span class="line">  <span class="comment">// 记录当前歌曲</span></span><br><span class="line">  <span class="comment">// 查找当前播放列表中 是否存在  待插入的歌曲 并返回起索引</span></span><br><span class="line">  <span class="comment">// 因为是插入歌曲 所以索引➕1</span></span><br><span class="line">  <span class="comment">// 插入这首歌 到当前索引的位置</span></span><br><span class="line">  <span class="comment">// 如果包含这首歌</span></span><br><span class="line">  <span class="comment">// 如果插入的序号 大于列表中的序号</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentSong = playlist[currentIndex];</span><br><span class="line">  <span class="keyword">let</span> findPlayIndex = findIndex(playlist, song);</span><br><span class="line">  currentIndex++;</span><br><span class="line">  playlist.splice(currentIndex, <span class="number">0</span>, song);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (findPlayIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentIndex &gt; findPlayIndex) &#123;</span><br><span class="line">      playlist.splice(findPlayIndex, <span class="number">1</span>);</span><br><span class="line">      currentIndex--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      playlist.splice(findPlayIndex + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentSIndex = findIndex(sequencelist, song) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> findSeqIndex = findIndex(sequencelist, song);</span><br><span class="line"></span><br><span class="line">  sequencelist.splice(currentSIndex, <span class="number">0</span>, song);</span><br><span class="line">  <span class="keyword">if</span> (findSeqIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentSIndex &gt; findSeqIndex) &#123;</span><br><span class="line">      sequencelist.splice(findSeqIndex, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sequencelist.splice(findSeqIndex + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  commit(types.SET_PLAYLIST, playlist)</span><br><span class="line">  commit(types.SET_SEQUENCE_LIST, sequencelist)</span><br><span class="line">  commit(types.SET_CURRENT_INDEX, currentIndex)</span><br><span class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网易云音乐&quot;&gt;&lt;a href=&quot;#网易云音乐&quot; class=&quot;headerlink&quot; title=&quot;网易云音乐&quot;&gt;&lt;/a&gt;网易云音乐&lt;/h1&gt;&lt;h2 id=&quot;项目截图&quot;&gt;&lt;a href=&quot;#项目截图&quot; class=&quot;headerlink&quot; title=&quot;项目截图&quot;
      
    
    </summary>
    
      <category term="vue" scheme="https://majunchang.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://majunchang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript-this陷阱详解大全</title>
    <link href="https://majunchang.github.io/javascript-this%E9%99%B7%E9%98%B1%E8%AF%A6%E8%A7%A3%E5%A4%A7%E5%85%A8/"/>
    <id>https://majunchang.github.io/javascript-this陷阱详解大全/</id>
    <published>2017-06-05T08:55:10.000Z</published>
    <updated>2018-10-23T13:05:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>　JavaScript来自一门健全的语言，所以你可能觉得JavaScript中的this和其他面向对象的语言如java的this一样，是指存储在实例属性中的值。事实并非如此，在JavaScript中，最好把this当成哈利波特中的博格特的背包，有着深不可测的魔力。</p><p>　　下面的部分是我希望我的同事在使用JavaScript的this的时候应当知道的。内容很多，是我学习好几年总结出来的。</p><p>　　JavaScript中很多时候会用到this，下面详细介绍每一种情况。在这里我想首先介绍一下宿主环境这个概念。一门语言在运行的时候，需要一个环境，叫做宿主环境。对于JavaScript，宿主环境最常见的是web浏览器，浏览器提供了一个JavaScript运行的环境，这个环境里面，需要提供一些接口，好让JavaScript引擎能够和宿主环境对接。JavaScript引擎才是真正执行JavaScript代码的地方，常见的引擎有V8(目前最快JavaScript引擎、Google生产)、JavaScript core。JavaScript引擎主要做了下面几件事情：<br>一套与宿主环境相联系的规则;<br>JavaScript引擎内核（基本语法规范、逻辑、命令和算法);<br>一组内置对象和API;<br>其他约定。<br>但是环境不是唯一的，也就是JavaScript不仅仅能够在浏览器里面跑，也能在其他提供了宿主环境的程序里面跑，最常见的就是nodejs。同样作为一个宿主环境，nodejs也有自己的JavaScript引擎–V8。根据官方的定义:<br>Node.js is a platform built on Chrome’s JavaScript runtime for easily building fast, scalable network applications</p><h3 id="global-this"><a href="#global-this" class="headerlink" title="global this"></a>global this</h3><p>在浏览器里，在全局范围内，this等价于window对象。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="number">2</span>     <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true</span></span><br><span class="line"><span class="number">3</span> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在浏览器里，在全局范围内，用var声明一个变量和给this或者window添加属性是等价的。<br>1<script type="text/javascript"><br>2     var foo = “bar”;<br>3     console.log(this.foo); //logs “bar”<br>4     console.log(window.foo); //logs “bar”<br>5</script><br>如果你在声明一个变量的时候没有使用var或者let(ECMAScript 6),你就是在给全局的this添加或者改变属性值。<br>1<script type="text/javascript"><br> 2     foo = “bar”;<br> 3<br> 4     function testThis() {<br> 5       foo = “foo”;<br> 6     }<br> 7<br> 8     console.log(this.foo); //logs “bar”<br> 9     testThis();<br>10     console.log(this.foo); //logs “foo”<br>11</script><br>在node环境里，如果使用REPL(Read-Eval-Print Loop，简称REPL:读取-求值-输出,是一个简单的，交互式的编程环境)来执行程序,this并不是最高级的命名空间，最高级的是global.</p><blockquote><p>this<br>{ ArrayBuffer: [Function: ArrayBuffer],<br>Int8Array: { [Function: Int8Array] BYTES_PER_ELEMENT: 1 },<br>Uint8Array: { [Function: Uint8Array] BYTES_PER_ELEMENT: 1 },<br>…<br>global === this<br>true<br>在node环境里，如果执行一个js脚本，在全局范围内，this以一个空对象开始作为最高级的命名空间，这个时候，它和global不是等价的。<br>1 test.js脚本内容：<br>2<br>3 console.log(this);<br>4 console.log(this === global);<br>5<br>6 REPL运行脚本：<br>7<br>8 $ node test.js<br>9 {}<br>10 false<br>在node环境里，在全局范围内，如果你用REPL执行一个脚本文件，用var声明一个变量并不会和在浏览器里面一样将这个变量添加给this。<br>1 test.js:<br>2<br>3 var foo = “bar”;<br>4 console.log(this.foo);<br>5<br>6 $ node test.js<br>7 undefined<br>但是如果你不是用REPL执行脚本文件，而是直接执行代码，结果和在浏览器里面是一样的(神坑)<br>1 &gt; var foo = “bar”;<br>2 &gt; this.foo<br>3 bar<br>4 &gt; global.foo<br>5 bar<br>在node环境里，用REPL运行脚本文件的时候，如果在声明变量的时候没有使用var或者let，这个变量会自动添加到global对象，但是不会自动添加给this对象。如果是直接执行代码，则会同时添加给global和this<br>1 test.js<br>2<br>3 foo = “bar”;<br>4 console.log(this.foo);<br>5 console.log(global.foo);<br>6<br>7 $ node test.js<br>8 undefined<br>9 bar<br>上面的八种情况可能大家已经绕晕了，总结起来就是：在浏览器里面this是老大，它等价于window对象，如果你声明一些全局变量(不管在任何地方)，这些变量都会作为this的属性。在node里面，有两种执行JavaScript代码的方式，一种是直接执行写好的JavaScript文件，另外一种是直接在里面执行一行行代码。对于直接运行一行行JavaScript代码的方式，global才是老大，this和它是等价的。在这种情况下，和浏览器比较相似，也就是声明一些全局变量会自动添加给老大global，顺带也会添加给this。但是在node里面直接脚本文件就不一样了，你声明的全局变量不会自动添加到this，但是会添加到global对象。所以相同点是，在全局范围内，全局变量终究是属于老大的。<br>function this<br>无论是在浏览器环境还是node环境， 除了在DOM事件处理程序里或者给出了thisArg(接下来会讲到)外，如果不是用new调用，在函数里面使用this都是指代全局范围的this。<br>1<script type="text/javascript"><br> 2     foo = “bar”;<br> 3<br> 4     function testThis() {<br> 5       this.foo = “foo”;<br> 6     }<br> 7<br> 8     console.log(this.foo); //logs “bar”<br> 9     testThis();<br>10     console.log(this.foo); //logs “foo”<br>11</script><br>test.js</p></blockquote><p>foo = “bar”;</p><p>function testThis () {<br>this.foo = “foo”;<br>}</p><p>console.log(global.foo);<br>testThis();<br>console.log(global.foo);<br>$ node test.js<br>bar<br>foo<br>除非你使用严格模式，这时候this就会变成undefined。<br>1<script type="text/javascript"><br> 2     foo = “bar”;<br> 3<br> 4     function testThis() {<br> 5       “use strict”;<br> 6       this.foo = “foo”;<br> 7     }<br> 8<br> 9     console.log(this.foo); //logs “bar”<br>10     testThis();  //Uncaught TypeError: Cannot set property ‘foo’ of undefined<br>11</script><br>如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系。<br>1<script type="text/javascript"><br> 2     foo = “bar”;<br> 3<br> 4     function testThis() {<br> 5       this.foo = “foo”;<br> 6     }<br> 7<br> 8     console.log(this.foo); //logs “bar”<br> 9     new testThis();<br>10     console.log(this.foo); //logs “bar”<br>11<br>12     console.log(new testThis().foo); //logs “foo”<br>13</script><br>我更喜欢把新的值称作一个实例。</p><p>函数里面的this其实相对比较好理解，如果我们在一个函数里面使用this，需要注意的就是我们调用函数的方式，如果是正常的方式调用函数，this指代全局的this，如果我们加一个new，这个函数就变成了一个构造函数，我们就创建了一个实例，this指代这个实例，这个和其他面向对象的语言很像。另外，写JavaScript很常做的一件事就是绑定事件处理程序，也就是诸如button.addEventListener(‘click’, fn, false)之类的，如果在fn里面需要使用this，this指代事件处理程序对应的对象，也就是button。<br>prototype this<br>你创建的每一个函数都是函数对象。它们会自动获得一个特殊的属性prototype，你可以给这个属性赋值。当你用new的方式调用一个函数的时候，你就能通过this访问你给prototype赋的值了。<br>1 function Thing() {<br>2 console.log(this.foo);<br>3 }<br>4<br>5 Thing.prototype.foo = “bar”;<br>6<br>7 var thing = new Thing(); //logs “bar”<br>8 console.log(thing.foo); //logs “bar”<br>当你使用new为你的函数创建多个实例的时候，这些实例会共享你给prototype设定的值。对于下面的例子，当你调用this.foo的时候，都会返回相同的值，除非你在某个实例里面重写了自己的this.foo<br>复制代码</p><p>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 console.log(this.foo);<br>6 }<br>7 Thing.prototype.setFoo = function (newFoo) {<br>8 this.foo = newFoo;<br>9 }<br>10<br>11 var thing1 = new Thing();<br>12 var thing2 = new Thing();<br>13<br>14 thing1.logFoo(); //logs “bar”<br>15 thing2.logFoo(); //logs “bar”<br>16<br>17 thing1.setFoo(“foo”);<br>18 thing1.logFoo(); //logs “foo”;<br>19 thing2.logFoo(); //logs “bar”;<br>20<br>21 thing2.foo = “foobar”;<br>22 thing1.logFoo(); //logs “foo”;<br>23 thing2.logFoo(); //logs “foobar”;<br>实例里面的this是一个特殊的对象。你可以把this想成一种获取prototype的值的一种方式。当你在一个实例里面直接给this添加属性的时候，会隐藏prototype中与之同名的属性。如果你想访问prototype中的这个属性值而不是你自己设定的属性值，你可以通过在实例里面删除你自己添加的属性的方式来实现。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 console.log(this.foo);<br>6 }<br>7 Thing.prototype.setFoo = function (newFoo) {<br>8 this.foo = newFoo;<br>9 }<br>10 Thing.prototype.deleteFoo = function () {<br>11 delete this.foo;<br>12 }<br>13 var thing = new Thing();<br>14 thing.setFoo(“foo”);<br>15 thing.logFoo(); //logs “foo”;<br>16 thing.deleteFoo();<br>17 thing.logFoo(); //logs “bar”;<br>18 thing.foo = “foobar”;<br>19 thing.logFoo(); //logs “foobar”;<br>20 delete thing.foo;<br>21 thing.logFoo(); //logs “bar”;<br>或者你也能直接通过引用函数对象的prototype 来获得你需要的值。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 console.log(this.foo, Thing.prototype.foo);<br>6 }<br>7<br>8 var thing = new Thing();<br>9 thing.foo = “foo”;<br>10 thing.logFoo(); //logs “foo bar”;<br>通过一个函数创建的实例会共享这个函数的prototype属性的值，如果你给这个函数的prototype赋值一个Array，那么所有的实例都会共享这个Array，除非你在实例里面重写了这个Array，这种情况下，函数的prototype的Array就会被隐藏掉。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.things = [];<br>4<br>5<br>6 var thing1 = new Thing();<br>7 var thing2 = new Thing();<br>8 thing1.things.push(“foo”);<br>9 console.log(thing2.things); //logs [“foo”]<br>给一个函数的prototype赋值一个Array通常是一个错误的做法。如果你想每一个实例有他们专属的Array，你应该在函数里面创建而不是在prototype里面创建。<br>1 function Thing() {<br>2 this.things = [];<br>3 }<br>4<br>5<br>6 var thing1 = new Thing();<br>7 var thing2 = new Thing();<br>8 thing1.things.push(“foo”);<br>9 console.log(thing1.things); //logs [“foo”]<br>10 console.log(thing2.things); //logs []<br>实际上你可以通过把多个函数的prototype链接起来的从而形成一个原型链，因此this就会魔法般地沿着这条原型链往上查找直到找你你需要引用的值。<br>1 function Thing1() {<br>2 }<br>3 Thing1.prototype.foo = “bar”;<br>4<br>5 function Thing2() {<br>6 }<br>7 Thing2.prototype = new Thing1();<br>8<br>9<br>10 var thing = new Thing2();<br>11 console.log(thing.foo); //logs “bar”<br>一些人利用原型链的特性来在JavaScript模仿经典的面向对象的继承方式。任何给用于构建原型链的函数的this的赋值的语句都会隐藏原型链上游的相同的属性。<br>1 function Thing1() {<br>2 }<br>3 Thing1.prototype.foo = “bar”;<br>4<br>5 function Thing2() {<br>6 this.foo = “foo”;<br>7 }<br>8 Thing2.prototype = new Thing1();<br>9<br>10 function Thing3() {<br>11 }<br>12 Thing3.prototype = new Thing2();<br>13<br>14<br>15 var thing = new Thing3();<br>16 console.log(thing.foo); //logs “foo”<br>我喜欢把被赋值给prototype的函数叫做方法。在上面的例子中，我已经使用过方法了，如logFoo。这些方法有着相同的prototype，即创建这些实力的原始函数。我通常把这些原始函数叫做构造函数。在prototype里面定义的方法里面使用this会影响到当前实例的原型链的上游的this。这意味着你直接给this赋值的时候，隐藏了原型链上游的相同的属性值。这个实例的任何方法都会使用这个最新的值而不是原型里面定义的这个相同的值。<br>1 function Thing1() {<br>2 }<br>3 Thing1.prototype.foo = “bar”;<br>4 Thing1.prototype.logFoo = function () {<br>5 console.log(this.foo);<br>6 }<br>7<br>8 function Thing2() {<br>9 this.foo = “foo”;<br>10 }<br>11 Thing2.prototype = new Thing1();<br>12<br>13<br>14 var thing = new Thing2();<br>15 thing.logFoo(); //logs “foo”;<br>在JavaScript里面你可以嵌套函数，也就是你可以在函数里面定义函数。嵌套函数可以通过闭包捕获父函数的变量，但是这个函数没有继承this<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 var info = “attempting to log this.foo:”;<br>6 function doIt() {<br>7 console.log(info, this.foo);<br>8 }<br>9 doIt();<br>10 }<br>11<br>12<br>13 var thing = new Thing();<br>14 thing.logFoo(); //logs “attempting to log this.foo: undefined”<br>　　 在doIt里面的this是global对象或者在严格模式下面是undefined。这是造成很多不熟悉JavaScript的人深陷 this陷阱的根源。在这种情况下事情变得非常糟糕，就像你把一个实例的方法当作一个值，把这个值当作函数参数传递给另外一个函数但是却不把这个实例传递给这个函数一样。在这种情况下，一个方法里面的环境变成了全局范围，或者在严格模式下面的undefined。</p><p>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 console.log(this.foo);<br>6 }<br>7<br>8 function doIt(method) {<br>9 method();<br>10 }<br>11<br>12<br>13 var thing = new Thing();<br>14 thing.logFoo(); //logs “bar”<br>15 doIt(thing.logFoo); //logs undefined<br>一些人喜欢先把this捕获到一个变量里面，通常这个变量叫做self，来避免上面这种情况的发生。<br>博主非常喜欢用这种方式<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 var self = this;<br>6 var info = “attempting to log this.foo:”;<br>7 function doIt() {<br>8 console.log(info, self.foo);<br>9 }<br>10 doIt();<br>11 }<br>12<br>13<br>14 var thing = new Thing();<br>15 thing.logFoo(); //logs “attempting to log this.foo: bar”<br>但是当你需要把一个方法作为一个值传递给一个函数的时候并不管用。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 var self = this;<br>6 function doIt() {<br>7 console.log(self.foo);<br>8 }<br>9 doIt();<br>10 }<br>11<br>12 function doItIndirectly(method) {<br>13 method();<br>14 }<br>15<br>16<br>17 var thing = new Thing();<br>18 thing.logFoo(); //logs “bar”<br>19 doItIndirectly(thing.logFoo); //logs undefined<br>你可以通过bind将实例和方法一切传递给函数来解决这个问题，bind是一个函数定义在所有函数和方法的函数对象上面<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 console.log(this.foo);<br>6 }<br>7<br>8 function doIt(method) {<br>9 method();<br>10 }<br>11<br>12<br>13 var thing = new Thing();<br>14 doIt(thing.logFoo.bind(thing)); //logs bar<br>你同样可以使用apply和call来在新的上下文中调用方法或函数。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 function doIt() {<br>6 console.log(this.foo);<br>7 }<br>8 doIt.apply(this);<br>9 }<br>10<br>11 function doItIndirectly(method) {<br>12 method();<br>13 }<br>14<br>15<br>16 var thing = new Thing();<br>17 doItIndirectly(thing.logFoo.bind(thing)); //logs bar<br>你可以用bind来代替任何一个函数或者方法的this，即便它没有赋值给实例的初始prototype。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4<br>5<br>6 function logFoo(aStr) {<br>7 console.log(aStr, this.foo);<br>8 }<br>9<br>10<br>11 var thing = new Thing();<br>12 logFoo.bind(thing)(“using bind”); //logs “using bind bar”<br>13 logFoo.apply(thing, [“using apply”]); //logs “using apply bar”<br>14 logFoo.call(thing, “using call”); //logs “using call bar”<br>15 logFoo(“using nothing”); //logs “using nothing undefined”<br>你应该避免在构造函数里面返回任何东西，因为这可能代替本来应该返回的实例。<br>1 function Thing() {<br>2 return {};<br>3 }<br>4 Thing.prototype.foo = “bar”;<br>5<br>6<br>7 Thing.prototype.logFoo = function () {<br>8 console.log(this.foo);<br>9 }<br>10<br>11<br>12 var thing = new Thing();<br>13 thing.logFoo(); //Uncaught TypeError: undefined is not a function<br>奇怪的是，如果你在构造函数里面返回了一个原始值，上面所述的情况并不会发生并且返回语句被忽略了。最好不要在你将通过new调用的构造函数里面返回任何类型的数据，即便你知道自己正在做什么。如果你想创建一个工厂模式，通过一个函数来创建一个实例，这个时候不要使用new来调用函数。当然这个建议是可选的。</p><p>你可以通过使用Object.create来避免使用new，这样同样能够创建一个实例。<br>1 function Thing() {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4<br>5<br>6 Thing.prototype.logFoo = function () {<br>7 console.log(this.foo);<br>8 }<br>9<br>10<br>11 var thing = Object.create(Thing.prototype);<br>12 thing.logFoo(); //logs “bar”<br>在这种情况下并不会调用构造函数<br>1 function Thing() {<br>2 this.foo = “foo”;<br>3 }<br>4 Thing.prototype.foo = “bar”;<br>5<br>6<br>7 Thing.prototype.logFoo = function () {<br>8 console.log(this.foo);<br>9 }<br>10<br>11<br>12 var thing = Object.create(Thing.prototype);<br>13 thing.logFoo(); //logs “bar”<br>因为Object.create不会调用构造函数的特性在你继承模式下你想通过原型链重写构造函数的时候非常有用。<br>1 function Thing1() {<br>2 this.foo = “foo”;<br>3 }<br>4 Thing1.prototype.foo = “bar”;<br>5<br>6 function Thing2() {<br>7 this.logFoo(); //logs “bar”<br>8 Thing1.apply(this);<br>9 this.logFoo(); //logs “foo”<br>10 }<br>11 Thing2.prototype = Object.create(Thing1.prototype);<br>12 Thing2.prototype.logFoo = function () {<br>13 console.log(this.foo);<br>14 }<br>15<br>16 var thing = new Thing2();<br>object this<br>在一个对象的一个函数里，你可以通过this来引用这个对象的其他属性。这个用new来新建一个实例是不一样的。<br>1 var obj = {<br>2 foo: “bar”,<br>3 logFoo: function () {<br>4 console.log(this.foo);<br>5 }<br>6 };<br>7<br>8 obj.logFoo(); //logs “bar”<br>注意，没有使用new，没有使用Object.create，也没有使用函数调用创建一个对象。你也可以将对象当作一个实例将函数绑定到上面。<br>1 var obj = {<br>2 foo: “bar”<br>3 };<br>4<br>5 function logFoo() {<br>6 console.log(this.foo);<br>7 }<br>8<br>9 logFoo.apply(obj); //logs “bar”<br>当你用这种方式使用this的时候，并不会越出当前的对象。只有有相同直接父元素的属性才能通过this共享变量<br>1 var obj = {<br>2 foo: “bar”,<br>3 deeper: {<br>4 logFoo: function () {<br>5 console.log(this.foo);<br>6 }<br>7 }<br>8 };<br>9<br>10 obj.deeper.logFoo(); //logs undefined</p><p>你可以直接通过对象引用你需要的属性<br>var obj = {<br>foo: “bar”,<br>deeper: {<br>logFoo: function () {<br>console.log(obj.foo);<br>}<br>}<br>};</p><p>obj.deeper.logFoo(); //logs “bar”<br>DOM event this<br>在一个HTML DOM事件处理程序里面，this始终指向这个处理程序被所绑定到的HTML DOM节点<br>1 function Listener() {<br>2 document.getElementById(“foo”).addEventListener(“click”,<br>3 this.handleClick);<br>4 }<br>5 Listener.prototype.handleClick = function (event) {<br>6 console.log(this); //logs “</p><div id="foo"></div>“<br>7 }<br>8<br>9 var listener = new Listener();<br>10 document.getElementById(“foo”).click();<br>除非你自己通过bind切换了上下文<br>1 function Listener() {<br>2 document.getElementById(“foo”).addEventListener(“click”,<br>3 this.handleClick.bind(this));<br>4 }<br>5 Listener.prototype.handleClick = function (event) {<br>6 console.log(this); //logs Listener {handleClick: function}<br>7 }<br>8<br>9 var listener = new Listener();<br>10 document.getElementById(“foo”).click();<br>HTML this<br>在HTML节点的属性里面，你可以放置JavaScript代码，this指向了这个元素<br>1<div id="foo" onclick="console.log(this)"></div><br>2<script type="text/javascript"><br>3 document.getElementById(“foo”).click(); //logs <div id="foo"...4</script><br>override this<br>你不能重写this，因为它是保留字。<p></p><p>1 function test () {<br>2 var this = {}; // Uncaught SyntaxError: Unexpected token this<br>3 }<br>eval this<br>你可以通过eval来访问this<br>function Thing () {<br>}<br>Thing.prototype.foo = “bar”;<br>Thing.prototype.logFoo = function () {<br>eval(“console.log(this.foo)”); //logs “bar”<br>}</p><p>var thing = new Thing();<br>thing.logFoo();<br>这会造成一个安全问题，除非不用eval，没有其他方式来避免这个问题。</p><p>在通过Function来创建一个函数的时候，同样能够访问this<br>function Thing () {<br>}<br>Thing.prototype.foo = “bar”;<br>Thing.prototype.logFoo = new Function(“console.log(this.foo);”);</p><p>var thing = new Thing();<br>thing.logFoo(); //logs “bar”<br>with this<br>你可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this<br>1 function Thing () {<br>2 }<br>3 Thing.prototype.foo = “bar”;<br>4 Thing.prototype.logFoo = function () {<br>5 with (this) {<br>6 console.log(foo);<br>7 foo = “foo”;<br>8 }<br>9 }<br>10<br>11 var thing = new Thing();<br>12 thing.logFoo(); // logs “bar”<br>13 console.log(thing.foo); // logs “foo”<br>许多人认为这样使用是不好的因为with本身就饱受争议。</p><p>jQuery this<br>和HTML DOM元素节点的事件处理程序一样，在许多情况下JQuery的this都指向HTML元素节点。这在事件处理程序和一些方便的方法中都是管用的，比如$.each<br>1</p><div class="foo bar1"></div><br>2<div class="foo bar2"></div><br>3<script type="text/javascript"><br> 4 $(“.foo”).each(function () {<br> 5     console.log(this); //logs <div class="foo... 6 }); 7 $(".foo").on("click", function () { 8     console.log(this); //logs <div class="foo... 9 });10 $(".foo").each(function () {11     this.click();12 });13</script><br>thisArg this<br>如果你用过underscore.js 或者 lo-dash 你可能知道许多类库的方法可以通过一个叫做thisArg 的函数参数来传递实例，这个函数参数会作为this的上下文。举个例子，这适用于_.each。原生的JavaScript在ECMAScript 5的时候也允许函数传递一个thisArg参数了，比如forEach。事实上，之前阐述的bind，apply和call的使用已经给你创造了传递thisArg参数给函数的机会。这个参数将this绑定为你所传递的对象。<p></p><p>1 function Thing(type) {<br>2 this.type = type;<br>3 }<br>4 Thing.prototype.log = function (thing) {<br>5 console.log(this.type, thing);<br>6 }<br>7 Thing.prototype.logThings = function (arr) {<br>8 arr.forEach(this.log, this); // logs “fruit apples…”<br>9 _.each(arr, this.log, this); //logs “fruit apples…”<br>10 }<br>11<br>12 var thing = new Thing(“fruit”);<br>13 thing.logThings([“apples”, “oranges”, “strawberries”, “bananas”]);<br>这使得代码变得更加简介，因为避免了一大堆bind语句、函数嵌套和this暂存的使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　JavaScript来自一门健全的语言，所以你可能觉得JavaScript中的this和其他面向对象的语言如java的this一样，是指存储在实例属性中的值。事实并非如此，在JavaScript中，最好把this当成哈利波特中的博格特的背包，有着深不可测的魔力。&lt;/p&gt;&lt;
      
    
    </summary>
    
      <category term="javascript" scheme="https://majunchang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://majunchang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用localstorage作为本地数据库以及跨域問題的解決</title>
    <link href="https://majunchang.github.io/%E4%BD%BF%E7%94%A8localstorage%E4%BD%9C%E4%B8%BA%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://majunchang.github.io/使用localstorage作为本地数据库/</id>
    <published>2017-04-16T03:32:59.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>深入浅出Nodejs-04</p><p>package.json 文件</p><p>package.json 文件一般用来描述项目的一些基本信息，例如入口文件、依赖项、项目介绍、开发作者等数据。</p><p>目前已知的两个非常重要的属性：</p><ul><li>main<ul><li>main 和模块化中的第三方包加载规则有关系</li></ul></li><li>dependencies<ul><li>dependencies 和 npm 命令行工具有关系</li><li>当你安装包的时候，如果加上 –save 参数，则npm会自动把这个第三方包依赖信息写入到 package.json 文件中的 dependencies 字段中</li><li>当你执行 npm install 的时候，npm 会找到当前项目中的 package.json 文件中的 dependencies 依赖项，然后依次将所有的依赖下载下来</li></ul></li></ul><p>这个文件最好每一个项目都有，保存一些项目的基本信息。</p><p>这个文件可以通过 npm init 以向导的形式生成，也可以加上 -y 参数，一步生成。</p><p>Express</p><p>一个基于 Node 开发的一个快速 Web 开发框架</p><p>主要用来构建 Server</p><ul><li><a href="http://expressjs.com/" target="_blank" rel="noopener">http://expressjs.com/</a></li><li><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></li></ul><p>hello-world</p><pre><code>var express = require(&apos;express&apos;)// 1. 调用 express 方法，得到一个类似于 server 的实例//    一般称作 appvar app = express()// 2. 通过 app 根据不同的请求方法及请求路径设定具体的处理函数// 当用户以 GET 请求 / 的时候，执行对应的回调处理函数app.get(&apos;/&apos;, function (req, res) {  res.end(&apos;hello world&apos;)})// 当用户以 GET 请求 /login 的时候，执行对应的回调处理函数app.get(&apos;/login&apos;, function (req, res) {  res.end(&apos;hello login&apos;)})// 3. 启动监听app.listen(3000, function () {  console.log(&apos;服务器已启动，请访问：http://127.0.0.1:3000/&apos;)})</code></pre><p>处理静态资源</p><p>参考文档：<a href="http://www.expressjs.com.cn/starter/static-files.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/starter/static-files.html</a></p><p>通过 Express 内置的 express.static 可以方便地托管静态文件，</p><p>例如图片、CSS、JavaScript 文件等。</p><p>配置规则如下：</p><pre><code>app.use(&apos;路径访问前缀&apos;, express.static(&apos;资源目录路径&apos;))</code></pre><p>以下是一些配置示例：</p><ul><li>将目录 static 资源暴露出来，可以通过 /static/* 的形式进行访问<ul><li>app.use(‘/static/‘, express.static(‘static目录的绝对路径’))</li><li>/static/css/a.css</li><li>/static/css/b.css</li><li>/static/img/ab2.jpg</li></ul></li><li>将目录 public 资源暴露出来，不需要任何前缀就可以访问<ul><li>app.use(express.static(‘public 目录的绝对路径’))</li><li>/css/bb.css</li><li>/img/a.jpg</li></ul></li><li>将目录 demo 资源暴露出来，可以通过 /aa/* /aa前缀的形式进行访问<ul><li>app.use(‘/aa/‘, express.static(‘demo 目录的绝对路径’))</li><li>/aa/css/a.css</li><li>/aa/<em>*/</em>.*</li></ul></li><li>将目录 static 资源暴露出来，可以通过 /static/<em> 或者 /aa/</em> 的形式进行访问<ul><li>app.use(‘/aa/‘, express.static(‘static 目录的绝对路径’))</li><li>app.use(‘/static/‘, express.static(‘static 目录的绝对路径’))</li><li>上面的形式就是把 static 目录中的资源提供了两种形式，既能以 /static/ 为前缀进行访问也可以以 /aa/ 的前缀进行访问</li></ul></li></ul><p>路由系统</p><p>在 Express 配置使用 ejs 模板引擎</p><p>Express 这个框架很精简，默认是不支持模板引擎的，需要配合一些第三方的模板引擎来结合使用，</p><p>例如这里将 ejs 和 express 结合起来使用：</p><p>第一：安装 ejs：</p><pre><code>npm install --save ejs</code></pre><p>第二：在代码中配置：</p><pre><code>app.set(&apos;views&apos;, 模板文件存储路径) // 注意，这里可以不配置，因为 Express 默认会去项目中的 `views` 目录进行查找app.set(&apos;view engine&apos;, &apos;ejs&apos;) // 这里表示让 Express 中的 res.render 方法使用 ejs 模板引擎，这里的 ejs 就是你安装的那个模板引擎的包名</code></pre><p>只要经过了上面这种配置，然后 res 对象上就会自动多出一个方法：res.render ,使用方式和咱们之前</p><p>自己封装的一样：res.render(‘视图名称’, {要解析替换的对象数据})</p><p>注意：使用了 ejs 模板引擎，默认视图文件后缀名必须是 .ejs，否则 render 方法找不到。</p><p>如果想要修改，可以像下面这样：</p><pre><code>// app.set(&apos;view enginge&apos;, &apos;ejs&apos;)// 将上面这句配置改为下面的形式，就修改了默认的 .ejs 后缀名app.engine(&apos;.html&apos;, require(&apos;ejs&apos;).__express)app.set(&apos;view engine&apos;, &apos;html&apos;)</code></pre><p>在 Express 中配置使用 body-parser 插件解析处理表单 POST 请求体</p><p>第一步：安装 body-parser</p><pre><code>npm install --save body-parser</code></pre><p>第二步，在代码中进行配置：</p><pre><code>app.use(bodyParser.urlencoded({ extended: false }))app.use(bodyParser.json())</code></pre><p>只要经过上面的安装配置，则在任意的 post 处理函数中都可以直接通过 req.body 来获取表单 POST 请求体数据。</p><p>例如：</p><pre><code>app.post(&apos;login&apos;, function (req, res) {  // 这里可以直接通过 req.body 来获取表单 POST 请求体数据  console.log(req.body)})</code></pre><hr><p>MongoDB</p><p>数据库概念</p><p>数据库：一个电子化的文件柜</p><p>数据库就是为我们方便的管理数据的一个平台，例如对数据的存储、修改、查询等都非常的方便。</p><p>数据库分类</p><p>数据库产品有很多，以下是一些常见的数据库产品：</p><ul><li>MySQL</li><li>Oracle</li><li>DB2</li><li>SqlServer</li><li>MongoDB</li><li>etc.</li></ul><p>MongoDB 数据库（内存型的）</p><p>为了更好的学习 MongoDB 数据库，大家可以参考菜鸟教程上的 MongoDB 数据库教程文档，</p><p>链接地址：<a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p><p>MongoDB 数据库与mysql 等老牌数据库相比的优劣势</p><p>安装与配置 MongoDB 数据库环境</p><p>启动 MongoDB 服务实例</p><p>可以通过使用安装程序中的 mongod CLI应用程序来启动 MongoDB 服务。</p><p>直接在控制台输入：mongod 敲回车即可。</p><p>在启动的时候，可以通过 –dbpath 指定数据服务存储数据的目录，</p><p>如果不指定该目录，默认 mongod 会去 c:/data/db 作为自己的数据存储目录。</p><p>64 位版本启动 MongoDB 数据服务：</p><pre><code>mongod --dbpath C:\data\db</code></pre><p>32 位版本使用下面的命令启动数据服务：</p><pre><code>mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1</code></pre><p>提示：如果不加 –dbpath, mongod 会自动使用 C:\data\db 目录作为自己的数据存储路径，</p><p>所以，如果你已经有了 C:\data\db 目录了，可以省略 –dbpath。</p><p>执行完上面的命令并成功开启 MongoDB 数据服务实例之后，就把该控制台最小化到一边就可以了，</p><p>千万不要关闭，否则无法连接，如果对数据库的操作结束，可以打开该控制台通过 Ctrl + C 关闭。</p><p>连接 MongoDB 数据服务</p><p>注意：在进行连接之前请确保你的服务实例是开启状态的（不要关闭刚才开启的数据服务实例）。</p><p>打开一个新的控制台，在控制台输入以下命令用来连接本机的 MongoDB 服务实例：</p><pre><code>mongo</code></pre><p>mongo 命令默认去连接本机上的 MongoDB 服务实例：127.0.0.1:27017，可以通过下面的命令</p><p>指定连接的主机名和端口号：</p><pre><code>mongo --host 127.0.0.1 --port 27017</code></pre><p>如果看到类似于如下的字样说明连接成功：</p><pre><code>MongoDB shell version v3.4.0connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.0Server has startup warnings:2017-01-18T18:49:53.865+0800 I CONTROL  [initandlisten]2017-01-18T18:49:53.865+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.2017-01-18T18:49:53.866+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.2017-01-18T18:49:53.866+0800 I CONTROL  [initandlisten]&gt;</code></pre><p>如果提示 “无法连接主机”，请检查你的 MongoDB 数据服务实例是否开启。</p><p>基本操作命令</p><ul><li>show dbs<ul><li>查看当前服务实例上所有的数据库</li></ul></li><li>use 数据库名称<ul><li>这个命令表示切换到指定的数据库</li><li>如果没有，也不会创建</li><li>如果已经有了，则表示切换到这个数据库对该数据库进行操作</li></ul></li><li>db<ul><li>查看当前所处的数据库</li></ul></li><li>db.集合名称.insert(数据文档)</li><li>show collections<ul><li>查看当前数据库中所有的集合</li></ul></li><li>db.集合名称.find()<ul><li>查询指定集合中所有的数据</li><li>可以通过 db.集合名称.find().pretty() 美化输出格式</li><li>默认是查询所有，可以通过：db.集合名称.find({查询条件}) 按条件查询集合中的数据</li></ul></li><li>db.集合名称.update({更新条件}, {要更新的字段})<ul><li>更新指定集合数据</li></ul></li><li>db.集合名称.remove({删除条件})<ul><li>删除指定集合中的数据</li></ul></li></ul><p>使用 Node 操作 MongoDB</p><p>项目结构如下 db为封装的Mongodb的增删改查方法，student为学生管理系统中分散的路由：</p><p>安装 MongoDB 官方提供的驱动包：</p><pre><code>npm install --save mongodb</code></pre><p>具体操作方式请参考官方文档：<a href="https://www.npmjs.com/package/mongodb" target="_blank" rel="noopener">https://www.npmjs.com/package/mongodb</a></p><p>使用原生方式操作MongoDB</p><p>db</p><pre><code>var mongo = require(&apos;mongodb&apos;);var MongoClient = mongo.MongoClient;var url = &apos;mongodb://localhost:27017/itcast&apos;;// 获取到 数据库 单条数据本身的ObjectID，并把这个通过接口暴露出去exports.ObjectID = mongo.ObjectID;exports.insertOne = function (collectionName, doc, callback) {    MongoClient.connect(url, function (err, db) {        if (err) {            // 如果报错了  酒吧这个错误传递给外边的回调函数            return callback(err);        }        db.collection(collectionName)            .insertOne(doc, function (err, result) {                if (err) {                    return callback(err);                }                callback(null, result);                db.close()            })    })}exports.findOne = function (collectionName, conditon, callback) {    MongoClient.connect(url, function (err, db) {        if (err) {            // 如果报错了  酒吧这个错误传递给外边的回调函数            return callback(err);        }        db.collection(collectionName)            .findOne(conditon, function (err, result) {                if (err) {                    return callback(err);                }                callback(null, result);                db.close()            })    })}exports.find = function (collectionName, condition, callback) {    MongoClient.connect(url, function (err, db) {        if (err) {            // 如果报错了  酒吧这个错误传递给外边的回调函数            return callback(err);        }        db.collection(collectionName)            .find(condition)            .toArray(function (err, docs) {                if (err) {                    return callback(err)                }                callback(null, docs);                db.close();            })    })}exports.deleteOne = function (collectionName, condiction, callback) {    MongoClient.connect(url, function (err, db) {        if (err) {            return callback(err);        }        db.collection(collectionName)            .deleteOne(condiction, function (err, result) {                if (err) {                    return callback(err);                }                callback(null, result);            })    })}// 做编辑功能exports.updateOne = function (collectionName, condition, changeDoc, callback) {    MongoClient.connect(url,function (err, db) {        if (err) {            return callback(err)        }        db.collection(collectionName)            .updateOne(condition, changeDoc, function (err, result) {            if(err)            {                return callback(err);            }            callback(null, result);            })    })}</code></pre><p>student:</p><pre><code>var db = require(&apos;./db&apos;);// db  就是我们封装号的对象 通过require  来暴露接口exports.index = function (req,res) {    db.find(&apos;students&apos;,{},function (err,docs) {        if(err)        {            // res.end(JSON.stringify({对象}))            // res.json 是 Express 帮你扩展的一个方法，传入一个对象，自动帮你转为字符胡之后再去发送给客户端            return res.json({                err_no:500,                message:&apos;查询数据失败，请稍后重试&apos;            })        }        console.log(docs)        res.render(&apos;student/list&apos;,{            students:docs        })    })}exports.list = function (req, res) {    db.find(&apos;students&apos;, {}, function (err, docs) {        if (err) {            return res.json({                err_no: 500,                message: &apos;查询数据失败，请稍后重试&apos;            })        }        res.json({            err_no: 0,            data: docs        })    })}exports.new = function (req,res) {    res.render(&apos;student/new&apos;);}exports.doNew = function (req,res) {    db.insertOne(&apos;students&apos;,req.body,function (err,result) {        if(err)        {            return res.json({                err_no:500,                message:&apos;服务器正忙，请稍后重试&apos;            })        }        res.json({            err_no:0,            message:&apos;insert success&apos;        })    })}// 这是对查看按钮 做的操作exports.info = function (req,res) {    var id = req.query.id;    db.findOne(&apos;students&apos;,{        _id:db.ObjectID(id)    },function (err,doc) {        if(err)        {            return res.json({                err_no:500,                message:&apos;操作数据库失败了&apos;            })        }        console.log(doc);        res.render(&apos;student/info&apos;,{            student:doc        })    })}exports.remove = function (req,res) {    var id = req.query.id;    db.deleteOne(&apos;students&apos;,{        _id:db.ObjectID(id)    },function (err,result) {        if(err)        {            return res.json({                err_no:500,                message:&apos;操作数据库失败&apos;            })        }        res.json({            err_no:0,            message:&apos;success&apos;        })        /*        res.redirect  就是重定向方法        告诉客户端浏览器 你重新请求这个路径把  对于异步请求来说        服务端的 redirect 无效的        red.redirect(&apos;/students&apos;)         */    })}// 制作编辑功能exports.edit = function (req,res) {    var id = req.query.id;    console.log(id)    db.findOne(&apos;students&apos;, {        _id: db.ObjectID(id)    }, function (err, doc) {        if (err) {            return res.json({                err_no: 500,                message: &apos;读取数据失败，请稍后重试&apos;            })        }        res.render(&apos;student/edit&apos;, {            student: doc,            majors: [                &apos;java&apos;,                &apos;ui&apos;,                &apos;ios&apos;,                &apos;前端与移动开发&apos;,                &apos;全栈&apos;            ]        })    })}   exports.doEdit = function (req,res) {       var body = req.body;       var id  = body.id;       delete body.id;       db.updateOne(&apos;students&apos;,{           _id:db.ObjectID(id)       },{           $set:body       },function (err,result) {           if (err) {               return res.json({                   err_no: 500,                   message: &apos;更新失败，请稍后重试&apos;               })           }           res.json({               err_no: 0,               message: &apos;success&apos;           })       })   }</code></pre><p>路由router：</p><pre><code>var express = require(&apos;express&apos;);var index = require(&apos;./controllers/index&apos;);var student = require(&apos;./controllers/student&apos;);var router = express.Router();// 解析这句话 就是 当路径地址是 &apos;/&apos;的时候 会调用后来的这个方法来进行处理router.get(&apos;/&apos;,index.index);// 一个是 求情主页 一个是请求new 页router    .get(&apos;/students&apos;,student.index)    .get(&apos;/students/new&apos;,student.new)    .get(&apos;/students/info&apos;,student.info)    .post(&apos;/students/new&apos;,student.doNew)    .get(&apos;/students/list&apos;,student.list)    .get(&apos;/students/remove&apos;,student.remove)    //  在这个地方设置编辑信息// 有两种形式 一种是利用get的形式  一种是利用post的形式    .get(&apos;/students/edit&apos;,student.edit)    .post(&apos;/students/edit&apos;,student.doEdit)// 暴露接口module.exports = router;</code></pre><p>app：</p><pre><code>var express = require(&apos;express&apos;);var path = require(&apos;path&apos;);var router = require(&apos;./router&apos;);var bodyParser = require(&apos;body-parser&apos;);var app = express();// 配置静态资源的访问路径// 将node_module开放为公共资源 ，可以通过路径的形式直接访问该目录中的任意资源app.use(&apos;/node_modules/&apos;,express.static(path.join(__dirname,&apos;node_modules&apos;)));app.set(&apos;views&apos;,path.join(__dirname,&apos;views&apos;));//这一步设置 要注意 是viewapp.set(&apos;view engine&apos;,&apos;ejs&apos;);// 配置 body-parser插件 用来解析 表单post请求体app.use(bodyParser.urlencoded({extended:false}));app.use(bodyParser.json());// 挂载路由app.use(router);app.listen(3000,function () {    console.log(&apos;地狱之门已经开启，尽情的杀戮吧&apos;);})</code></pre><p>使用插件操作</p><p><a href="http://www.nodeclass.com/api/mongoose.html" target="_blank" rel="noopener">http://www.nodeclass.com/api/mongoose.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深入浅出Nodejs-04&lt;/p&gt;&lt;p&gt;package.json 文件&lt;/p&gt;&lt;p&gt;package.json 文件一般用来描述项目的一些基本信息，例如入口文件、依赖项、项目介绍、开发作者等数据。&lt;/p&gt;&lt;p&gt;目前已知的两个非常重要的属性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;main&lt;u
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>datatables插件使用详细说明</title>
    <link href="https://majunchang.github.io/datatables%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/"/>
    <id>https://majunchang.github.io/datatables插件使用详细说明/</id>
    <published>2017-04-16T00:40:24.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.NET/mickey_miki/article/details/8240477" target="_blank" rel="noopener">http://blog.csdn.NET/mickey_miki/article/details/8240477</a></p><hr><h2 id="本文共四部分：官网-基本使用-遇到的问题-属性表"><a href="#本文共四部分：官网-基本使用-遇到的问题-属性表" class="headerlink" title="本文共四部分：官网 | 基本使用|遇到的问题|属性表"></a>本文共四部分：官网 | 基本使用|遇到的问题|属性表</h2><h3 id="一：官方网站：-http-www-datatables-NET"><a href="#一：官方网站：-http-www-datatables-NET" class="headerlink" title="一：官方网站：[http://www.datatables.NET/]"></a>一：官方网站：[<a href="http://www.datatables.NET/" target="_blank" rel="noopener">http://www.datatables.NET/</a>]</h3><h3 id="二：基本使用：-http-www-guoxk-com-node-jQuery-datatables"><a href="#二：基本使用：-http-www-guoxk-com-node-jQuery-datatables" class="headerlink" title="二：基本使用：[http://www.guoxk.com/node/jQuery-datatables]"></a>二：基本使用：[<a href="http://www.guoxk.com/node/jQuery-datatables" target="_blank" rel="noopener">http://www.guoxk.com/node/jQuery-datatables</a>]</h3><h4 id="DataTables的默认配置"><a href="#DataTables的默认配置" class="headerlink" title="DataTables的默认配置"></a>DataTables的默认配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable();</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/Zero-configuration.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Zero-configuration.html</a></p><h4 id="DataTables的一些基础属性配置"><a href="#DataTables的一些基础属性配置" class="headerlink" title="DataTables的一些基础属性配置"></a>DataTables的一些基础属性配置</h4><p>“bPaginate”: true, //翻页功能</p><p>“bLengthChange”: true, //改变每页显示数据数量</p><p>“bFilter”: true, //过滤功能</p><p>“bSort”: false, //排序功能</p><p>“bInfo”: true,//页脚信息</p><p>“bAutoWidth”: true//自动宽度</p><p>示例：<a href="http://www.guoxk.com/html/DataTables/Feature-enablement.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Feature-enablement.html</a></p><h4 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;aaSorting&quot;: [</span><br><span class="line"></span><br><span class="line">[ 4, &quot;desc&quot; ]</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>从第0列开始，以第4列倒序排列</p><p>示例：<a href="http://www.guoxk.com/html/DataTables/Sorting-data.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Sorting-data.html</a></p><h4 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/Multi-column-sorting.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Multi-column-sorting.html</a></p><h4 id="隐藏某些列"><a href="#隐藏某些列" class="headerlink" title="隐藏某些列"></a>隐藏某些列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;aoColumnDefs&quot;: [</span><br><span class="line"></span><br><span class="line">&#123; &quot;bSearchable&quot;: false, &quot;bVisible&quot;: false, &quot;aTargets&quot;: [ 2 ] &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;bVisible&quot;: false, &quot;aTargets&quot;: [ 3 ] &#125;</span><br><span class="line"></span><br><span class="line">] &#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/Hidden-columns.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Hidden-columns.html</a></p><h4 id="改变页面上元素的位置"><a href="#改变页面上元素的位置" class="headerlink" title="改变页面上元素的位置"></a>改变页面上元素的位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;sDom&quot;: &apos;&lt;&quot;top&quot;fli&gt;rt&lt;&quot;bottom&quot;p&gt;&lt;&quot;clear&quot;&gt;&apos;</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">//l- 每页显示数量</span><br><span class="line"></span><br><span class="line">//f - 过滤输入</span><br><span class="line"></span><br><span class="line">//t - 表单Table</span><br><span class="line"></span><br><span class="line">//i - 信息</span><br><span class="line"></span><br><span class="line">//p - 翻页</span><br><span class="line"></span><br><span class="line">//r - pRocessing</span><br><span class="line"></span><br><span class="line">//&lt; and &gt; - div elements</span><br><span class="line"></span><br><span class="line">//&lt;&quot;class&quot; and &gt; - div with a class</span><br><span class="line"></span><br><span class="line">//Examples: &lt;&quot;wrapper&quot;flipt&gt;, &lt;lf&lt;t&gt;ip&gt;</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/DOM-positioning.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/DOM-positioning.html</a></p><h4 id="状态保存，使用了翻页或者改变了每页显示数据数量，会保存在cookie中，下回访问时会显示上一次关闭页面时的内容。"><a href="#状态保存，使用了翻页或者改变了每页显示数据数量，会保存在cookie中，下回访问时会显示上一次关闭页面时的内容。" class="headerlink" title="状态保存，使用了翻页或者改变了每页显示数据数量，会保存在cookie中，下回访问时会显示上一次关闭页面时的内容。"></a>状态保存，使用了翻页或者改变了每页显示数据数量，会保存在cookie中，下回访问时会显示上一次关闭页面时的内容。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;bStateSave&quot;: true</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/State-saving.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/State-saving.html</a></p><h4 id="显示数字的翻页样式"><a href="#显示数字的翻页样式" class="headerlink" title="显示数字的翻页样式"></a>显示数字的翻页样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;sPaginationType&quot;: &quot;full_numbers&quot;</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/Alternative-pagination-styles.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Alternative-pagination-styles.html</a></p><h4 id="水平限制宽度"><a href="#水平限制宽度" class="headerlink" title="水平限制宽度"></a>水平限制宽度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;sScrollX&quot;: &quot;100%&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sScrollXInner&quot;: &quot;110%&quot;,</span><br><span class="line"></span><br><span class="line">&quot;bScrollCollapse&quot;: true</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/Horizontal.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Horizontal.html</a></p><h4 id="垂直限制高度"><a href="#垂直限制高度" class="headerlink" title="垂直限制高度"></a>垂直限制高度</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/Vertical.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Vertical.html</a></p><h4 id="水平和垂直两个方向共同限制"><a href="#水平和垂直两个方向共同限制" class="headerlink" title="水平和垂直两个方向共同限制"></a>水平和垂直两个方向共同限制</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/HorizontalVerticalBoth.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/HorizontalVerticalBoth.html</a></p><p>####改变语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;oLanguage&quot;: &#123;</span><br><span class="line"></span><br><span class="line">&quot;sLengthMenu&quot;: &quot;每页显示 MENU 条记录&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sZeroRecords&quot;: &quot;抱歉， 没有找到&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sInfo&quot;: &quot;从 START 到 END /共 TOTAL 条数据&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sInfoEmpty&quot;: &quot;没有数据&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sInfoFiltered&quot;: &quot;(从 MAX 条数据中检索)&quot;,</span><br><span class="line"></span><br><span class="line">&quot;oPaginate&quot;: &#123;</span><br><span class="line"></span><br><span class="line">&quot;sFirst&quot;: &quot;首页&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sPrevious&quot;: &quot;前一页&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sNext&quot;: &quot;后一页&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sLast&quot;: &quot;尾页&quot;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;sZeroRecords&quot;: &quot;没有检索到数据&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sProcessing&quot;: &quot;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/Change-language-information.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/Change-language-information.html</a></p><h4 id="click事件"><a href="#click事件" class="headerlink" title="click事件"></a>click事件</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/event-click.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/event-click.html</a></p><h4 id="配合使用tooltip插件"><a href="#配合使用tooltip插件" class="headerlink" title="配合使用tooltip插件"></a>配合使用tooltip插件</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/tooltip.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/tooltip.html</a></p><h4 id="定义每页显示数据数量"><a href="#定义每页显示数据数量" class="headerlink" title="定义每页显示数据数量"></a>定义每页显示数据数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;aLengthMenu&quot;: [[10, 25, 50, -1], [10, 25, 50, &quot;All&quot;]]</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/length_menu.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/length_menu.html</a></p><h4 id="row-callback"><a href="#row-callback" class="headerlink" title="row callback"></a>row callback</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/RowCallback.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/RowCallback.html</a></p><p>最后一列的值如果为“A”则加粗显示</p><h4 id="排序控制"><a href="#排序控制" class="headerlink" title="排序控制"></a>排序控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;aoColumns&quot;: [</span><br><span class="line"></span><br><span class="line">null,</span><br><span class="line"></span><br><span class="line">&#123; &quot;asSorting&quot;: [ &quot;asc&quot; ] &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;asSorting&quot;: [ &quot;desc&quot;, &quot;asc&quot;, &quot;asc&quot; ] &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;asSorting&quot;: [ ] &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;asSorting&quot;: [ ] &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/sort.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/sort.html</a></p><p>说明：第一列点击按默认情况排序，第二列点击已顺序排列，第三列点击一次倒序，二三次顺序，第四五列点击不实现排序</p><h4 id="从配置文件中读取语言包"><a href="#从配置文件中读取语言包" class="headerlink" title="从配置文件中读取语言包"></a>从配置文件中读取语言包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;oLanguage&quot;: &#123;</span><br><span class="line"></span><br><span class="line">&quot;sUrl&quot;: &quot;cn.txt&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h4 id="是用ajax源"><a href="#是用ajax源" class="headerlink" title="是用ajax源"></a>是用ajax源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;bProcessing&quot;: true,</span><br><span class="line"></span><br><span class="line">&quot;sAjaxSource&quot;: &apos;./arrays.txt&apos;</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/ajax.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/ajax.html</a></p><h4 id="使用ajax，在服务器端整理数据"><a href="#使用ajax，在服务器端整理数据" class="headerlink" title="使用ajax，在服务器端整理数据"></a>使用ajax，在服务器端整理数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class="line"></span><br><span class="line">&quot;bProcessing&quot;: true,</span><br><span class="line"></span><br><span class="line">&quot;bServerSide&quot;: true,</span><br><span class="line"></span><br><span class="line">&quot;sPaginationType&quot;: &quot;full_numbers&quot;,</span><br><span class="line"></span><br><span class="line">&quot;sAjaxSource&quot;: &quot;./server_processing.PHP&quot;,</span><br><span class="line"></span><br><span class="line">/*如果加上下面这段内容，则使用post方式传递数据</span><br><span class="line"></span><br><span class="line">&quot;fnServerData&quot;: function ( sSource, aoData, fnCallback ) &#123;</span><br><span class="line"></span><br><span class="line">$.ajax( &#123;</span><br><span class="line"></span><br><span class="line">&quot;dataType&quot;: &apos;json&apos;,</span><br><span class="line"></span><br><span class="line">&quot;type&quot;: &quot;POST&quot;,</span><br><span class="line"></span><br><span class="line">&quot;url&quot;: sSource,</span><br><span class="line"></span><br><span class="line">&quot;data&quot;: aoData,</span><br><span class="line"></span><br><span class="line">&quot;success&quot;: fnCallback</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">&quot;oLanguage&quot;: &#123;</span><br><span class="line"></span><br><span class="line">&quot;sUrl&quot;: &quot;cn.txt&quot;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;aoColumns&quot;: [</span><br><span class="line"></span><br><span class="line">&#123; &quot;sName&quot;: &quot;platform&quot; &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;sName&quot;: &quot;version&quot; &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;sName&quot;: &quot;engine&quot; &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;sName&quot;: &quot;browser&quot; &#125;,</span><br><span class="line"></span><br><span class="line">&#123; &quot;sName&quot;: &quot;grade&quot; &#125;</span><br><span class="line"></span><br><span class="line">]//$_GET[&apos;sColumns&apos;]将接收到aoColumns传递数据</span><br><span class="line"></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>示例：<a href="http://www.guoxk.com/html/DataTables/ajax-serverSide.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/ajax-serverSide.html</a></p><h4 id="为每行加载id和class"><a href="#为每行加载id和class" class="headerlink" title="为每行加载id和class"></a>为每行加载id和class</h4><p>服务器端返回数据的格式：</p><p>{</p><p>“DT_RowId”: “row_8”,</p><p>“DT_RowClass”: “gradeA”,</p><p>“0”: “Gecko”,</p><p>“1”: “Firefox 1.5”,</p><p>“2”: “Win 98+ / OSX.2+”,</p><p>“3”: “1.8”,</p><p>“4”: “A”</p><p>},</p><p>示例：<a href="http://www.guoxk.com/html/DataTables/add_id_class.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/add_id_class.html</a></p><h4 id="为每行显示细节，点击行开头的“-”号展开细节显示"><a href="#为每行显示细节，点击行开头的“-”号展开细节显示" class="headerlink" title="为每行显示细节，点击行开头的“+”号展开细节显示"></a>为每行显示细节，点击行开头的“+”号展开细节显示</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/with-row-information.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/with-row-information.html</a></p><h4 id="选择多行"><a href="#选择多行" class="headerlink" title="选择多行"></a>选择多行</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/selectRows.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/selectRows.html</a></p><h4 id="集成jQuery插件jEditable"><a href="#集成jQuery插件jEditable" class="headerlink" title="集成jQuery插件jEditable"></a>集成jQuery插件jEditable</h4><p>示例：<a href="http://www.guoxk.com/html/DataTables/jEditable-integration.html" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/jEditable-integration.html</a></p><p>示例打包下载：<a href="http://www.guoxk.com/html/DataTables/DataTables.rar" target="_blank" rel="noopener">http://www.guoxk.com/html/DataTables/DataTables.rar</a></p><p>###、遇到的问题</p><h4 id="“Cannot-reinitialise-DataTable"><a href="#“Cannot-reinitialise-DataTable" class="headerlink" title="“Cannot reinitialise DataTable."></a>“Cannot reinitialise DataTable.</h4><p>To retrieve the DataTables object for this table, pass no arguments or see the docs for bRetrieve and bDestroy ”</p><p>解决办法：<a href="http://blog.csdn.Net/mickey_miki/article/details/8239185" target="_blank" rel="noopener">http://blog.csdn.Net/mickey_miki/article/details/8239185</a></p><h4 id="排序时指定某列不可排序"><a href="#排序时指定某列不可排序" class="headerlink" title="排序时指定某列不可排序"></a>排序时指定某列不可排序</h4><p>$(“.datatable”).dataTable( {</p><pre><code>    &quot;aoColumnDefs&quot;: [ { &quot;bSortable&quot;: false, &quot;aTargets&quot;: [ 0 ] }]  });  </code></pre><p>注意： “bSort”: true, //排序功能 要注释掉</p><h4 id="确定选择每页展示个数列表和默认每页展示个数设置"><a href="#确定选择每页展示个数列表和默认每页展示个数设置" class="headerlink" title="确定选择每页展示个数列表和默认每页展示个数设置"></a>确定选择每页展示个数列表和默认每页展示个数设置</h4><p>[javascript] view plain copy</p><p>“aLengthMenu”: [[4, 10, 20, -1], [4, 10, 20, “所有”]],</p><p>“iDisplayLength”:4</p><h3 id="属性表"><a href="#属性表" class="headerlink" title="属性表"></a>属性表</h3><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/085655717.png" alt="mark"><br><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/085727603.png" alt="mark"><br><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/085758474.png" alt="mark"><br><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/085822724.png" alt="mark"><br><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/085844066.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.csdn.NET/mickey_miki/article/details/8240477&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.NET/mickey_miki/articl
      
    
    </summary>
    
      <category term="plugin" scheme="https://majunchang.github.io/categories/plugin/"/>
    
    
  </entry>
  
  <entry>
    <title>使用dataTable插件配置表格</title>
    <link href="https://majunchang.github.io/%E4%BD%BF%E7%94%A8dataTable%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%A0%BC/"/>
    <id>https://majunchang.github.io/使用dataTable插件配置表格/</id>
    <published>2017-04-14T08:47:23.000Z</published>
    <updated>2018-10-23T12:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用jquery的datatable插件-配置分页和查询功能"><a href="#使用jquery的datatable插件-配置分页和查询功能" class="headerlink" title="使用jquery的datatable插件 配置分页和查询功能"></a>使用jquery的datatable插件 配置分页和查询功能</h2><h3 id="安装以及引入"><a href="#安装以及引入" class="headerlink" title="安装以及引入"></a>安装以及引入</h3><ul><li>使用npm进行安装<blockquote><p>npm install datatables –save</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"http://cdn.datatables.net/1.10.13/css/jquery.dataTables.css"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- jQuery --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf8"</span> src=<span class="string">"http://code.jquery.com/jquery-1.10.2.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- DataTables --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf8"</span> src=<span class="string">"http://cdn.datatables.net/1.10.13/js/jquery.dataTables.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="下面给出一个示例以及配置选项"><a href="#下面给出一个示例以及配置选项" class="headerlink" title="下面给出一个示例以及配置选项"></a>下面给出一个示例以及配置选项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" href="node_modules/</span>datatables/media/css/jquery.dataTables.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;table id="</span>example<span class="string">" class="</span>display<span class="string">" cellspacing="</span><span class="number">0</span><span class="string">" width="</span><span class="number">80</span>%<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;thead&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Name&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Position&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Office&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Age&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Start date&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Salary&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;/thead&gt;</span></span><br><span class="line"><span class="string">    &lt;tfoot&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Name&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Position&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Office&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Age&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Start date&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;Salary&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;/tfoot&gt;</span></span><br><span class="line"><span class="string">    &lt;tbody&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Jena Gaines&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Office Manager&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;London&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;30&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2008/12/19&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$90,560&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Quinn Flynn&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Support Lead&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Edinburgh&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2013/03/03&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$342,000&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Charde Marshall&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Regional Director&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;San Francisco&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;36&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2008/10/16&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$470,600&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Haley Kennedy&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Senior Marketing Designer&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;London&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;43&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2012/12/18&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$313,500&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Tatyana Fitzpatrick&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Regional Director&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;London&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;19&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2010/03/17&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$385,750&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Michael Silva&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Marketing Designer&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;London&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;66&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2012/11/27&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$198,500&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Paul Byrd&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Chief Financial Officer (CFO)&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;New York&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;64&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2010/06/09&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$725,000&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Gloria Little&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Systems Administrator&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;New York&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;59&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2009/04/10&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$237,500&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Bradley Greer&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Software Engineer&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;London&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;41&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2012/10/13&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$132,000&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Dai Rios&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Personnel Lead&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Edinburgh&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;35&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2012/09/26&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$217,500&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Jenette Caldwell&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;Development Lead&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;New York&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;30&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;2011/09/03&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$345,000&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/tbody&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h3><p><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/082731669.png" alt="mark"></p><p>###效果如下：<br><img src="http://oneg19f80.bkt.clouddn.com/blog/20170416/082826323.png" alt="mark"></p><h3 id="接下来是配置选项，在配置之前，我们需要引入jq和datatable插件"><a href="#接下来是配置选项，在配置之前，我们需要引入jq和datatable插件" class="headerlink" title="接下来是配置选项，在配置之前，我们需要引入jq和datatable插件"></a>接下来是配置选项，在配置之前，我们需要引入jq和datatable插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"node_modules/datatables/media/js/jquery.dataTables.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'#example'</span>).dataTable(&#123;</span><br><span class="line">                bLengthChange: <span class="literal">false</span>,</span><br><span class="line">                bFilter: <span class="literal">true</span>,</span><br><span class="line">                bInfo: <span class="literal">false</span>,</span><br><span class="line">                bSort: <span class="literal">true</span>,</span><br><span class="line">                select: <span class="literal">false</span>,</span><br><span class="line">                sPaginationType: <span class="string">"full_numbers"</span>,</span><br><span class="line">                sSearchPlaceholder: <span class="string">'请输入筛选关键字'</span>,</span><br><span class="line">                bRetrieve: <span class="literal">true</span>,</span><br><span class="line">                iDisplayLength: <span class="number">5</span>,</span><br><span class="line">                oLanguage: &#123;</span><br><span class="line">                    sLengthMenu: <span class="string">"每页显示 _MENU_ 条数据"</span>,</span><br><span class="line">                    sInfo: <span class="string">"从 _START_ 到 _END_ /共 _TOTAL_ 条数据"</span>,</span><br><span class="line">                    sInfoEmpty: <span class="string">"没有数据"</span>,</span><br><span class="line">                    sInfoFiltered: <span class="string">"(从 _MAX_ 条数据中检索)"</span>,</span><br><span class="line">                    sZeroRecords: <span class="string">"没有检索到数据"</span>,</span><br><span class="line">                    sSearchPlaceholder: <span class="string">'请输入筛选关键字'</span>,</span><br><span class="line">                    sSearch: <span class="string">"筛选"</span>,</span><br><span class="line">                    oPaginate: &#123;</span><br><span class="line">                        sFirst: <span class="string">"首页"</span>,</span><br><span class="line">                        sPrevious: <span class="string">"前一页"</span>,</span><br><span class="line">                        sNext: <span class="string">"后一页"</span>,</span><br><span class="line">                        sLast: <span class="string">"尾页"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                order:[[<span class="number">2</span>,<span class="string">'asc'</span>]]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用jquery的datatable插件-配置分页和查询功能&quot;&gt;&lt;a href=&quot;#使用jquery的datatable插件-配置分页和查询功能&quot; class=&quot;headerlink&quot; title=&quot;使用jquery的datatable插件 配置分页和查询功能&quot;&gt;
      
    
    </summary>
    
      <category term="plugin" scheme="https://majunchang.github.io/categories/plugin/"/>
    
    
  </entry>
  
</feed>
